using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using NUnit.Framework;

/// <summary>
/// ユニットテストの中で結果確認のために「自動テストで作成されたプロジェクト」フォルダに生成されるプロジェクト。
/// 「Nijo.ApplicationTemplate.Ver1」プロジェクトをコピーして作成する。
/// </summary>
internal class 自動テストで作成されたプロジェクト : IDisposable {

    /// <summary>
    /// 使用中のテストプロジェクトの番号。
    /// <see cref="Setup"/> で予約され、 <see cref="Dispose"/> で解放されます。
    /// </summary>
    private static readonly Dictionary<int, 自動テストで作成されたプロジェクト?> _canUse = new() {
        { 1, null },
        { 2, null },
        { 3, null },
        { 4, null },
        { 5, null },
        { 6, null },
        { 7, null },
        { 8, null },
        // あまりに並列実行可能な数が多すぎると
        // テスト実行環境のストレージを圧迫しすぎてしまうので適度な数に留める
    };
    private static readonly Lock _lock = new();

    /// <summary>
    /// テストプロジェクトをセットアップします。
    /// 複数のソース生成テストを並列で実行できるようにするため、「自動テストで作成されたプロジェクト1」「自動テストで作成されたプロジェクト2」…
    /// のうち、未使用のものを使用します。
    /// 必ずusingステートメントで呼んでください。
    /// </summary>
    /// <returns>セットアップされたテストプロジェクト</returns>
    internal static async Task<自動テストで作成されたプロジェクト> Setup() {
        var workspaceRoot = Path.GetFullPath(Path.Combine(TestContext.CurrentContext.TestDirectory, "..", "..", ".."));

        // テストプロジェクトディレクトリの準備
        自動テストで作成されたプロジェクト? instance = null;
        var timeout = DateTime.Now.AddMinutes(3);
        while (true) {
            var found = false;
            lock (_lock) {
                foreach (var item in _canUse) {
                    if (item.Value != null) continue;

                    // 使用可能なテストプロジェクトを取得
                    var testProjectDir = Path.Combine(workspaceRoot, "..", $"自動テストで作成されたプロジェクト{item.Key}");
                    _canUse[item.Key] = instance = new 自動テストで作成されたプロジェクト(testProjectDir);
                    found = true;
                    break;
                }
            }

            // 使用可能なテストプロジェクトが見つかった場合、ループを抜ける
            if (found) break;

            // 使用可能なテストプロジェクトがない場合、他のテストの完了まで待つ
            if (DateTime.Now > timeout) {
                throw new Exception("使用可能なテストプロジェクトがありません。");
            }
            await Task.Delay(1000);
        }

        if (instance == null) throw new Exception("使用可能なテストプロジェクトがありません。");

        // テンプレートプロジェクトから全ファイルコピー
        var templateProjectDir = Path.Combine(workspaceRoot, "..", "Nijo.ApplicationTemplate.Ver1");
        Nijo.Util.DotnetEx.DirectoryHelper.CopyDirectoryRecursively(templateProjectDir, instance.ProjectRoot);

        // テンプレートプロジェクトの集約定義に依存するソースを削除
        File.Delete(Path.Combine(instance.ProjectRoot, "Core", "OverridedApplicationService.cs"));
        File.Delete(Path.Combine(instance.ProjectRoot, "Core", "OverridedApplicationConfigure.cs"));
        File.Delete(Path.Combine(instance.ProjectRoot, "Core.AutoGenerated", "PartialClasses.cs"));
        Directory.Delete(Path.Combine(instance.ProjectRoot, "Test", "Tests"), true);

        return instance;
    }

    private 自動テストで作成されたプロジェクト(string projectRoot) {
        ProjectRoot = projectRoot;
    }
    public string ProjectRoot { get; }

    public void Dispose() {
        throw new NotImplementedException();
    }
}