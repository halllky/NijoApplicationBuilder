using Nijo.CodeGenerating;
using Nijo.ImmutableSchema;
using Nijo.Parts.CSharp;
using Nijo.Util.DotnetEx;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace Nijo.CodeGenerating {
    /// <summary>
    /// 機能単位などではなく集約単位でソースコードが記載されるファイル
    /// </summary>
    public class SourceFileByAggregate {

        public SourceFileByAggregate(
            RootAggregate rootAggregate,
            [CallerFilePath] string? callerFilePath = null,
            [CallerMemberName] string? callerMemberName = null) {
            _rootAggregate = rootAggregate;
            _callerFilePath = callerFilePath;
            _callerMemberName = callerMemberName;
        }
        private readonly RootAggregate _rootAggregate;
        private readonly string? _callerFilePath;
        private readonly string? _callerMemberName;

        private class CoreLibrarySourceCodeItem {
            public string SourceCode { get; set; } = string.Empty;
            /// <summary>
            /// ファイル名が指定されている場合、ルート集約名のフォルダの中のそのファイル名のフォルダに出力。
            /// 指定なしの場合、__AutoGeneratedフォルダ直下に出力。
            /// </summary>
            public string? FileName { get; set; }
        }

        private readonly List<CoreLibrarySourceCodeItem> _appSrvMethods = [];
        private readonly List<CoreLibrarySourceCodeItem> _csharpClass = [];
        private readonly List<string> _webApiControllerAction = [];
        private readonly List<string> _typeScriptTypeDef = [];
        private readonly List<string> _typeScriptFunctions = [];

        public void AddAppSrvMethod(string sourceCode, string? fileName = null) {
            _appSrvMethods.Add(new CoreLibrarySourceCodeItem { SourceCode = sourceCode, FileName = fileName });
        }
        public void AddCSharpClass(string sourceCode, string? fileName = null) {
            _csharpClass.Add(new CoreLibrarySourceCodeItem { SourceCode = sourceCode, FileName = fileName });
        }
        public void AddWebapiControllerAction(string sourceCode) {
            _webApiControllerAction.Add(sourceCode);
        }
        public void AddTypeScriptTypeDef(string sourceCode) {
            _typeScriptTypeDef.Add(sourceCode);
        }
        public void AddTypeScriptFunction(string sourceCode) {
            _typeScriptFunctions.Add(sourceCode);
        }

        public void ExecuteRendering(CodeRenderingContext ctx) {

            ctx.CoreLibrary(dir => {
                // デフォルトファイルに出力されるコード
                var defaultAppSrvMethods = _appSrvMethods.Where(x => x.FileName == null).Select(x => x.SourceCode).ToList();
                var defaultCSharpClass = _csharpClass.Where(x => x.FileName == null).Select(x => x.SourceCode).ToList();

                // デフォルトファイル
                if (defaultAppSrvMethods.Count > 0 || defaultCSharpClass.Count > 0) {
                    dir.Generate(new SourceFile(_callerFilePath, _callerMemberName) {
                        FileName = $"{_rootAggregate.PhysicalName.ToFileNameSafe()}.cs",
                        Contents = RenderCoreLibrary(ctx, defaultAppSrvMethods, defaultCSharpClass),
                    });
                }

                // 集約フォルダ内のファイル
                var fileGroups = _appSrvMethods
                    .Where(x => x.FileName != null)
                    .GroupBy(x => x.FileName)
                    .Select(g => new {
                        FileName = g.Key,
                        AppSrvMethods = g.Select(x => x.SourceCode).ToList(),
                        CSharpClass = new List<string>()
                    })
                    .Concat(
                        _csharpClass
                        .Where(x => x.FileName != null)
                        .GroupBy(x => x.FileName)
                        .Select(g => new {
                            FileName = g.Key,
                            AppSrvMethods = new List<string>(),
                            CSharpClass = g.Select(x => x.SourceCode).ToList()
                        })
                    )
                    .GroupBy(x => x.FileName)
                    .Select(g => new {
                        FileName = g.Key,
                        AppSrvMethods = g.SelectMany(x => x.AppSrvMethods).ToList(),
                        CSharpClass = g.SelectMany(x => x.CSharpClass).ToList()
                    });

                dir.Directory(_rootAggregate.PhysicalName.ToFileNameSafe(), aggregateDir => {
                    foreach (var fileGroup in fileGroups) {
                        aggregateDir.Generate(new SourceFile(_callerFilePath, _callerMemberName) {
                            FileName = $"{fileGroup.FileName}.cs",
                            Contents = RenderCoreLibrary(ctx, fileGroup.AppSrvMethods, fileGroup.CSharpClass)
                        });
                    }
                });
            });
            ctx.WebapiProject(dir => {
                if (_webApiControllerAction.Count > 0) {
                    dir.Generate(new SourceFile(_callerFilePath, _callerMemberName) {
                        FileName = $"{_rootAggregate.PhysicalName.ToFileNameSafe()}.cs",
                        Contents = RenderWebapi(ctx),
                    });
                }
            });
            ctx.ReactProject(dir => {
                if (_typeScriptTypeDef.Count > 0 || _typeScriptFunctions.Count > 0) {
                    dir.Generate(new SourceFile(_callerFilePath, _callerMemberName) {
                        FileName = $"{_rootAggregate.PhysicalName.ToFileNameSafe()}.ts",
                        Contents = RenderNodeJs(ctx),
                    });
                }
            });
        }

        private static string RenderCoreLibrary(CodeRenderingContext ctx, List<string> appSrvMethods, List<string> csharpClass) {
            return $$"""
                using System;
                using System.Collections;
                using System.Collections.Generic;
                using System.ComponentModel;
                using System.ComponentModel.DataAnnotations;
                using System.Linq;
                using System.Linq.Expressions;
                using System.Text.Json.Nodes;
                using System.Text.Json.Serialization;
                using Microsoft.EntityFrameworkCore;
                using Microsoft.EntityFrameworkCore.Infrastructure;

                namespace {{ctx.Config.RootNamespace}};

                {{If(appSrvMethods.Count > 0, () => $$"""
                partial class {{ApplicationService.ABSTRACT_CLASS}} {
                {{appSrvMethods.SelectTextTemplate(source => $$"""

                    {{WithIndent(source, "    ")}}

                """)}}
                }

                """)}}
                {{csharpClass.SelectTextTemplate(source => $$"""

                {{WithIndent(source, "")}}

                """)}}
                """;
        }

        private string RenderWebapi(CodeRenderingContext ctx) {
            var controller = new AspNetController(_rootAggregate);

            return $$"""
                using System;
                using System.Collections;
                using System.Collections.Generic;
                using System.ComponentModel;
                using System.ComponentModel.DataAnnotations;
                using System.Linq;
                using Microsoft.AspNetCore.Mvc;
                using Microsoft.EntityFrameworkCore;
                using Microsoft.EntityFrameworkCore.Infrastructure;

                namespace {{ctx.Config.RootNamespace}};

                /// <summary>
                /// {{_rootAggregate.DisplayName}}に関する Web API 操作を提供する ASP.NET Core のコントローラー
                /// </summary>
                [ApiController]
                [Route("{{controller.Route}}")]
                internal partial class {{controller.CsClassName}} : ControllerBase {
                    internal {{controller.CsClassName}}({{ApplicationService.ABSTRACT_CLASS}} applicationService, {{ApplicationConfigure.ABSTRACT_CLASS_WEBAPI}} webConfigure) {
                        _applicationService = applicationService;
                        _webConfigure = webConfigure;
                    }
                    /// <summary>アプリケーションサービス</summary>
                    private readonly {{ApplicationService.ABSTRACT_CLASS}} _applicationService;
                    /// <summary>WebApiプロジェクトの設定処理</summary>
                    private readonly {{ApplicationConfigure.ABSTRACT_CLASS_WEBAPI}} _webConfigure;
                {{_webApiControllerAction.SelectTextTemplate(source => $$"""

                    {{WithIndent(source, "    ")}}
                """)}}
                }
                """;
        }
        private string RenderNodeJs(CodeRenderingContext ctx) {
            // 1つ隣のref-toはimportする必要がある
            var refTos = _rootAggregate
                .EnumerateThisAndDescendants()
                .SelectMany(agg => agg.GetMembers())
                .OfType<RefToMember>()
                .Select(@ref => @ref.RefTo)
                .Distinct()
                .GroupBy(agg => agg.GetRoot());

            var refToModules = new Dictionary<string, List<string>>();
            foreach (var group in refTos) {
                var fileName = $"./{group.Key.PhysicalName}";
                var refEntries = group.Select(agg => new Models.QueryModelModules.DisplayDataRef.Entry(agg));

                var modules = new List<string>();
                foreach (var refEntry in refEntries) {
                    modules.Add(refEntry.TsTypeName);
                    modules.Add(refEntry.TsNewObjectFunction);
                }

                refToModules.Add(fileName, modules);
            }

            return $$"""
                import React from "react"
                import * as ReactRouter from "react-router-dom"
                import { UUID } from "uuidjs"
                import * as Util from "./util"
                {{refToModules.SelectTextTemplate(modules => $$"""
                import { {{modules.Value.Join(", ")}} } from "{{modules.Key}}"
                """)}}

                //#region 型定義
                {{_typeScriptTypeDef.SelectTextTemplate(source => $$"""
                {{source}}

                """)}}
                //#endregion 型定義


                //#region 関数
                {{_typeScriptFunctions.SelectTextTemplate(source => $$"""
                {{source}}

                """)}}
                //#endregion 関数
                """;
        }
    }
}
