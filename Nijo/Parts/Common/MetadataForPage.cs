using Nijo.CodeGenerating;
using Nijo.ImmutableSchema;
using Nijo.Util.DotnetEx;
using Nijo.ValueMemberTypes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Nijo.Parts.Common;

/// <summary>
/// 画面の自動生成のためのメタデータ。
/// <see cref="Metadata"/> と役割が相当部分重複している。
/// </summary>
internal class MetadataForPage : IMultiAggregateSourceFile {

    private readonly List<AggregateBase> _entries = new();
    private readonly Lock _lock = new();
    internal MetadataForPage Add(AggregateBase aggregate) {
        lock (_lock) {
            _entries.Add(aggregate);
            return this;
        }
    }

    void IMultiAggregateSourceFile.RegisterDependencies(IMultiAggregateSourceFileManager ctx) {
        // 特になし
    }

    void IMultiAggregateSourceFile.Render(CodeRenderingContext ctx) {
        ctx.ReactProject(autoGenerated => {
            autoGenerated.Directory("util", dir => {
                dir.Generate(RenderTypeScript(ctx));
            });
        });
    }

    private SourceFile RenderTypeScript(CodeRenderingContext ctx) {
        var entriesOrderByDataFlow = _entries
            .OrderBy(agg => agg.GetRoot().GetIndexOfDataFlow())
            .Select(aggregate => (ITypeScriptModule)new StructureMetadata(aggregate, isEntry: true));

        return new SourceFile {
            FileName = "metadata-for-page.ts",
            Contents = $$"""

                import { {{CommandQueryMappings.QUERY_MODEL_TYPE}}, {{CommandQueryMappings.REFERED_QUERY_MODEL_TYPE}} } from ".."
                import * as EnumDefs from "../enum-defs"

                /** 画面の自動生成のためのメタデータ */
                export namespace MetadataForPage {
                  {{WithIndent(StructureMetadata.RenderType(), "  ")}}

                  {{WithIndent(ValueMetadata.RenderType(ctx), "  ")}}

                  {{WithIndent(RefMetadata.RenderType(), "  ")}}

                  /** 画面の自動生成のためのメタデータ取得関数 */
                  export const getAll = (): { [k in {{CommandQueryMappings.QUERY_MODEL_TYPE}}]: {{StructureMetadata.TYPE_NAME}} } => ({
                {{entriesOrderByDataFlow.SelectTextTemplate(entry => $$"""
                    {{WithIndent(entry.Render(ctx), "    ")}}
                """)}}
                  })
                }
                """,
        };
    }

    /// <summary>
    /// 構造体のメタデータ
    /// </summary>
    internal class StructureMetadata : ITypeScriptModule {
        internal StructureMetadata(AggregateBase aggregate, bool isEntry) {
            _aggregate = aggregate;
            _isEntry = isEntry;
        }
        private readonly AggregateBase _aggregate;
        private readonly bool _isEntry;

        string ITypeScriptModule.Render(CodeRenderingContext ctx) {
            var type = _aggregate switch {
                RootAggregate => "RootAggregate",
                ChildAggregate => "ChildAggregate",
                ChildrenAggregate => "ChildrenAggregate",
                _ => throw new NotImplementedException(),
            };

            static ITypeScriptModule GetImpl(IAggregateMember member) {
                return member switch {
                    ValueMember vm => new ValueMetadata(vm),
                    RefToMember rm => new RefMetadata(rm),
                    ChildAggregate child => new StructureMetadata(child, isEntry: false),
                    ChildrenAggregate children => new StructureMetadata(children, isEntry: false),
                    _ => throw new NotImplementedException(),
                };
            }

            var body = $$"""
                {
                  displayName: '{{_aggregate.DisplayName.Replace("'", "\\'")}}',
                  type: '{{type}}',
                {{If(_aggregate is RootAggregate root && root.IsReadOnly, () => $$"""
                  isReadOnly: true,
                """)}}
                  members: {
                {{_aggregate.GetMembers().SelectTextTemplate(m => $$"""
                    {{WithIndent(GetImpl(m).Render(ctx), "    ")}},
                """)}}
                  },
                }
                """;

            if (_isEntry) {
                return $$"""
                    '{{_aggregate.PhysicalName}}': {{body}},
                    """;
            } else {
                return $$"""
                    '{{_aggregate.PhysicalName}}': {{body}}
                    """;
            }
        }

        internal const string TYPE_NAME = "StructureMetadata";
        internal const string TYPE_MEMBER = "StructureMetadataMember";

        internal static string RenderType() {
            return $$"""
                /** 構造体のメタデータ */
                export type {{TYPE_NAME}} = {
                  /** 表示用名称 */
                  displayName: string
                  /** 集約の種類 */
                  type: 'RootAggregate' | 'ChildAggregate' | 'ChildrenAggregate'
                  /** この構造体のメンバー */
                  members: { [key: string]: {{TYPE_MEMBER}} }
                  /** 読み取り専用の集約か否か。ルート集約でのみ定義される。 */
                  isReadOnly?: boolean
                  isKey?: never
                }

                /** 構造体のメタデータのメンバー */
                export type {{TYPE_MEMBER}} = {{TYPE_NAME}} | {{ValueMetadata.TYPE_NAME}} | {{RefMetadata.TYPE_NAME}}
                """;
        }
    }
    /// <summary>
    /// 値のメタデータ
    /// </summary>
    internal class ValueMetadata : ITypeScriptModule {
        internal ValueMetadata(ValueMember vm) {
            _vm = vm;
        }
        private readonly ValueMember _vm;

        string ITypeScriptModule.Render(CodeRenderingContext ctx) {

            // 型は enum, value-object の場合はそれぞれ別の名前のプロパティで定義
            var typeProp = _vm.Type switch {
                StaticEnumMember => "enumType",
                ValueObjectMember => "valueObjectType",
                _ => "type",
            };

            return $$"""
                '{{_vm.PhysicalName}}': {
                  displayName: '{{_vm.DisplayName.Replace("'", "\\'")}}',
                  {{typeProp}}: '{{_vm.Type.SchemaTypeName}}',
                {{If(_vm.IsKey, () => $$"""
                  isKey: true,
                """)}}
                {{If(_vm.IsRequired, () => $$"""
                  required: true,
                """)}}
                {{If(_vm.CharacterType != null, () => $$"""
                  characterType: '{{_vm.CharacterType}}',
                """)}}
                {{If(_vm.MaxLength != null, () => $$"""
                  maxLength: {{_vm.MaxLength}},
                """)}}
                {{If(_vm.TotalDigit != null, () => $$"""
                  totalDigit: {{_vm.TotalDigit}},
                """)}}
                {{If(_vm.DecimalPlace != null, () => $$"""
                  decimalPlace: {{_vm.DecimalPlace}},
                """)}}
                }
                """;
        }

        internal const string TYPE_NAME = "ValueMetadata";

        internal static string RenderType(CodeRenderingContext ctx) {
            var characterTypes = ctx.GetCharacterTypes().ToArray();
            var charTypeLiteral = characterTypes.Length == 0
                ? "never"
                : characterTypes.Select(type => $"'{type.Replace("'", "\\'")}'").Join(" | ");

            var valueObjectTypes = ctx.SchemaParser.GetValueObjectMembers().Values.ToArray();
            var valueObjectLiteral = valueObjectTypes.Length == 0
                ? "never"
                : valueObjectTypes.Select(type => $"'{type.TypePhysicalName}'").Join(" | ");

            return $$"""
                /** 値のメタデータ */
                export type {{TYPE_NAME}} = {
                  /** 表示用名称 */
                  displayName: string
                  /** 値の型名。enum, value-ojbect の場合は undefined になる */
                  type?: {{ctx.SchemaParser.ValueMemberTypes.Select(t => $"'{t.SchemaTypeName}'").Join(" | ")}}
                  /** 列挙体の型名。このメンバーが列挙体の場合のみ */
                  enumType?: keyof EnumDefs.{{EnumFile.TS_TYPE_MAP}}
                  /** 値オブジェクトの型名。このメンバーが値オブジェクトの場合のみ */
                  valueObjectType?: {{valueObjectLiteral}}
                  /** キーか否か */
                  isKey?: boolean
                  /** 必須か否か */
                  required?: boolean
                  /** 最大長。文字列型の項目にのみ有効。バイト数でなく文字数でカウントする */
                  maxLength?: number
                  /** この値がとることのできる文字種。文字列型の項目にのみ有効。未指定の場合は制約なし */
                  characterType?: {{charTypeLiteral}}
                  /** 整数部と小数部をあわせた桁数。数値型の項目にのみ有効。 */
                  totalDigit?: number
                  /** 小数部桁数。数値型の項目にのみ有効。 */
                  decimalPlace?: number
                }
                """;
        }
    }
    /// <summary>
    /// 外部参照のメタデータ
    /// </summary>
    internal class RefMetadata : ITypeScriptModule {
        internal RefMetadata(RefToMember refTo) {
            _refTo = refTo;
        }
        private readonly RefToMember _refTo;

        string ITypeScriptModule.Render(CodeRenderingContext ctx) {

            return $$"""
                '{{_refTo.PhysicalName}}': {
                  displayName: '{{_refTo.DisplayName.Replace("\'", "\\\'")}}',
                  type: 'ref-to',
                  refTo: '{{_refTo.RefTo.RefEntryName}}',
                {{If(_refTo.IsKey, () => $$"""
                  isKey: true,
                """)}}
                {{If(_refTo.IsRequired, () => $$"""
                  required: true,
                """)}}
                }
                """;
        }

        internal const string TYPE_NAME = "RefMetadata";

        internal static string RenderType() {
            return $$"""
                /** 外部参照のメタデータ */
                export type {{TYPE_NAME}} = {
                  /** 表示用名称 */
                  displayName: string
                  /** 型 */
                  type: 'ref-to'
                  /** 参照先。参照先が子孫集約の場合はルート集約からのパスのスラッシュ区切り */
                  refTo: {{CommandQueryMappings.REFERED_QUERY_MODEL_TYPE}}
                  /** キーか否か */
                  isKey?: boolean
                  /** 必須か否か */
                  required?: boolean
                }
                """;
        }
    }


    /// <summary>
    /// TypeScriptの構造体
    /// </summary>
    internal interface ITypeScriptModule {
        string Render(CodeRenderingContext ctx);
    }
}
