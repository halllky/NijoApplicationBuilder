using Nijo.CodeGenerating;
using Nijo.ImmutableSchema;
using Nijo.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Nijo.Parts.CSharp {
    /// <summary>
    /// C#側の既定のJSONシリアライズ設定に関する各種処理
    /// </summary>
    public class JsonUtil : IMultiAggregateSourceFile {

        private readonly Lock _lock = new();

        /// <summary>
        /// 値オブジェクトの変換処理の登録
        /// </summary>
        internal JsonUtil AddValueObject(RootAggregate rootAggregate) {
            lock (_lock) {
                _valueObjectRootAggregates.Add(rootAggregate);
                return this;
            }
        }
        private readonly List<RootAggregate> _valueObjectRootAggregates = [];

        /// <summary>
        /// JSONシリアライズクラスの登録
        /// </summary>
        /// <param name="newStatement">「new クラス名()」の文字列</param>
        public JsonUtil AddConverterClass(string newStatement) {
            lock (_lock) {
                _converterClasses.Add(newStatement);
                return this;
            }
        }
        private readonly List<string> _converterClasses = [];

        void IMultiAggregateSourceFile.RegisterDependencies(IMultiAggregateSourceFileManager ctx) {
            // 特になし
        }

        void IMultiAggregateSourceFile.Render(CodeRenderingContext ctx) {
            ctx.CoreLibrary(dir => {
                dir.Directory("Util", utilDir => {
                    utilDir.Generate(Render(ctx));
                });
            });
        }

        internal SourceFile Render(CodeRenderingContext ctx) {
            return new SourceFile {
                FileName = "JsonUtil.cs",
                Contents = $$"""
                    using System.Text.Json;
                    using System.Text.Json.Nodes;
                    using System.Text.Json.Serialization;

                    namespace {{ctx.Config.RootNamespace}};

                    /// <summary>
                    /// JSONシリアライズ設定に関する各種処理
                    /// </summary>
                    partial class {{ApplicationConfigure.ABSTRACT_CLASS_CORE}} {


                        /// <summary>
                        /// 自動生成された型のJSONシリアライズコンバーターを返します。
                        /// </summary>
                        protected IEnumerable<JsonConverter> GetAutoGeneratedConverters() {
                            // ValueObjectのJSONシリアライズ登録
                    {{_valueObjectRootAggregates.OrderBy(agg => agg.PhysicalName).SelectTextTemplate(agg => $$"""
                            yield return new {{agg.PhysicalName}}.{{ValueObjectModel.JSON_CONVERTER_NAME}}();
                    """)}}

                            // 追加のJSONシリアライズクラスの登録
                    {{_converterClasses.OrderBy(stmt => stmt).SelectTextTemplate(stmt => $$"""
                            yield return {{stmt}};
                    """)}}
                        }

                        /// <summary>
                        /// 既定のJSONシリアライズ設定を返します。
                        /// </summary>
                        public virtual JsonSerializerOptions EditDefaultJsonSerializerOptions(JsonSerializerOptions option) {
                            foreach (var converter in GetAutoGeneratedConverters()) {
                                option.Converters.Add(converter);
                            }
                            return option;
                        }

                        /// <summary>
                        /// 既定のJSONシリアライズ設定で第一引数のインスタンスをJSON文字列に変換します。
                        /// </summary>
                        public virtual string ToJson<T>(T obj, bool writeIndented = false) {
                            var options = new JsonSerializerOptions();
                            EditDefaultJsonSerializerOptions(options);
                            options.WriteIndented = writeIndented;
                            return JsonSerializer.Serialize(obj, options);
                        }
                    }
                    """,
            };
        }
    }
}
