using Nijo.CodeGenerating;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Nijo.Parts.CSharp {
    public class ApplicationService : IMultiAggregateSourceFile {
        public const string ABSTRACT_CLASS = "AutoGeneratedApplicationService";

        public const string CURRENT_TIME = "CurrentTime";
        public const string CURRENT_USER = "CurrentUser";

        private readonly Lock _lock = new();
        private readonly List<string> _sourceCode = [];

        public ApplicationService Add(string sourceCode) {
            lock (_lock) {
                _sourceCode.Add(sourceCode);
                return this;
            }
        }

        public void RegisterDependencies(IMultiAggregateSourceFileManager ctx) {
            // 特になし
        }

        public void Render(CodeRenderingContext ctx) {
            ctx.CoreLibrary(dir => {
                dir.Generate(RenderDeclaring(ctx));
            });
        }

        private SourceFile RenderDeclaring(CodeRenderingContext ctx) {
            return new SourceFile {
                FileName = "ApplicationService.cs",
                Contents = $$"""
                    using Microsoft.Extensions.DependencyInjection;
                    using NLog;

                    namespace {{ctx.Config.RootNamespace}};

                    /// <summary>
                    /// アプリケーションのための各種機能を提供する。
                    /// </summary>
                    public abstract partial class {{ABSTRACT_CLASS}} {
                        protected {{ABSTRACT_CLASS}}(IServiceProvider serviceProvider) {
                            ServiceProvider = serviceProvider;
                        }

                        public IServiceProvider ServiceProvider { get; }

                        private {{ctx.Config.DbContextName}}? _dbContext;
                        public {{ctx.Config.DbContextName}} DbContext => _dbContext ??= ServiceProvider.GetRequiredService<{{ctx.Config.DbContextName}}>();

                        /// <summary>
                        /// ログ出力はこのプロパティを通して行われる想定
                        /// </summary>
                        public Logger Log => _logger ??= ServiceProvider.GetRequiredService<Logger>();
                        private Logger? _logger;

                        /// <summary>
                        /// <para>
                        /// 現在時刻。データ更新時の更新時刻の記録などに使用。
                        /// <see cref="DateTime.Now"/> を使ってしまうと現在時刻に依存する処理のテストが困難になるので、基本的にはこのプロパティを使うこと。
                        /// </para>
                        /// <para>
                        /// 同一のリクエストの中では、たとえ実時刻に多少のずれがあったとしてもすべて同じ時刻（リクエスト開始時点の時刻）になる。
                        /// 理由は、例えば深夜0時前後の処理で処置の途中で日付が変わることでロジックに影響が出る、などといった事象を防ぐため。
                        /// </para>
                        /// <para>
                        /// ちなみにログ出力の時刻にはこのプロパティが用いられず、正確な現在時刻が出力される。
                        /// </para>
                        /// </summary>
                        public virtual DateTime {{CURRENT_TIME}} => _currentTime ??= DateTime.Now;
                        private DateTime? _currentTime;

                        /// <summary>
                        /// 現在操作中のユーザーの名前。データ更新時の更新者の記録などに使用。
                        /// </summary>
                        public virtual string {{CURRENT_USER}} => "UNDEFINED";

                        /// <summary>
                        /// 現在のセッションの識別子。ログ出力に使用。
                        /// </summary>
                        public virtual string? LogSessionKey => null;
                    {{_sourceCode.SelectTextTemplate(source => $$"""

                        {{WithIndent(source, "    ")}}
                    """)}}
                    }
                    """,
            };
        }
    }
}
