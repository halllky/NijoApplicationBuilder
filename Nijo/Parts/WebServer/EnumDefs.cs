using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Nijo.Util.CodeGenerating;
using Nijo.Util.DotnetEx;

namespace Nijo.Parts.WebServer {
    internal class EnumDefs : ISummarizedFile {

        private readonly List<string> _sourceCodes = new();

        internal void Add(string sourceCode) {
            _sourceCodes.Add(sourceCode);
        }

        /// <summary>
        /// ほかの <see cref="ISummarizedFile"/> の中で列挙体が生成されることがあるので
        /// </summary>
        int ISummarizedFile.RenderingOrder => 999;

        void ISummarizedFile.OnEndGenerating(CodeRenderingContext context) {

            context.CoreLibrary.AutoGeneratedDir(dir => {
                dir.Generate(new SourceFile {
                    FileName = "Enum.cs",
                    RenderContent = context => $$"""
                        namespace {{context.Config.RootNamespace}} {
                            using System.ComponentModel.DataAnnotations;

                        {{context.Schema.EnumDefinitions.SelectTextTemplate(def => $$"""
                            public enum {{def.Name}} {
                        {{def.Items.SelectTextTemplate(item => $$"""
                        {{If(!string.IsNullOrWhiteSpace(item.DisplayName), () => $$"""
                                [Display(Name = "{{item.DisplayName.Replace("\"", "\\\"")}}")]
                        """)}}
                                {{item.PhysicalName}} = {{item.Value}},
                        """)}}
                            }
                        """)}}
                        {{_sourceCodes.SelectTextTemplate(source => $$"""

                            {{WithIndent(source, "    ")}}
                        """)}}
                        }
                        """,
                });
            });

            context.ReactProject.AutoGeneratedDir(dir => {
                dir.Generate(new SourceFile {
                    FileName = "autogenerated-enum.ts",
                    RenderContent = ctx => {
                        return $$"""
                            /** 自動生成された列挙体の型 */
                            export namespace EnumTypes {
                            {{context.Schema.EnumDefinitions.SelectTextTemplate(def => $$"""
                              export type {{def.Name}} = {{def.Items.Select(item => $"'{item.DisplayName.Replace("'", "\\'")}'").Join(" | ")}}
                            """)}}
                            }

                            /** 自動生成された列挙体の名前と型のマッピング */
                            export interface EnumTypeMap {
                            {{context.Schema.EnumDefinitions.SelectTextTemplate(def => $$"""
                              '{{def.Name}}': EnumTypes.{{def.Name}}
                            """)}}
                            }

                            /** 自動生成された列挙体の値 */
                            export const EnumValues = {
                            {{context.Schema.EnumDefinitions.SelectTextTemplate(def => $$"""
                              '{{def.Name}}': [
                            {{def.Items.SelectTextTemplate(item => $$"""
                                '{{item.DisplayName.Replace("'", "\\'")}}',
                            """)}}
                              ] satisfies EnumTypes.{{def.Name}}[],
                            """)}}
                            }
                            """;
                    },
                });
            });

        }
    }
}
