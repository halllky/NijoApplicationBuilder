using Nijo.Core;
using Nijo.Util.CodeGenerating;
using Nijo.Util.DotnetEx;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Parts.WebServer {
    public sealed class AggregateFile : ISummarizedFile {
        internal AggregateFile(GraphNode<Aggregate> aggregate) {
            _aggregate = aggregate;
        }
        private readonly GraphNode<Aggregate> _aggregate;

        // AggregateRenderer
        public List<string> ControllerActions { get; } = new();
        public List<string> AppServiceMethods { get; } = new();
        public List<string> DataClassDeclaring { get; } = new();
        public List<string> TypeScriptFile { get; } = new();

        int ISummarizedFile.RenderingOrder => int.MaxValue;

        void ISummarizedFile.OnEndGenerating(CodeRenderingContext context) {
            context.CoreLibrary.AutoGeneratedDir(genDir => {
                genDir.Generate(RenderCoreLibrary());
            });
            context.WebApiProject.AutoGeneratedDir(genDir => {
                genDir.Generate(RenderWebApi());
            });
            context.ReactProject.AutoGeneratedDir(genDir => {
                genDir.Generate(RenderTypeScript());
            });
        }

        private SourceFile RenderWebApi() {
            return new SourceFile {
                FileName = $"{_aggregate.Item.PhysicalName.ToFileNameSafe()}.cs",
                RenderContent = context => {
                    var appSrv = new ApplicationService();
                    var controller = new Controller(_aggregate.Item);

                    return $$"""
                        namespace {{context.Config.RootNamespace}} {
                            using System;
                            using System.Collections;
                            using System.Collections.Generic;
                            using System.ComponentModel;
                            using System.ComponentModel.DataAnnotations;
                            using System.Linq;
                            using Microsoft.AspNetCore.Mvc;
                            using Microsoft.EntityFrameworkCore;
                            using Microsoft.EntityFrameworkCore.Infrastructure;
                            using {{context.Config.EntityNamespace}};

                            /// <summary>
                            /// {{_aggregate.Item.DisplayName}}に関する Web API 操作を提供する ASP.NET Core のコントローラー
                            /// </summary>
                            [ApiController]
                            [Route("{{Controller.SUBDOMAIN}}/[controller]")]
                            public partial class {{controller.ClassName}} : ControllerBase {
                                public {{controller.ClassName}}({{appSrv.ConcreteClassName}} applicationService) {
                                    _applicationService = applicationService;
                                }
                                protected readonly {{appSrv.ConcreteClassName}} _applicationService;
                        
                                {{WithIndent(ControllerActions, "        ")}}
                            }
                        }
                        """;
                },
            };
        }

        private SourceFile RenderCoreLibrary() {
            var appSrv = new ApplicationService();

            return new SourceFile {
                FileName = $"{_aggregate.Item.PhysicalName.ToFileNameSafe()}.cs",
                RenderContent = context => $$"""
                    namespace {{context.Config.RootNamespace}} {
                        using System;
                        using System.Collections;
                        using System.Collections.Generic;
                        using System.ComponentModel;
                        using System.ComponentModel.DataAnnotations;
                        using System.Linq;
                        using System.Text.Json.Nodes;
                        using System.Text.Json.Serialization;
                        using Microsoft.EntityFrameworkCore;
                        using Microsoft.EntityFrameworkCore.Infrastructure;
                        using {{context.Config.EntityNamespace}};

                        partial class {{appSrv.AbstractClassName}} {
                            {{WithIndent(AppServiceMethods, "        ")}}
                        }


                    #region データ構造クラス
                    {{DataClassDeclaring.SelectTextTemplate(source => $$"""
                        {{WithIndent(source, "    ")}}

                    """)}}
                    #endregion データ構造クラス
                    }
                    """,
            };
        }

        /// <summary>
        /// GitHubの課題 #78 の文脈でTypeScript側のソースは全面改修されるが、
        /// 入力コンポーネントや各種ユーティリティは生成範囲外になるため、
        /// その改修後のソースのうち自動生成される部分はほぼ全てがこのメソッドで生成されるものになる。
        /// </summary>
        /// <returns></returns>
        private SourceFile RenderTypeScript() {
            return new SourceFile {
                FileName = $"{_aggregate.Item.PhysicalName.ToFileNameSafe()}.tsx",
                RenderContent = ctx => {

                    // 1つ隣のref-toはimportする必要がある
                    var refTos = _aggregate
                        .EnumerateThisAndDescendants()
                        .SelectMany(agg => agg.GetMembers())
                        .OfType<AggregateMember.Ref>()
                        .Select(@ref => new {
                            FileName = $"./{@ref.RefTo.GetRoot().Item.PhysicalName}",
                            RefKey = new Models.WriteModel2Features.DataClassForRefTargetKeys(@ref.RefTo, @ref.RefTo),
                            RefTo = new Models.RefTo.RefDisplayData(@ref.RefTo, @ref.RefTo),
                            RefSC = new Models.RefTo.RefSearchCondition(@ref.RefTo, @ref.RefTo),
                        });

                    return $$"""
                        import React from "react"
                        import * as ReactRouter from "react-router-dom"
                        import { UUID } from "uuidjs"
                        import * as Util from "../util2"
                        import * as Constraints from "./util/constraints"
                        {{refTos.SelectTextTemplate(r => $$"""
                        import { {{r.RefKey.TsTypeName}}, {{r.RefTo.TsTypeName}}, {{r.RefTo.TsNewObjectFunction}}, {{r.RefSC.TsFilterTypeName}} } from "{{r.FileName}}"
                        """)}}

                        {{TypeScriptFile.SelectTextTemplate(source => $$"""
                        {{source}}

                        """)}}
                        """

                        // #78 import先を切り替わるのが大変なので暫定措置。
                        .Replace("Types.", "");
                },
            };
        }
    }
}
