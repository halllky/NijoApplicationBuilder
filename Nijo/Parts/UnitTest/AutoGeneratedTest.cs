using Nijo.CodeGenerating;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Parts.UnitTest;

internal class AutoGeneratedTest {

    /// <summary>
    /// データベースの更新を伴うため並列実行できないテスト
    /// </summary>
    internal const string DB_TEST_WITH_UPDATE = "DB接続あり_更新あり";
    /// <summary>
    /// データベースなどの入出力を伴うが、参照のみ。
    /// 更新ありのテストの前か後かは問わないが、並列で実行することが可能。
    /// </summary>
    internal const string DB_TEST_ONLY_READ = "DB接続あり_更新なし";

    internal static SourceFile Render(CodeRenderingContext ctx) {
        return new SourceFile {
            FileName = "AutoGeneratedTest.cs",
            Contents = $$"""
                using NUnit;
                using NUnit.Framework;

                namespace {{ctx.Config.RootNamespace}};

                /// <summary>
                /// データベースの更新を伴うため並列実行できないテスト。
                /// 具体的なテスト内容は別ファイルで記載
                /// </summary>
                [Category("DB接続あり（更新あり）")]
                [NonParallelizable]
                public partial class {{DB_TEST_WITH_UPDATE}} {
                }

                /// <summary>
                /// データベースなどの入出力を伴うが、参照のみ。
                /// 更新ありのテストの前か後かは問わないが、並列で実行することが可能。
                /// </summary>
                [Category("DB接続あり（参照のみ）")]
                public partial class {{DB_TEST_ONLY_READ}} {

                    /// <summary>
                    /// このクラスに含まれるテストの前に1回だけ実行される。
                    /// 標準のダミーデータ作成処理を用いて全テーブルにダミーデータを投入する。
                    /// </summary>
                    [OneTimeSetUp]
                    public void OneTimeSetUp() {
                    }

                    /// <summary>
                    /// このクラスに含まれるテストの後に1回だけ実行される。
                    /// ダミーデータを削除する。
                    /// </summary>
                    [OneTimeTearDown]
                    public void OneTimeTearDown() {
                    }
                }
                """,
        };
    }
}
