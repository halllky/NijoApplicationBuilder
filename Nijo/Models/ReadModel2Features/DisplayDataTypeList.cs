using Nijo.Util.CodeGenerating;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Models.ReadModel2Features {
    /// <summary>
    /// カスタマイズで使うためのReadModelの名前の一覧
    /// </summary>
    internal class DisplayDataTypeList : ISummarizedFile {

        internal void Add(DataClassForDisplay displayData) {
            _displayDataList.Add(displayData);
        }
        private readonly List<DataClassForDisplay> _displayDataList = new();

        public void OnEndGenerating(CodeRenderingContext context) {
            context.ReactProject.AutoGeneratedDir(dir => {
                dir.Generate(Render());
            });
        }

        private SourceFile Render() {
            return new SourceFile {
                FileName = "read-model-list.ts",
                RenderContent = context => {
                    return $$"""
                        {{_displayDataList.SelectTextTemplate(disp => $$"""
                        import * as {{disp.Aggregate.Item.PhysicalName}} from "./{{disp.Aggregate.Item.PhysicalName}}"
                        """)}}

                        /** 自動生成されたReadModelの種類の一覧 */
                        export type ReadModelType
                        {{If(_displayDataList.Count == 0, () => $$"""
                          = never
                        """)}}
                        {{_displayDataList.SelectTextTemplate((disp, i) => $$"""
                          {{(i == 0 ? "=" : "|")}} '{{disp.TsTypeName}}'
                        """)}}
                        {{If(context.Config.CustomizeAllUi, () => $$"""

                        /** UI制約型一覧 */
                        export const ReadModelConstraints = {
                        {{_displayDataList.SelectTextTemplate(disp => $$"""
                          '{{disp.TsTypeName}}': {{disp.Aggregate.Item.PhysicalName}}.{{disp.UiConstraingValueName}},
                        """)}}
                        }
                        """)}}
                        """;
                },
            };
        }
    }
}
