using Nijo.CodeGenerating;
using Nijo.CodeGenerating.Helpers;
using Nijo.ImmutableSchema;
using Nijo.Parts.Common;
using Nijo.Parts.CSharp;
using Nijo.Util.DotnetEx;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;

namespace Nijo.Models.QueryModelModules {
    /// <summary>
    /// 検索処理
    /// </summary>
    internal class SearchProcessing {

        internal SearchProcessing(RootAggregate rootAggregate) {
            _rootAggregate = rootAggregate;
        }
        private readonly RootAggregate _rootAggregate;

        internal string ReactHookName => $"use{_rootAggregate.PhysicalName}Loader";
        internal string ReactHookReturnTypeName => $"Use{_rootAggregate.PhysicalName}LoaderReturn";

        private const string CONTROLLER_ACTION_LOAD = "load";
        internal string ActionEndpoint => $"{CONTROLLER_ACTION_LOAD}";

        internal const string VALIDATE_METHOD = "ValidateSearchCondition";
        internal const string LOAD_METHOD = "Load";

        internal const string CREATE_QUERY_SOURCE = "CreateQuerySource";
        internal const string APPEND_WHERE_CLAUSE = "AppendWhereClause";
        internal const string APPEND_ORDERBY_CLAUSE = "AppendOrderByClause";
        private const string ON_AFTER_LOADED = "OnAfterLoaded";
        private string ToDisplayData => $"To{_rootAggregate.PhysicalName}DisplayData";
        private const string SET_KEYS_READONLY = "SetKeysReadOnly";


        #region TypeScript用
        internal static string RenderTsTypeMap(IEnumerable<RootAggregate> queryModels) {

            var items = queryModels.Select(rootAggregate => {
                var controller = new AspNetController(rootAggregate);
                var searchCondition = new SearchCondition.Entry(rootAggregate);
                var displayData = new DisplayData(rootAggregate);

                return new {
                    EscapedPhysicalName = rootAggregate.PhysicalName.Replace("'", "\\'"),
                    Endpoint = controller.GetActionNameForClient(CONTROLLER_ACTION_LOAD),
                    ParamType = searchCondition.TsTypeName,
                    ReturnType = $"Util.{SearchProcessingReturn.TYPE_TS}<{displayData.TsTypeName}>",
                };
            }).ToArray();

            return $$"""
                /** 一覧検索処理 */
                export namespace LoadFeature {
                  /** 一覧検索処理のURLエンドポイントの一覧 */
                  export const Endpoint: { [key in {{CommandQueryMappings.QUERY_MODEL_TYPE}}]: string } = {
                {{items.SelectTextTemplate(x => $$"""
                    '{{x.EscapedPhysicalName}}': '{{x.Endpoint}}',
                """)}}
                  }

                  /** 一覧検索処理のパラメータ型の一覧 */
                  export interface ParamType {
                {{items.SelectTextTemplate(x => $$"""
                    '{{x.EscapedPhysicalName}}': {{x.ParamType}}
                """)}}
                  }

                  /** 一覧検索処理の処理結果の型の一覧 */
                  export interface ReturnType {
                {{items.SelectTextTemplate(x => $$"""
                    '{{x.EscapedPhysicalName}}': {{x.ReturnType}}
                """)}}
                  }
                }
                """;
        }
        #endregion TypeScript用

        internal string RenderAspNetCoreControllerAction(CodeRenderingContext ctx) {
            var searchCondition = new SearchCondition.Entry(_rootAggregate);
            var searchConditionMessages = new SearchConditionMessageContainer(_rootAggregate);

            return $$"""
                /// <summary>
                /// {{_rootAggregate.DisplayName}}の一覧検索処理のエンドポイント
                /// </summary>
                [HttpPost("{{CONTROLLER_ACTION_LOAD}}"), {{AspNetController.AUTOGENERATED_ENDPOINT}}({{CommandQueryMappings.E_COMMAND_QUERY_TYPE}}.{{_rootAggregate.PhysicalName}}, {{E_AutoGeneratedActionType.ENUM_NAME}}.{{E_AutoGeneratedActionType.READ}})]
                public IActionResult Load(
                    [ModelBinder(BinderType = typeof({{AspNetController.COMPLEX_REQUEST_BODY_BINDER}}<{{searchCondition.CsClassName}}>))] {{searchCondition.CsClassName}} {{AspNetController.DATA}},
                    [ModelBinder(BinderType = typeof({{AspNetController.PRESENTATION_CONTEXT_BINDER}}<{{searchConditionMessages.CsClassName}}>))] {{PresentationContext.INTERFACE}}<{{searchConditionMessages.CsClassName}}> {{AspNetController.CONTEXT}}) {
                    // エラーチェック
                    _applicationService.{{VALIDATE_METHOD}}(data, context);
                    if (context.Messages.HasError() || (!context.Options.IgnoreConfirm && context.HasConfirm())) {
                        return _webConfigure.{{AspNetController.TO_ACTION_RESULT}}(null, context);
                    }

                    // 検索処理実行
                    var returnValue = _applicationService.{{LOAD_METHOD}}(data, context);
                    return _webConfigure.{{AspNetController.TO_ACTION_RESULT}}(returnValue, context);
                }
                """;
        }

        internal string RenderAppSrvMethods(CodeRenderingContext ctx) {
            var searchCondition = new SearchCondition.Entry(_rootAggregate);
            var searchConditionMessage = new SearchConditionMessageContainer(_rootAggregate);
            var searchResult = new SearchResult(_rootAggregate);
            var displayData = new DisplayData(_rootAggregate);

            return $$"""
                #region 検索
                /// <summary>
                /// {{_rootAggregate.DisplayName}}の検索条件の内容を検証します。
                /// 不正な場合、検索処理自体の実行が中止されます。
                /// </summary>
                /// <param name="searchCondition">検索条件</param>
                /// <param name="context">エラーがある場合はこのオブジェクトの中にエラー内容を追記してください。</param>
                public virtual void {{VALIDATE_METHOD}}({{searchCondition.CsClassName}} searchCondition, {{PresentationContext.INTERFACE}}<{{searchConditionMessage.CsClassName}}> context) {
                    // エラーチェックがある場合はこのメソッドをオーバーライドして記述してください。
                }

                /// <summary>
                /// {{_rootAggregate.DisplayName}}の一覧検索を行ないます。
                /// </summary>
                public {{SearchProcessingReturn.TYPE_CS}}<{{displayData.CsClassName}}> {{LOAD_METHOD}}({{searchCondition.CsClassName}} searchCondition, {{PresentationContext.INTERFACE}}<{{searchConditionMessage.CsClassName}}> context) {
                    // FROM句, SELECT句
                    var querySource = {{CREATE_QUERY_SOURCE}}(searchCondition, context);

                    // 絞り込み(WHERE句)
                    var filtered = {{APPEND_WHERE_CLAUSE}}(querySource, searchCondition);

                    // 並び替え(ORDER BY 句)
                    var sorted = {{APPEND_ORDERBY_CLAUSE}}(filtered, searchCondition);

                    // ページング(SKIP, TAKE)
                    var query = sorted;
                    if (searchCondition.{{SearchCondition.Entry.SKIP_CS}} != null) {
                        query = query.Skip(searchCondition.{{SearchCondition.Entry.SKIP_CS}}.Value);
                    }
                    if (searchCondition.{{SearchCondition.Entry.TAKE_CS}} != null) {
                        query = query.Take(searchCondition.{{SearchCondition.Entry.TAKE_CS}}.Value);
                    }

                    // 画面表示用の型への変換
                    var converted = query.Select({{ToDisplayData}}());

                    // 検索処理実行
                    {{displayData.CsClassName}}[] loaded;
                    int totalCount;
                    try {
                        // 件数取得を先に直列で実行
                        totalCount = filtered.Count();
                        // データ取得も直列で実行
                        loaded = converted.ToArray();
                    } catch {
                        Log.Debug("{{_rootAggregate.DisplayName.Replace("\"", "\\\"")}} エラー発生時検索条件: {0}", searchCondition.ToJson());
                        try {
                            Log.Debug("{{_rootAggregate.DisplayName.Replace("\"", "\\\"")}} エラー発生時SQL: {0}", query.ToQueryString());
                        } catch {
                            Log.Debug("{{_rootAggregate.DisplayName.Replace("\"", "\\\"")}} 不具合調査用のSQL変換に失敗しました。");
                        }
                        throw;
                    }

                    // 読み取り専用項目の設定や、C#上での追加情報の付加など、任意のカスタマイズ処理
                    var currentPageItems = {{ON_AFTER_LOADED}}(loaded, searchCondition, context).ToArray();

                    // 主キー項目を読み取り専用にする。UI上で主キーが変更されるとあらゆる処理がうまくいかなくなる
                    foreach (var displayData in currentPageItems) {
                        {{SET_KEYS_READONLY}}(displayData);
                    }

                    return new() {
                        {{SearchProcessingReturn.CURRENT_PAGE_ITEMS_CS}} = currentPageItems,
                        {{SearchProcessingReturn.TOTAL_COUNT_CS}} = totalCount,
                    };
                }
                /// <summary>
                /// {{_rootAggregate.DisplayName}}のデータベースへの問い合わせデータ構造（SQLで言うSELECT句とFROM句）を定義する
                /// </summary>
                {{If(_rootAggregate.Model is DataModel, () => $$"""
                {{RenderDataModelQuerySource(ctx)}}
                """).ElseIf(ctx.RenderingOptions.AllowNotImplemented, () => $$"""
                protected virtual IQueryable<{{searchResult.CsClassName}}> {{CREATE_QUERY_SOURCE}}({{searchCondition.CsClassName}} searchCondition, {{PresentationContext.INTERFACE}}<{{searchConditionMessage.CsClassName}}> context) {
                    throw new NotImplementedException("クエリ構造が定義されていません。このメソッドをオーバライドし、{{_rootAggregate.DisplayName.Replace("\"", "\\\"")}}の各項目がどのテーブルから取得されるかを定義してください。");
                }
                """).Else(() => $$"""
                protected abstract IQueryable<{{searchResult.CsClassName}}> {{CREATE_QUERY_SOURCE}}({{searchCondition.CsClassName}} searchCondition, {{PresentationContext.INTERFACE}}<{{searchConditionMessage.CsClassName}}> context);
                """)}}
                {{RenderAppendWhereClause(ctx)}}
                {{RenderAppendOrderByClause()}}
                {{RenderToDisplayData()}}
                /// <summary>
                /// {{_rootAggregate.DisplayName}}の一覧検索の読み込み後処理
                /// </summary>
                protected virtual IEnumerable<{{displayData.CsClassName}}> {{ON_AFTER_LOADED}}(IEnumerable<{{displayData.CsClassName}}> currentPageItems, {{searchCondition.CsClassName}} searchCondition, {{PresentationContext.INTERFACE}}<{{searchConditionMessage.CsClassName}}> context) {
                    // 読み込み後処理がある場合はここで実装してください。
                    return currentPageItems;
                }
                /// <summary>
                /// {{_rootAggregate.DisplayName}}の画面表示データの主キー項目を読み取り専用にする
                /// </summary>
                protected virtual void {{SET_KEYS_READONLY}}({{displayData.CsClassName}} displayData) {
                    // TODO ver.1
                }
                #endregion 検索
                """;
        }

        /// <summary>
        /// クエリ構造の定義。DataModelとQueryModelの型が完全に一致する場合のみ自動生成できる。
        /// </summary>
        private string RenderDataModelQuerySource(CodeRenderingContext ctx) {
            // 引数
            var searchCondition = new SearchCondition.Entry(_rootAggregate);
            var searchConditionMessage = new SearchConditionMessageContainer(_rootAggregate);

            // 左辺（変換先）
            var searchResult = new SearchResult(_rootAggregate);
            var newObject = new Variable("※ここの名前は使われないので適当※", searchResult);

            // 右辺（変換元）
            var efCoreEntity = new DataModelModules.EFCoreEntity(_rootAggregate);
            var e = new Variable("e", efCoreEntity);

            var rightMembers = new Dictionary<SchemaNodeIdentity, IInstanceProperty>();
            foreach (var prop in e.Create1To1PropertiesRecursively()) {
                rightMembers[prop.Metadata.SchemaPathNode.ToMappingKey()] = prop;
            }

            return $$"""
                protected virtual IQueryable<{{searchResult.CsClassName}}> {{CREATE_QUERY_SOURCE}}({{searchCondition.CsClassName}} searchCondition, {{PresentationContext.INTERFACE}}<{{searchConditionMessage.CsClassName}}> context) {
                    return this.DbContext.{{efCoreEntity.DbSetName}}.Select({{e.Name}} => new {{searchResult.CsClassName}} {
                        {{WithIndent(RenderMembers(newObject, rightMembers), "        ")}}
                        {{SearchResult.VERSION}} = (int){{e.Name}}.{{DataModelModules.EFCoreEntity.VERSION}}!,
                    });
                }
                """;

            static IEnumerable<string> RenderMembers(IInstancePropertyOwner left, IReadOnlyDictionary<SchemaNodeIdentity, IInstanceProperty> rightMembers) {
                foreach (var prop in left.CreateProperties()) {
                    if (prop is InstanceValueProperty valueProp) {
                        var right = rightMembers[valueProp.Metadata.SchemaPathNode.ToMappingKey()];
                        yield return $$"""
                            {{valueProp.Metadata.GetPropertyName(E_CsTs.CSharp)}} = {{right.GetJoinedPathFromInstance(E_CsTs.CSharp, "!.")}},
                            """;

                    } else if (prop is InstanceStructureProperty structureProp) {
                        if (!structureProp.Metadata.IsArray) {
                            yield return $$"""
                                {{structureProp.Metadata.GetPropertyName(E_CsTs.CSharp)}} = new() {
                                    {{WithIndent(RenderMembers(structureProp, rightMembers), "    ")}}
                                },
                                """;
                        } else {
                            var leftMetadata = (SearchResult.SearchResultChildrenMember)structureProp.Metadata;
                            var rightMetadata = new DataModelModules.EFCoreEntity(leftMetadata.Aggregate);
                            var loopVar = new Variable(((ChildrenAggregate)rightMetadata.Aggregate).GetLoopVarName(), rightMetadata);

                            // 辞書に、ラムダ式内部で右辺に使用できるプロパティを加える
                            var overridedDict = new Dictionary<SchemaNodeIdentity, IInstanceProperty>(rightMembers);
                            foreach (var m in loopVar.Create1To1PropertiesRecursively() ?? []) {
                                overridedDict[m.Metadata.SchemaPathNode.ToMappingKey()] = m;
                            }

                            var arrayPath = rightMembers[leftMetadata.Aggregate.ToMappingKey()];

                            yield return $$"""
                                {{structureProp.Metadata.GetPropertyName(E_CsTs.CSharp)}} = {{arrayPath.GetJoinedPathFromInstance(E_CsTs.CSharp, "!.")}}!.Select({{loopVar.Name}} => new {{leftMetadata.CsClassName}} {
                                    {{WithIndent(RenderMembers(structureProp, overridedDict), "    ")}}
                                }).ToList(),
                                """;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// WHERE句
        /// </summary>
        private string RenderAppendWhereClause(CodeRenderingContext ctx) {
            var searchCondition = new SearchCondition.Entry(_rootAggregate);
            var searchResult = new SearchResult(_rootAggregate);

            var queryVar = new Variable("query", searchResult);
            var scVar = new Variable("searchCondition", searchCondition);

            var queryVarMemberes = queryVar
                .CreatePropertiesRecursively()
                .OfType<InstanceValueProperty>()
                .ToDictionary(p => p.Metadata.SchemaPathNode.ToMappingKey());
            var searchConditionMembers = scVar
                .CreatePropertiesRecursively()
                .OfType<InstanceValueProperty>()
                .Where(prop => prop.Metadata.Type.SearchBehavior != null)
                .ToArray();

            FilterStatementRenderingContext CreateContext(InstanceValueProperty searchConditionProp) {
                var query = queryVarMemberes.GetValueOrDefault(searchConditionProp.Metadata.SchemaPathNode.ToMappingKey())
                    ?? throw new InvalidOperationException($"{searchConditionProp.Metadata.SchemaPathNode.ToMappingKey()}と対応するクエリのメンバーが見つからない");
                return new() {
                    Query = query,
                    SearchCondition = searchConditionProp,
                    CodeRenderingContext = ctx,
                };
            }

            return $$"""
                /// <summary>
                /// {{_rootAggregate.DisplayName}}のクエリに画面で指定された検索条件（SQLで言うWHERE句）を付加する
                /// </summary>
                protected virtual IQueryable<{{searchResult.CsClassName}}> {{APPEND_WHERE_CLAUSE}}(IQueryable<{{searchResult.CsClassName}}> {{queryVar.Name}}, {{searchCondition.CsClassName}} {{scVar.Name}}) {
                {{searchConditionMembers.SelectTextTemplate(prop => $$"""
                    // 絞り込み: {{prop.Metadata.DisplayName}}
                    {{WithIndent(prop.Metadata.Type.SearchBehavior!.RenderFiltering(CreateContext(prop)), "    ")}}

                """)}}
                    return query;
                }
                """;
        }

        /// <summary>
        /// ORDER BY 句
        /// </summary>
        private string RenderAppendOrderByClause() {
            var searchCondition = new SearchCondition.Entry(_rootAggregate);
            var searchResult = new SearchResult(_rootAggregate);

            // 右辺のプロパティを定義（クエリに使用するSearchResultオブジェクト）
            var queryVar = new Variable("e", searchResult);
            var queryVarMembers = queryVar
                .CreatePropertiesRecursively()
                .ToDictionary(p => p.Metadata.SchemaPathNode.ToMappingKey());

            var sortMembers = searchCondition
                .EnumerateSortMembersRecursively()
                .Select(m => {
                    var literal = m.GetLiteral();
                    // マッピングキーを使用して右辺のプロパティを取得
                    var property = queryVarMembers.GetValueOrDefault(m.Member.ToMappingKey());
                    return new {
                        AscLiteral = literal + SearchCondition.ASC_SUFFIX,
                        DescLiteral = literal + SearchCondition.DESC_SUFFIX,
                        Path = property?.GetJoinedPathFromInstance(E_CsTs.CSharp, "!.") ?? throw new InvalidOperationException($"右辺に対応するプロパティが見つかりません: {m.Member.ToMappingKey()}"),
                    };
                })
                .ToArray();

            return $$"""
                /// <summary>
                /// {{_rootAggregate.DisplayName}}のクエリに画面で指定された並び順指定（SQLで言うORDER BY句）を付加する
                /// </summary>
                protected virtual IQueryable<{{searchResult.CsClassName}}> {{APPEND_ORDERBY_CLAUSE}}(IQueryable<{{searchResult.CsClassName}}> query, {{searchCondition.CsClassName}} searchCondition) {
                    IOrderedQueryable<{{searchResult.CsClassName}}>? sorted = null;
                    foreach (var sortOption in searchCondition.{{SearchCondition.Entry.SORT_CS}}) {
                        sorted = sortOption switch {
                {{sortMembers.SelectTextTemplate(m => $$"""
                            "{{m.AscLiteral}}" => sorted == null
                                ? query.OrderBy(e => {{m.Path}})
                                : sorted.ThenBy(e => {{m.Path}}),
                            "{{m.DescLiteral}}" => sorted == null
                                ? query.OrderByDescending(e => {{m.Path}})
                                : sorted.ThenByDescending(e => {{m.Path}}),
                """)}}
                            _ => throw new InvalidOperationException($"ソート条件 '{sortOption}' が不正です。"),
                        };
                    }
                    return sorted ?? query;
                }
                """;
        }

        /// <summary>
        /// ToDisplayData
        /// </summary>
        private string RenderToDisplayData() {
            // 左辺
            var displayData = new DisplayData(_rootAggregate);
            var newObject = new Variable("※ここの名前は使われないので適当※", displayData);

            // 右辺
            var searchResult = new SearchResult(_rootAggregate);
            var right = new Variable("searchResult", searchResult);
            // var rightMembers = right
            //     .Create1To1PropertiesRecursively()
            //     .ToDictionary(x => x.Metadata.SchemaPathNode.ToMappingKey());

            return $$"""
                /// <summary>
                /// {{_rootAggregate.DisplayName}}の検索結果型を画面表示用の型に変換する式を返します。
                /// 検索条件には存在するが画面表示用データには存在しない項目は、この式の結果に含まれません。
                /// </summary>
                protected virtual Expression<Func<{{searchResult.CsClassName}}, {{displayData.CsClassName}}>> {{ToDisplayData}}() {
                    return {{right.Name}} => new {{displayData.CsClassName}}() {
                        {{DisplayData.VALUES_CS}} = new() {
                            {{WithIndent(RenderValueMembers(displayData, right), "            ")}}
                        },
                {{displayData.GetChildMembers().SelectTextTemplate(child => $$"""
                        {{WithIndent(RenderDescendantMember(child, right), "        ")}}
                """)}}
                        {{DisplayData.EXISTS_IN_DB_CS}} = true,
                        {{DisplayData.WILL_BE_CHANGED_CS}} = false,
                        {{DisplayData.WILL_BE_DELETED_CS}} = false,
                        {{DisplayData.VERSION_CS}} = searchResult.{{SearchResult.VERSION}},
                    };
                }
                """;

            static IEnumerable<string> RenderValueMembers(DisplayData left, IInstancePropertyOwner rightInstance) {
                // 右辺
                var rightMembers = rightInstance
                    .CreatePropertiesRecursively()
                    .ToDictionary(x => x.Metadata.SchemaPathNode.ToMappingKey());

                foreach (var member in left.Values.GetMembers()) {
                    if (member is DisplayData.DisplayDataValueMember vm) {
                        var right = rightMembers[vm.Member.ToMappingKey()];

                        yield return $$"""
                            {{member.GetPropertyName(E_CsTs.CSharp)}} = {{vm.Member.Type.RenderCastToDomainType()}}{{right.GetJoinedPathFromInstance(E_CsTs.CSharp, "!.")}},
                            """;

                    } else if (member is DisplayData.DisplayDataRefMember refTo) {
                        yield return $$"""
                            {{member.GetPropertyName(E_CsTs.CSharp)}} = new() {
                                {{WithIndent(RenderRefMember(refTo.RefEntry, rightInstance, rightMembers), "    ")}}
                            },
                            """;

                        static IEnumerable<string> RenderRefMember(DisplayDataRef.RefDisplayDataMemberContainer left, IInstancePropertyOwner rightInstance, IReadOnlyDictionary<SchemaNodeIdentity, IInstanceProperty> rightMembers) {
                            foreach (var member in left.GetMembers()) {
                                if (member is DisplayDataRef.RefDisplayDataValueMember vm) {
                                    var property = rightMembers.GetValueOrDefault(vm.Member.ToMappingKey());

                                    yield return $$"""
                                        {{member.PhysicalName}} = {{vm.Member.Type.RenderCastToDomainType()}}{{property?.GetJoinedPathFromInstance(E_CsTs.CSharp, "!.")}},
                                        """;

                                } else if (member is DisplayDataRef.RefDisplayDataChildrenMember children) {
                                    var searchResultChildren = new SearchResult.SearchResultChildrenMember(children.ChildrenAggregate);
                                    var property = rightMembers.GetValueOrDefault(children.ChildrenAggregate.ToMappingKey());
                                    var loopVar = new Variable(children.ChildrenAggregate.GetLoopVarName(), searchResultChildren);

                                    // 配列中に登場する変数の代入元はループ変数が優先
                                    var overridedDict = new Dictionary<SchemaNodeIdentity, IInstanceProperty>(rightMembers);
                                    foreach (var m in loopVar.CreatePropertiesRecursively() ?? []) {
                                        overridedDict[m.Metadata.SchemaPathNode.ToMappingKey()] = m;
                                    }

                                    yield return $$"""
                                        {{member.PhysicalName}} = {{property?.GetJoinedPathFromInstance(E_CsTs.CSharp, "!.")}}.Select({{loopVar.Name}} => new {{children.CsClassName}} {
                                            {{WithIndent(RenderRefMember(children, loopVar, overridedDict), "    ")}}
                                        }).ToList(),
                                        """;

                                } else if (member is DisplayDataRef.RefDisplayDataMemberContainer container) {
                                    yield return $$"""
                                        {{member.PhysicalName}} = new() {
                                            {{WithIndent(RenderRefMember(container, rightInstance, rightMembers), "    ")}}
                                        },
                                        """;
                                }
                            }
                        }
                    } else {
                        throw new NotImplementedException();
                    }
                }
            }

            static string RenderDescendantMember(DisplayData.DisplayDataDescendant displayData, IInstancePropertyOwner rightInstance) {
                if (displayData.Aggregate is ChildAggregate child) {

                    return $$"""
                        {{displayData.PhysicalName}} = new() {
                            {{DisplayData.VALUES_CS}} = new() {
                                {{WithIndent(RenderValueMembers(displayData, rightInstance), "        ")}}
                            },
                        {{displayData.GetChildMembers().SelectTextTemplate(child => $$"""
                            {{WithIndent(RenderDescendantMember(child, rightInstance), "    ")}}
                        """)}}
                            {{DisplayData.EXISTS_IN_DB_CS}} = true,
                            {{DisplayData.WILL_BE_CHANGED_CS}} = false,
                            {{DisplayData.WILL_BE_DELETED_CS}} = false,
                        },
                        """;

                } else if (displayData.Aggregate is ChildrenAggregate children) {
                    var mappingKey = children.ToMappingKey();
                    var rightArray = rightInstance
                        .CreatePropertiesRecursively()
                        .SingleOrDefault(p => p.Metadata.SchemaPathNode.ToMappingKey() == mappingKey)
                        ?? throw new InvalidOperationException($"{mappingKey}と対応するプロパティが見つかりません");
                    var loopVar = new Variable(children.GetLoopVarName(), (IInstancePropertyOwnerMetadata)rightArray.Metadata);

                    return $$"""
                        {{displayData.PhysicalName}} = {{rightArray.GetJoinedPathFromInstance(E_CsTs.CSharp, "!.")}}.Select({{loopVar.Name}} => new {{displayData.CsClassName}} {
                            {{DisplayData.VALUES_CS}} = new() {
                                {{WithIndent(RenderValueMembers(displayData, loopVar), "        ")}}
                            },
                        {{displayData.GetChildMembers().SelectTextTemplate(child => $$"""
                            {{WithIndent(RenderDescendantMember(child, loopVar), "    ")}}
                        """)}}
                            {{DisplayData.EXISTS_IN_DB_CS}} = true,
                            {{DisplayData.WILL_BE_CHANGED_CS}} = false,
                            {{DisplayData.WILL_BE_DELETED_CS}} = false,
                        }).ToList(),
                        """;

                } else {
                    throw new NotImplementedException();
                }
            }
        }
    }
}
