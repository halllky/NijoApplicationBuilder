using Nijo.CodeGenerating;
using Nijo.ImmutableSchema;
using Nijo.Parts.UnitTest;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Models.QueryModelModules;

/// <summary>
/// 自動的に作成されるユニットテスト。
/// テスト観点は、検索処理を実行しただけでエラーになるといったことが無いかどうかを確かめる程度。
/// </summary>
internal class QueryModelUnitTest : IMultiAggregateSourceFile {

    private readonly List<RootAggregate> _rootAggregates = new();
    internal QueryModelUnitTest Add(RootAggregate rootAggregate) {
        _rootAggregates.Add(rootAggregate);
        return this;
    }

    void IMultiAggregateSourceFile.RegisterDependencies(IMultiAggregateSourceFileManager ctx) {
        // 特になし
    }

    void IMultiAggregateSourceFile.Render(CodeRenderingContext ctx) {
        ctx.UnitTestProject(dir => {
            dir.Generate(Render(ctx));
        });
    }

    private SourceFile Render(CodeRenderingContext ctx) {
        return new SourceFile {
            FileName = "無条件検索でエラーが出ないか確認.cs",
            Contents = $$"""
                using NUnit;
                using NUnit.Framework;

                namespace {{ctx.Config.RootNamespace}};

                partial class {{AutoGeneratedTest.NON_PARALLELIZABLE_CLASS_NAME}} {
                {{_rootAggregates.SelectTextTemplate((root, index) => $$"""

                    {{WithIndent(RenderSimpleLoadTest(root, index), "    ")}}
                """)}}
                }
                """,
        };
    }

    private static string RenderSimpleLoadTest(RootAggregate rootAggregate, int index) {
        var searchCondition = new SearchCondition.Entry(rootAggregate);
        var searchConditionMessage = new SearchConditionMessageContainer(rootAggregate);

        return $$"""
            [Test(Description = "無条件検索でエラーが出ないか確認({{rootAggregate.DisplayName.Replace("\"", "\\\"")}})")]
            public void 無条件検索でエラーが出ないか確認_{{rootAggregate.PhysicalName}}() {
                using var util = {{TestUtil.GET_UTIL}};
                using var scope = util.CreateScope<{{searchConditionMessage.CsClassName}}>();
                var searchCondition = new {{searchCondition.CsClassName}} {
                    {{SearchCondition.Entry.TAKE_CS}} = 10,
                };

                Assert.DoesNotThrowAsync(() => scope.App.{{SearchProcessing.LOAD_METHOD}}(searchCondition, scope.PresentationContext));
            }
            """;
    }
}
