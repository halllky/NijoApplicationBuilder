using Nijo.CodeGenerating;
using Nijo.ImmutableSchema;
using Nijo.Parts.Common;
using Nijo.Parts.CSharp;
using Nijo.Models.QueryModelModules;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nijo.Models.QueryModelModules {
    internal class SearchProcessingRefs {

        public SearchProcessingRefs(AggregateBase entryAggregate) {
            _entryAggregate = entryAggregate;
        }
        private AggregateBase _entryAggregate;

        private const string CONTROLLER_ACTION_LOAD = "load-refs";

        private const string VALIDATE_METHOD = "ValidateRefSearchCondition";
        private const string LOAD_METHOD = "LoadRefsAsync";
        private const string ON_AFTER_LOADED = "OnAfterLoadedRef";
        private string ToRefTarget => $"To{_entryAggregate.PhysicalName}RefTarget";


        #region TypeScript用
        internal static string RenderTsTypeMap(IEnumerable<DisplayDataRef.Entry> refEntries) {

            var items = refEntries.Select(refEntry => {
                var rootAggregate = refEntry.Aggregate.GetRoot();
                var controller = new AspNetController(rootAggregate);
                var searchCondition = new SearchCondition.Entry(rootAggregate);

                return new {
                    EscapedPhysicalName = rootAggregate.PhysicalName.Replace("'", "\\'"),
                    Endpoint = controller.GetActionNameForClient(CONTROLLER_ACTION_LOAD),
                    ParamType = searchCondition.TsTypeName,
                    ReturnType = $"Util.{SearchProcessingReturn.TYPE_TS}<{refEntry.TsTypeName}>",
                };
            }).ToArray();

            return $$"""
                /** 参照検索処理 */
                export namespace LoadRefFeature {
                  /** 参照検索処理のURLエンドポイントの一覧 */
                  export const Endpoint: { [key in {{CommandQueryMappings.REFERED_QUERY_MODEL_TYPE}}]: string } = {
                {{items.SelectTextTemplate(x => $$"""
                    '{{x.EscapedPhysicalName}}': '{{x.Endpoint}}',
                """)}}
                  }

                  /** 参照検索処理のパラメータ型の一覧 */
                  export interface ParamType {
                {{items.SelectTextTemplate(x => $$"""
                    '{{x.EscapedPhysicalName}}': {{x.ParamType}}
                """)}}
                  }

                  /** 参照検索処理の処理結果の型の一覧 */
                  export interface ReturnType {
                {{items.SelectTextTemplate(x => $$"""
                    '{{x.EscapedPhysicalName}}': {{x.ReturnType}}
                """)}}
                  }
                }
                """;
        }
        #endregion TypeScript用

        internal static string RenderAppSrvMethodRecursively(RootAggregate rootAggregate, CodeRenderingContext ctx) {
            var (entries, _) = DisplayDataRef.GetReferedMembersRecursively(rootAggregate);
            var searchProcesses = entries.Select(e => new SearchProcessingRefs(e.Aggregate));

            return $$"""
                {{searchProcesses.SelectTextTemplate(search => $$"""
                {{search.RenderAppSrvMethod(ctx)}}
                """)}}
                """;
        }

        internal static string RenderAspNetCoreControllerActionRecursively(RootAggregate rootAggregate, CodeRenderingContext ctx) {
            var (entries, _) = DisplayDataRef.GetReferedMembersRecursively(rootAggregate);
            var searchProcesses = entries.Select(e => new SearchProcessingRefs(e.Aggregate));

            return $$"""
                {{searchProcesses.SelectTextTemplate(search => $$"""
                {{search.RenderAspNetCoreControllerAction(ctx)}}
                """)}}
                """;
        }

        internal string RenderAspNetCoreControllerAction(CodeRenderingContext ctx) {
            var searchCondition = new SearchCondition.Entry(_entryAggregate);
            var searchConditionMessages = new SearchConditionMessageContainer(_entryAggregate);

            return $$"""
                /// <summary>
                /// {{_entryAggregate.DisplayName}}が他の集約から参照されるときの検索処理のエンドポイント
                /// </summary>
                [HttpPost("{{CONTROLLER_ACTION_LOAD}}"), {{AspNetController.AUTOGENERATED_ENDPOINT}}({{CommandQueryMappings.E_COMMAND_QUERY_TYPE}}.{{_entryAggregate.PhysicalName}}, {{E_AutoGeneratedActionType.ENUM_NAME}}.{{E_AutoGeneratedActionType.READ}})]
                public async Task<IActionResult> LoadRefs({{searchCondition.CsClassName}} {{AspNetController.DATA}}, {{PresentationContext.INTERFACE}}<{{searchConditionMessages.CsClassName}}> {{AspNetController.CONTEXT}}) {
                    // エラーチェック
                    _applicationService.{{VALIDATE_METHOD}}(data, context);
                    if (context.Messages.HasError() || (!context.Options.IgnoreConfirm && context.HasConfirm())) {
                        return _webConfigure.{{AspNetController.TO_ACTION_RESULT}}(null, context);
                    }

                    // 検索処理実行
                    var returnValue = await _applicationService.{{LOAD_METHOD}}(data, context);
                    return _webConfigure.{{AspNetController.TO_ACTION_RESULT}}(returnValue, context);
                }
                """;
        }

        internal string RenderAppSrvMethod(CodeRenderingContext ctx) {
            var searchCondition = new SearchCondition.Entry(_entryAggregate);
            var searchConditionMessage = new SearchConditionMessageContainer(_entryAggregate);
            var searchResult = new SearchResult(_entryAggregate.GetRoot());
            var displayData = new DisplayDataRef.Entry(_entryAggregate);

            return $$"""
                #region 参照検索
                /// <summary>
                /// {{_entryAggregate.DisplayName}}の検索条件の内容を検証します。
                /// 不正な場合、検索処理自体の実行が中止されます。
                /// </summary>
                /// <param name="searchCondition">検索条件</param>
                /// <param name="context">エラーがある場合はこのオブジェクトの中にエラー内容を追記してください。</param>
                public virtual void {{VALIDATE_METHOD}}({{searchCondition.CsClassName}} searchCondition, {{PresentationContext.INTERFACE}}<{{searchConditionMessage.CsClassName}}> context) {
                    // エラーチェックがある場合はこのメソッドをオーバーライドして記述してください。
                }

                /// <summary>
                /// {{_entryAggregate.DisplayName}}が他の集約から参照されるときの検索を行ないます。
                /// </summary>
                public async Task<{{SearchProcessingReturn.TYPE_CS}}<{{displayData.CsClassName}}>> {{LOAD_METHOD}}({{searchCondition.CsClassName}} searchCondition, {{PresentationContext.INTERFACE}}<{{searchConditionMessage.CsClassName}}> context) {
                    // FROM句, SELECT句
                    var querySource = {{SearchProcessing.CREATE_QUERY_SOURCE}}(searchCondition, context);

                    // 絞り込み(WHERE句)
                    var filtered = {{SearchProcessing.APPEND_WHERE_CLAUSE}}(querySource, searchCondition);

                    // 並び替え(ORDER BY 句)
                    var sorted = {{SearchProcessing.APPEND_ORDERBY_CLAUSE}}(filtered, searchCondition);

                    // ページング(SKIP, TAKE)
                    var query = sorted;
                    if (searchCondition.{{SearchCondition.Entry.SKIP_CS}} != null) {
                        query = query.Skip(searchCondition.{{SearchCondition.Entry.SKIP_CS}}.Value);
                    }
                    if (searchCondition.{{SearchCondition.Entry.TAKE_CS}} != null) {
                        query = query.Take(searchCondition.{{SearchCondition.Entry.TAKE_CS}}.Value);
                    }

                    // 画面表示用の型への変換
                    var converted = query.Select({{ToRefTarget}}());

                    // 検索処理実行
                    {{displayData.CsClassName}}[] loaded;
                    int totalCount;
                    try {
                        var countTask = filtered.CountAsync();
                        var searchTask = converted.ToArrayAsync();

                        // UIのパフォーマンスのため並列で実行
                        await Task.WhenAll(countTask, searchTask);

                        loaded = await searchTask;
                        totalCount = await countTask;
                    } catch {
                        Log.Debug("{{_entryAggregate.DisplayName.Replace("\"", "\\\"")}} エラー発生時検索条件: {0}", searchCondition.ToJson());
                        try {
                            Log.Debug("{{_entryAggregate.DisplayName.Replace("\"", "\\\"")}} エラー発生時SQL: {0}", query.ToQueryString());
                        } catch {
                            Log.Debug("{{_entryAggregate.DisplayName.Replace("\"", "\\\"")}} 不具合調査用のSQL変換に失敗しました。");
                        }
                        throw;
                    }

                    // 読み取り専用項目の設定や、C#上での追加情報の付加など、任意のカスタマイズ処理
                    var currentPageItems = {{ON_AFTER_LOADED}}(loaded, searchCondition, context).ToArray();

                    return new() {
                        {{SearchProcessingReturn.CURRENT_PAGE_ITEMS_CS}} = currentPageItems,
                        {{SearchProcessingReturn.TOTAL_COUNT_CS}} = totalCount,
                    };
                }
                /// <summary>
                /// {{_entryAggregate.DisplayName}}の参照検索結果型を画面表示用の型に変換する式を返します。
                /// </summary>
                protected virtual Expression<Func<{{searchResult.CsClassName}}, {{displayData.CsClassName}}>> {{ToRefTarget}}() {
                    throw new NotImplementedException(); // TODO ver.1
                }
                /// <summary>
                /// {{_entryAggregate.DisplayName}}の参照検索の読み込み後処理
                /// </summary>
                protected virtual IEnumerable<{{displayData.CsClassName}}> {{ON_AFTER_LOADED}}(IEnumerable<{{displayData.CsClassName}}> currentPageItems, {{searchCondition.CsClassName}} searchCondition, {{PresentationContext.INTERFACE}}<{{searchConditionMessage.CsClassName}}> context) {
                    // 読み込み後処理がある場合はここで実装してください。
                    return currentPageItems;
                }
                #endregion 参照検索
                """;
        }
    }
}
