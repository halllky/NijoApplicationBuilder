using Nijo.Ver1.ImmutableSchema;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Ver1.CodeGenerating {
    /// <summary>
    /// ソースコード自動生成のコンテキスト情報
    /// </summary>
    public sealed class CodeRenderingContext {
        internal CodeRenderingContext(GeneratedProject project, ApplicationConfig config) {
            Project = project;
            Config = config;
        }

        /// <inheritdoc cref="ImmutableSchema.MemberTypeResolver"/>
        public MemberTypeResolver MemberTypeResolver => throw new NotImplementedException();


        public GeneratedProject Project { get; }
        public ApplicationConfig Config { get; }

        /// <summary>
        /// C#のクラスライブラリ。コードが自動生成される主たるプロジェクト。
        /// </summary>
        public void CoreLibrary(Action<DirectorySetupper> setup) {
            DirectorySetupper.StartSetup(this, Path.Combine(Project.CoreLibrary, "__AutoGenerated"), setup);
        }
        /// <summary>
        /// C#のクラスライブラリ。
        /// <see cref="CoreLibrary"/>に生成されたクラスやメソッドをオーバーライドしてカスタムロジックを組むプロジェクト。
        /// </summary>
        public void CoreLibraryOverride(Action<DirectorySetupper> setup) {
            DirectorySetupper.StartSetup(this, Path.Combine(Project.CoreLibraryOverride, "__AutoGenerated"), setup);
        }
        /// <summary>
        /// ASP.NET Core プロジェクト。
        /// </summary>
        public void WebapiProject(Action<DirectorySetupper> setup) {
            DirectorySetupper.StartSetup(this, Path.Combine(Project.WebapiProject, "__AutoGenerated"), setup);
        }
        /// <summary>
        /// React.js プロジェクト。
        /// </summary>
        public void ReactProject(Action<DirectorySetupper> setup) {
            DirectorySetupper.StartSetup(this, Path.Combine(Project.ReactProject, "__autoGenerated"), setup);
        }


        #region 複数の集約からレンダリングされるソースファイルの管理
        /// <summary>
        /// 1つのファイルの中に複数の集約の情報が含まれるソースファイルを使用します。
        /// </summary>
        public T Use<T>() where T : MultiAggregateSourceFileBase {
            throw new NotImplementedException();
        }
        #endregion 複数の集約からレンダリングされるソースファイルの管理


        #region ソースコード自動生成で登場しなかった既存ファイルの削除
        private readonly HashSet<string> _handled = new();
        internal void Handle(string fullpath) => _handled.Add(Path.GetFullPath(fullpath));
        internal bool IsHandled(string fullpath) => _handled.Contains(Path.GetFullPath(fullpath));
        private void CleanUnhandledFilesAndDirectories() {
            var allFiles = Directory.GetFiles(Project.CoreLibrary, "*", SearchOption.AllDirectories)
                .Concat(Directory.GetFiles(Project.WebapiProject, "*", SearchOption.AllDirectories))
                .Concat(Directory.GetFiles(Project.ReactProject, "*", SearchOption.AllDirectories));
            foreach (var file in allFiles) {
                if (IsHandled(file)) continue;
                if (!File.Exists(file)) continue;
                File.Delete(file);
            }
            var allDirectories = Directory.GetDirectories(Project.CoreLibrary, "*", SearchOption.AllDirectories)
                .Concat(Directory.GetDirectories(Project.WebapiProject, "*", SearchOption.AllDirectories))
                .Concat(Directory.GetDirectories(Project.ReactProject, "*", SearchOption.AllDirectories));
            foreach (var dir in allDirectories) {
                if (IsHandled(dir)) continue;
                if (!Directory.Exists(dir)) continue;
                Directory.Delete(dir, true);
            }
        }
        #endregion ソースコード自動生成で登場しなかった既存ファイルの削除
    }
}
