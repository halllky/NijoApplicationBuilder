using Nijo.Util.DotnetEx;
using Nijo.Ver1.CodeGenerating;
using Nijo.Ver1.ImmutableSchema;
using Nijo.Ver1.Parts.CSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Ver1.Parts.Common;

/// <summary>
/// スキーマ定義で指定されたメンバー毎の属性（必須か否か、文字列の最大桁数、など）を
/// 生成された後のカスタマイズ処理で参照したいときに使う構造体。
/// </summary>
internal class Metadata : IMultiAggregateSourceFile {

    private readonly List<AggregateBase> _aggregates = new();
    internal Metadata Add(AggregateBase aggregate) {
        _aggregates.Add(aggregate);
        return this;
    }

    internal const string CS_CLASSNAME = "Metadata";
    internal const string TS_TYPENAME = "Metadata";

    internal const string VALUE_MEMBER_METADATA_CS = "ValueMemberMetadata";
    internal const string VALUE_MEMBER_METADATA_TS = "ValueMemberMetadata";

    void IMultiAggregateSourceFile.RegisterDependencies(IMultiAggregateSourceFileManager ctx) {
        // 特になし
    }

    void IMultiAggregateSourceFile.Render(CodeRenderingContext ctx) {
        ctx.CoreLibrary(autoGenerated => {
            autoGenerated.Directory("Util", dir => {
                dir.Generate(RenderCSharp(ctx));
            });
        });
        ctx.ReactProject(autoGenerated => {
            autoGenerated.Directory("util", dir => {
                dir.Generate(RenderTypeScript(ctx));
            });
        });
    }

    private SourceFile RenderCSharp(CodeRenderingContext ctx) {
        var root = _aggregates
            .Select(agg => new Container(agg))
            .ToArray();

        return new SourceFile {
            FileName = "Metadata.cs",
            Contents = $$"""
                namespace {{ctx.Config.RootNamespace}};

                /// <summary>
                /// スキーマ定義で指定されたメンバー毎の属性（必須か否か、文字列の最大桁数、など）を
                /// 生成された後のカスタマイズ処理で参照したいときに使う構造体。
                /// </summary>
                public sealed class {{CS_CLASSNAME}} {
                    public {{CS_CLASSNAME}}() {
                    }

                {{root.SelectTextTemplate(container => $$"""
                    public {{container.CsClassName}} {{container.PhysicalName}} => _cache_{{container.PhysicalName}} ??= new();
                """)}}

                {{root.SelectTextTemplate(container => $$"""
                    private {{container.CsClassName}}? _cache_{{container.PhysicalName}};
                """)}}
                {{root.SelectTextTemplate(container => $$"""


                    {{WithIndent(container.RenderCSharpRecursively(), "    ")}}
                """)}}
                }


                /// <inheritdoc cref="{{CS_CLASSNAME}}"/>
                public sealed class {{VALUE_MEMBER_METADATA_CS}} {
                    /// <summary>表示用名称</summary>
                    public required string DisplayName { get; init; }
                    /// <summary>キーか否か</summary>
                    public bool IsKey { get; init; }
                    /// <summary>必須か否か</summary>
                    public bool Required { get; init; }
                    /// <summary>最大長。文字列型の項目にのみ有効。バイト数でなく文字数でカウントする</summary>
                    public int? MaxLength { get; init; }
                    /// <summary>この値がとることのできる文字種。文字列型の項目にのみ有効。未指定の場合は制約なし</summary>
                    public {{CharacterType.ENUM_NAME}}? CharacterType { get; init; }
                    /// <summary>整数部と小数部をあわせた桁数。数値型の項目にのみ有効。</summary>
                    public int? TotalDigit { get; init; }
                    /// <summary>小数部桁数。数値型の項目にのみ有効。</summary>
                    public int? DecimalPlace { get; init; }
                }
                """,
        };
    }

    private SourceFile RenderTypeScript(CodeRenderingContext ctx) {
        return new SourceFile {
            FileName = "metadata.ts",
            Contents = $$"""
                /** 
                 * スキーマ定義で指定されたメンバー毎の属性（必須か否か、文字列の最大桁数、など）を
                 * 生成された後のカスタマイズ処理で参照したいときに使う構造体。
                 */
                export type {{TS_TYPENAME}} = {
                }


                export type {{VALUE_MEMBER_METADATA_TS}} = {
                  /** 表示用名称 */
                  displayName: string
                  /** キーか否か */
                  isKey: boolean
                  /** 必須か否か */
                  required: boolean
                  /** 最大長。文字列型の項目にのみ有効。バイト数でなく文字数でカウントする */
                  maxLength?: number
                  /** この値がとることのできる文字種。文字列型の項目にのみ有効。未指定の場合は制約なし */
                  characterType?: {{ctx.GetCharacterTypes().Select(type => $"'{type.Replace("'", "\\'")}'").Join(" | ")}}
                  /** 整数部と小数部をあわせた桁数。数値型の項目にのみ有効。 */
                  totalDigit?: number
                  /** 小数部桁数。数値型の項目にのみ有効。 */
                  decimalPlace?: number
                }
                """,
        };
    }


    /// <summary>
    /// コンテナ。集約と対応する。
    /// </summary>
    private class Container {
        internal Container(AggregateBase aggregate) {
            _aggregate = aggregate;
        }
        private readonly AggregateBase _aggregate;

        internal string PhysicalName => _aggregate.PhysicalName;
        internal string CsClassName => $"{_aggregate.PhysicalName}Metadata";
        internal string TsTypeName => $"{_aggregate.PhysicalName}Metadata";

        internal IEnumerable<IMetadataMember> GetMembers() {
            foreach (var member in _aggregate.GetMembers()) {
                if (member is ValueMember vm) {
                    yield return new MetadataValueMember(vm);

                } else if (member is ChildAggreagte child) {
                    yield return new MetadataDescendantMember(child);

                } else if (member is ChildrenAggreagte children) {
                    yield return new MetadataDescendantMember(children);
                }
            }
        }

        internal string RenderCSharpRecursively() {
            var thisAndDescendants = _aggregate
                .EnumerateThisAndDescendants()
                .Select(agg => new Container(agg));

            return $$"""
                #region {{_aggregate.DisplayName}}
                {{thisAndDescendants.SelectTextTemplate(metadata => $$"""
                {{Render(metadata)}}
                """)}}
                #endregion {{_aggregate.DisplayName}}
                """;

            static string Render(Container metadata) {
                var members = metadata.GetMembers().ToArray();
                return $$"""
                    public class {{metadata.CsClassName}} {
                    {{members.SelectTextTemplate(m => $$"""
                        {{WithIndent(m.RenderCSharp(), "    ")}}
                    """)}}
                    }
                    """;
            }
        }

        internal string RenderTypeScriptRecursively() {
            // TypeScriptはルート集約直下に書かれるので再帰処理不要

            return $$"""
                //#region {{_aggregate.DisplayName}}
                /** 
                 * スキーマ定義で指定されたメンバー毎の属性（必須か否か、文字列の最大桁数、など）を
                 * 生成された後のカスタマイズ処理で参照したいときに使う構造体。
                 */
                export const {{TsTypeName}} = {{RenderTypeScriptBody()}}
                //#endregion {{_aggregate.DisplayName}}
                """;
        }
        private string RenderTypeScriptBody() {
            return $$"""
                {
                {{GetMembers().SelectTextTemplate(m => $$"""
                  {{WithIndent(m.RenderTypeScript(), "  ")}}
                """)}}
                }
                """;
        }
    }


    #region メンバー
    internal interface IMetadataMember {
        string PhysicalName { get; }
        string RenderCSharp();
        string RenderTypeScript();
    }
    internal class MetadataValueMember : IMetadataMember {
        internal MetadataValueMember(ValueMember vm) {
            _vm = vm;
        }
        private readonly ValueMember _vm;

        public string PhysicalName => _vm.PhysicalName;

        public string RenderCSharp() {
            return $$"""
                public {{VALUE_MEMBER_METADATA_CS}} {{PhysicalName}} { get; } = new() {
                    DisplayName = "{{_vm.DisplayName.Replace("\"", "\\\"")}}",
                {{If(_vm.IsKey, () => $$"""
                    IsKey = true,
                """)}}
                {{If(_vm.IsKey || _vm.IsRequired, () => $$"""
                    Required = true,
                """)}}
                {{If(_vm.MaxLength != null, () => $$"""
                    MaxLength = {{_vm.MaxLength}},
                """)}}
                {{If(_vm.CharacterType != null, () => $$"""
                    CharacterType = {{CharacterType.ENUM_NAME}}.{{_vm.CharacterType}},
                """)}}
                {{If(_vm.TotalDigit != null, () => $$"""
                    TotalDigit = {{_vm.TotalDigit}},
                """)}}
                {{If(_vm.DecimalPlace != null, () => $$"""
                    DecimalPlace = {{_vm.DecimalPlace}},
                """)}}
                };
                """;
        }

        public string RenderTypeScript() {
            return $$"""
                {{_vm.PhysicalName}}: {
                  displayName: '{{_vm.DisplayName.Replace("'", "\\'")}}',
                {{If(_vm.IsKey, () => $$"""
                  isKey: true,
                """)}}
                {{If(_vm.IsRequired, () => $$"""
                  required: true,
                """)}}
                {{If(_vm.CharacterType != null, () => $$"""
                  characterType: '{{_vm.CharacterType}}',
                """)}}
                {{If(_vm.MaxLength != null, () => $$"""
                  maxLength: {{_vm.MaxLength}},
                """)}}
                {{If(_vm.TotalDigit != null, () => $$"""
                  totalDigit: {{_vm.TotalDigit}},
                """)}}
                {{If(_vm.DecimalPlace != null, () => $$"""
                  decimalPlace: {{_vm.DecimalPlace}},
                """)}}
                },
                """;
        }
    }

    internal class MetadataDescendantMember : IMetadataMember {
        internal MetadataDescendantMember(ChildAggreagte child) {
            _aggregate = child;
        }
        internal MetadataDescendantMember(ChildrenAggreagte children) {
            _aggregate = children;
        }
        private readonly AggregateBase _aggregate;

        public string PhysicalName => _aggregate.PhysicalName;

        public string RenderCSharp() {
            var desc = new Container(_aggregate);
            var privateField = $"_cache_{PhysicalName}";

            return $$"""
                public {{desc.CsClassName}} {{PhysicalName}} => {{privateField}} ??= new();
                private {{desc.CsClassName}}? {{privateField}};
                """;
        }

        public string RenderTypeScript() {
            return $$"""

                """;
        }
    }
    #endregion メンバー
}
