using Nijo.Util.DotnetEx;
using Nijo.Ver1.CodeGenerating;
using Nijo.Ver1.ImmutableSchema;
using Nijo.Ver1.Parts.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Ver1.Parts.CSharp {
    public class AspNetController {
        public AspNetController(RootAggregate rootAggregate) {
            _rootAggregate = rootAggregate;
        }

        private readonly RootAggregate _rootAggregate;

        private const string API_SUBDOMAIN = "api";

        /// <summary>
        /// RootAttributeの引数に指定するルーティング定義
        /// </summary>
        public string Route => $"{API_SUBDOMAIN}/{_rootAggregate.LatinName.ToKebabCase()}";
        /// <summary>
        /// ASP.NET Core コントローラークラス名
        /// </summary>
        public string CsClassName => $"{_rootAggregate.PhysicalName}Controller";

        /// <summary>
        /// Webクライアント側からアクセスするときのAction名を返す。
        /// </summary>
        /// <param name="action">Action名単体</param>
        /// <returns>URLのドメイン部分を除いたサブドメイン部分</returns>
        public string GetActionNameForClient(string action) {
            return $"{Route}/{action}";
        }


        #region ASP.NET Core のバインディング設定
        private const string ON_AUTOGENERATED_ACTION_EXECUTING = "OnAutoGeneratedActionExecuting";
        private const string ON_AUTOGENERATED_ACTION_EXECUTED = "OnAutoGeneratedActionExecuted";
        private const string ON_AUTOGENERATED_ACTION_AUTHORIZATION = "OnAutoGeneratedActionAuthorization";
        private const string AUTOGENERATED_ACTION_METADATA = "AutoGeneratedActionMetadata";
        private const string AUTOGENERATED_ACTION_ARGS = "AutoGeneratedActionArgs";
        internal const string TO_ACTION_RESULT = "ToActionResult";

        internal const string AUTOGENERATED_ENDPOINT = "AutoGeneratedEndpoint";

        /// <summary>
        /// Actionの第1引数の名前
        /// </summary>
        internal const string DATA = "data";
        /// <summary>
        /// Actionの第2引数の名前
        /// </summary>
        internal const string CONTEXT = "context";

        internal static SourceFile RenderAutoGeneratedEndpointAttribute(CodeRenderingContext ctx) {
            var className = $"{AUTOGENERATED_ENDPOINT}Attribute";

            return new SourceFile {
                FileName = "AutoGeneratedEndpointAttribute.cs",
                Contents = $$"""
                    using System;
                    using System.Reflection;
                    using Microsoft.AspNetCore.Mvc;
                    using Microsoft.AspNetCore.Mvc.Filters;
                    
                    namespace {{ctx.Config.RootNamespace}};

                    /// <summary>
                    /// 自動生成されたエンドポイントのHTTPリクエスト・レスポンスの処理を定義します。
                    /// </summary>
                    public sealed class {{className}} : Attribute, IAuthorizationFilter, IActionFilter {
                        public {{className}}({{CommandQueryMappings.E_COMMAND_QUERY_TYPE}} modelType, {{E_AutoGeneratedActionType.ENUM_NAME}} readWrite) {
                            _metadata = new() {
                                ModelType = modelType,
                                ReadWrite = readWrite,
                            };
                        }

                        private readonly {{AUTOGENERATED_ACTION_METADATA}} _metadata;

                        /// <summary>
                        /// <see cref="{{ApplicationConfigure.ABSTRACT_CLASS_WEBAPI}}"/> で定義された認証ロジックを呼び出す。
                        /// </summary>
                        void IAuthorizationFilter.OnAuthorization(AuthorizationFilterContext context) {
                            var configure = context.HttpContext.RequestServices
                                .GetRequiredService<{{ApplicationConfigure.ABSTRACT_CLASS_WEBAPI}}>();
                            configure.{{ON_AUTOGENERATED_ACTION_AUTHORIZATION}}(context, _metadata);
                        }

                        /// <summary>
                        /// HTTPリクエストの内容を解釈し、自動生成されたControllerのActionの引数を組み立てる。
                        /// </summary>
                        void IActionFilter.OnActionExecuting(ActionExecutingContext context) {
                            var configure = context.HttpContext.RequestServices
                                .GetRequiredService<{{ApplicationConfigure.ABSTRACT_CLASS_WEBAPI}}>();
                            var actionMethod = context.Controller.GetType()
                                .GetMethod(context.ActionDescriptor.DisplayName ?? throw new InvalidOperationException("Actionのメソッド名を取得できません。"))
                                ?? throw new InvalidOperationException($"{context.ActionDescriptor.DisplayName}のメソッド情報が取得できません。");
                            var arrayParameters = actionMethod
                                .GetParameters()
                                .ToArray();

                            // 検索条件の型やコマンド引数の型を特定する
                            var parameterType = arrayParameters[0].ParameterType;

                            // {{PresentationContext.INTERFACE}}のメッセージの型を特定する
                            var messageRootType = arrayParameters[1].ParameterType.GetGenericArguments()[0];

                            // リフレクションを使って{{ON_AUTOGENERATED_ACTION_EXECUTING}}メソッドを実行
                            var executing = typeof({{ApplicationConfigure.ABSTRACT_CLASS_WEBAPI}}).GetMethod(nameof({{ApplicationConfigure.ABSTRACT_CLASS_WEBAPI}}.{{ON_AUTOGENERATED_ACTION_EXECUTING}}))!;
                            var executingGeneric = executing.MakeGenericMethod(parameterType, messageRootType);

                            dynamic actionParam = executingGeneric.Invoke(configure, [context, _metadata])!;

                            // ここで設定した値が自動生成された各ControllerのActionのメソッドに渡される
                            context.ActionArguments["{{DATA}}"] = actionParam.Data;
                            context.ActionArguments["{{CONTEXT}}"] = actionParam.PresentationContext;
                        }

                        /// <summary>
                        /// 自動生成されたControllerのActionの実行後処理。
                        /// </summary>
                        void IActionFilter.OnActionExecuted(ActionExecutedContext context) {
                            var configure = context.HttpContext.RequestServices
                                .GetRequiredService<{{ApplicationConfigure.ABSTRACT_CLASS_WEBAPI}}>();
                            configure.{{ON_AUTOGENERATED_ACTION_EXECUTED}}(context, _metadata);
                        }
                    }

                    /// <summary>
                    /// 自動生成されたアクションのメタデータ
                    /// </summary>
                    public sealed class {{AUTOGENERATED_ACTION_METADATA}} {
                        /// <summary>どの種類のモデルに対して発生したリクエストか</summary>
                        public required {{CommandQueryMappings.E_COMMAND_QUERY_TYPE}} ModelType { get; init; }
                        /// <summary>更新系処理、参照系処理の別</summary>
                        public required {{E_AutoGeneratedActionType.ENUM_NAME}} ReadWrite { get; init; }
                    }

                    /// <summary>
                    /// <see cref="{{ApplicationConfigure.ABSTRACT_CLASS_WEBAPI}}.{{ON_AUTOGENERATED_ACTION_EXECUTING}}"/> の戻り値
                    /// </summary>
                    public sealed class {{AUTOGENERATED_ACTION_ARGS}}<TParameter, TMessageRoot> where TMessageRoot : {{MessageContainer.INTERFACE}} {
                        /// <summary>
                        /// クライアント側から送られてきたパラメータ。検索条件や、更新処理引数など。
                        /// </summary>
                        public required TParameter Data { get; init; }
                        /// <inheritdoc cref="{{PresentationContext.INTERFACE}}"/>
                        public required {{PresentationContext.INTERFACE}}<TMessageRoot> PresentationContext { get; init; }
                    }
                    """,
            };
        }

        internal static void RegisterWebapiConfiguration(IMultiAggregateSourceFileManager ctx) {
            ctx.Use<ApplicationConfigure>()
                //.AddControllers(option => $$"""
                //    {{option}}.ModelBinderProviders.Add(new {{MODEL_BINDER_BASE}}(this));
                //    """)
                .AddWebapiMethod($$"""
                    /// <summary>
                    /// 自動生成されたASP.NET Core の Action の実行前処理。
                    /// クライアント側から送られてきたリクエストを解釈し、具象型を返す。
                    /// 具体的な処理はアプリケーション毎に異なるため抽象メソッドとしている。
                    /// </summary>
                    /// <typeparam name="TParameter">パラメータのデータ型</typeparam>
                    /// <typeparam name="TMessageRoot">パラメータのデータ型（≒画面のデータ型）と対応するエラーメッセージの入れ物の型</typeparam>
                    /// <param name="filterContext">ASP.NET Core が提供する <see cref="IActionFilter"/> の仕組みを参照のこと。</param>
                    /// <param name="metadata">Actionに関するメタ情報</param>
                    /// <returns>クライアント側から送られてきた処理の引数と、{{PresentationContext.INTERFACE}}のインスタンス。</returns>
                    public abstract {{AUTOGENERATED_ACTION_ARGS}}<TParameter, TMessageRoot> {{ON_AUTOGENERATED_ACTION_EXECUTING}}<TParameter, TMessageRoot>(
                        ActionExecutingContext filterContext,
                        {{AUTOGENERATED_ACTION_METADATA}} metadata)
                        where TMessageRoot : {{MessageContainer.INTERFACE}};
                    """)
                .AddWebapiMethod($$"""
                    /// <summary>
                    /// 自動生成されたASP.NET Core の Action の実行後処理。
                    /// <see cref="{{PresentationContext.INTERFACE}}"/> の内容を <see cref="IActionResult"/> に変換する。
                    /// 具体的な処理はアプリケーション毎に異なるため抽象メソッドとしている。
                    /// </summary>
                    /// <typeparam name="TMessageRoot">パラメータのデータ型（≒画面のデータ型）と対応するエラーメッセージの入れ物の型</typeparam>
                    /// <param name="returnValue">処理の戻り値</param>
                    /// <param name="presentationContext">サーバー側で行なわれた一連の処理（登録処理など）の結果を保持しているオブジェクト</param>
                    /// <returns><see cref="IActionResult"/> のインスタンス。</returns>
                    public abstract IActionResult {{TO_ACTION_RESULT}}<TMessageRoot>(
                        object? returnValue,
                        {{PresentationContext.INTERFACE}}<TMessageRoot> presentationContext)
                        where TMessageRoot : {{MessageContainer.INTERFACE}};
                    """)
                .AddWebapiMethod($$"""
                    /// <summary>
                    /// 自動生成されたASP.NET Core の Action の実行後処理。
                    /// </summary>
                    /// <param name="filterContext">ASP.NET Core のActionFilterの仕組み</param>
                    /// <param name="metadata">Actionに関するメタ情報</param>
                    public virtual void {{ON_AUTOGENERATED_ACTION_EXECUTED}}(ActionExecutedContext filterContext, {{AUTOGENERATED_ACTION_METADATA}} metadata) {
                        // 自動生成されたエンドポイント全般に適用される処理がある場合はこのメソッドをオーバーライドして定義してください。
                    }
                    """)
                .AddWebapiMethod($$"""
                    /// <summary>
                    /// 自動生成されたASP.NET Core の Action の認証処理。
                    /// </summary>
                    /// <param name="filterContext">ASP.NET Core のActionFilterの仕組み</param>
                    /// <param name="metadata">Actionに関するメタ情報</param>
                    public virtual void {{ON_AUTOGENERATED_ACTION_AUTHORIZATION}}(AuthorizationFilterContext filterContext, {{AUTOGENERATED_ACTION_METADATA}} metadata) {
                        // 自動生成されたエンドポイント全般に適用される認証処理がある場合はこのメソッドをオーバーライドして定義してください。
                    }
                    """);
        }
        #endregion ASP.NET Core のバインディング設定
    }
}
