using Microsoft.EntityFrameworkCore;
using Nijo.Util.DotnetEx;
using Nijo.Ver1.CodeGenerating;
using Nijo.Ver1.ImmutableSchema;
using Nijo.Ver1.Parts.CSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Ver1.Models.DataModelModules {
    /// <summary>
    /// Entity Framework Core のエンティティ
    /// </summary>
    internal class EFCoreEntity {

        internal EFCoreEntity(AggregateBase aggregate) {
            _aggregate = aggregate;
        }
        private readonly AggregateBase _aggregate;

        internal string CsClassName => $"{_aggregate.PhysicalName}DbEntity";
        internal string DbSetName => $"{_aggregate.PhysicalName}DbSet";

        /// <summary>
        /// 楽観排他用のバージョンを持つかどうか
        /// </summary>
        private bool HasVersionColumn => _aggregate is RootAggregate;

        /// <summary>楽観排他制御用のバージョニング用カラムの名前</summary>
        internal const string VERSION = "Version";
        /// <summary>データが新規作成された日時</summary>
        internal const string CREATED_AT = "CreatedAt";
        /// <summary>データが更新された日時</summary>
        internal const string UPDATED_AT = "UpdatedAt";
        /// <summary>データを新規作成したユーザー</summary>
        internal const string CREATE_USER = "CreateUser";
        /// <summary>データを更新したユーザー</summary>
        internal const string UPDATE_USER = "UpdateUser";

        /// <summary>主キーが一致するかどうかを調べるメソッドの名前</summary>
        internal const string KEYEQUALS = "KeyEquals";

        internal string OnModelCreatingAutoGenerated => $"OnModelCreating{_aggregate.PhysicalName}";
        private const string ON_MODEL_CREATING_CUSTOMIZE = "OnModelCreating";

        /// <summary>
        /// <list type="bullet">
        /// <item>自身の<see cref="ValueMember"/>: 列挙する</item>
        /// <item>親のキー: 列挙する</item>
        /// <item>参照先のキー: 列挙する</item>
        /// <item>Child, Children: 列挙しない</item>
        /// <item>ナビゲーションプロパティ: 列挙しない</item>
        /// </list>
        /// </summary>
        private IEnumerable<EFCoreEntityColumn> GetColumns() {
            var parent = _aggregate.GetParent();
            if (parent != null) {
                foreach (var member in parent.GetKeyVMs()) {
                    yield return new ParentKeyMember(member);
                }
            }

            foreach (var member in _aggregate.GetMembers()) {
                if (member is ValueMember vm) {
                    yield return new OwnColumnMember(vm);

                } else if (member is RefToMember refTo) {
                    foreach (var refToKey in refTo.RefTo.GetKeyVMs()) {
                        yield return new RefKeyMember(refTo, refToKey);
                    }
                }
            }
        }

        /// <summary>
        /// ナビゲーションプロパティを列挙する
        /// </summary>
        private IEnumerable<NavigationProperty> GetNavigationProperties() {
            var parent = _aggregate.GetParent();
            if (parent != null) {
                yield return new NavigationOfParentChild(parent, _aggregate);
            }

            foreach (var member in _aggregate.GetMembers()) {
                if (member is ChildAggreagte child) {
                    yield return new NavigationOfParentChild(_aggregate, child);

                } else if (member is ChildrenAggreagte children) {
                    yield return new NavigationOfParentChild(_aggregate, children);

                } else if (member is RefToMember refTo) {
                    yield return new NavigationOfRef(refTo);
                }
            }

            foreach (var refFrom in _aggregate.GetRefFroms()) {
                yield return new NavigationOfRef(refFrom);
            }
        }

        internal string RenderClassDeclaring(CodeRenderingContext ctx) {
            var columns = GetColumns().ToArray();
            var keys = columns
                .Where(col => col.IsKey)
                .ToArray();
            var sequences = columns
                .Where(col => col.Member.Type is ValueMemberTypes.SequenceMember)
                .ToArray();

            var navigations = GetNavigationProperties().ToArray();
            var navigationsForDeclaring = navigations
                .Select(nav => {
                    if (nav.Principal.ThisSide == _aggregate) return nav.Principal;
                    if (nav.Relevant.ThisSide == _aggregate) return nav.Relevant;
                    throw new InvalidOperationException(); // ありえない
                });
            // 親子のナビゲーションは親側のOnModelCreatingで定義
            var navigationsForConfiguringChildren = navigations
                .Where(nav => nav is NavigationOfParentChild && nav.Principal.ThisSide == _aggregate);
            // 外部参照のナビゲーションは参照元側のOnModelCreatingで定義
            var navigationsForConfigureRefTo = navigations
                .Where(nav => nav is NavigationOfRef && nav.Relevant.ThisSide == _aggregate);

            return $$"""
                /// <summary>
                /// {{_aggregate.DisplayName}}の Entity Framework Core エンティティ型。RDBMSのテーブル定義と対応。
                /// </summary>
                public partial class {{CsClassName}} {
                {{columns.SelectTextTemplate(col => $$"""
                    public {{col.CsType}}? {{col.PhysicalName}} { get; set; }
                """)}}
                    /// <summary>データが新規作成された日時</summary>
                    public DateTime? {{CREATED_AT}} { get; set; }
                    /// <summary>データが更新された日時</summary>
                    public DateTime? {{UPDATED_AT}} { get; set; }
                    /// <summary>データを新規作成したユーザー</summary>
                    public string? {{CREATE_USER}} { get; set; }
                    /// <summary>データを更新したユーザー</summary>
                    public string? {{UPDATE_USER}} { get; set; }
                {{If(HasVersionColumn, () => $$"""
                    /// <summary>楽観排他制御用のバージョニング用カラム</summary>
                    public int? {{VERSION}} { get; set; }
                """)}}

                {{navigationsForDeclaring.SelectTextTemplate(nav => $$"""
                    public virtual {{nav.GetOtherSideCsTypeName(true)}} {{nav.OtherSidePhysicalName}} { get; set; }{{nav.GetInitializerStatement()}}
                """)}}

                    /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
                    public bool {{KEYEQUALS}}({{CsClassName}} entity) {
                {{keys.SelectTextTemplate(col => $$"""
                        if (entity.{{col.PhysicalName}} != this.{{col.PhysicalName}}) return false;
                """)}}
                        return true;
                    }
                }

                partial class {{ApplicationConfigure.ABSTRACT_CLASS_CORE}} {
                    /// <summary>
                    /// テーブルやカラムの詳細を定義します。
                    /// 参考: "Fluent API" （Entity FrameWork Core の仕組み）
                    /// </summary>
                    public virtual void {{OnModelCreatingAutoGenerated}}({{ctx.Config.DbContextName}} dbContext, ModelBuilder modelBuilder) {
                {{If(sequences.Length > 0, () => $$"""
                        // シーケンスを定義
                {{sequences.SelectTextTemplate(col => $$"""
                        modelBuilder.HasSequence<int>("{{col.Member.SequenceName}}")
                            .StartsAt(1)
                            .IncrementsBy(1);
                """)}}

                """)}}
                        modelBuilder.Entity<{{CsClassName}}>(entity => {
                            entity.ToTable("{{_aggregate.DbName}}");

                            entity.HasKey(e => new {
                {{keys.SelectTextTemplate(col => $$"""
                                e.{{col.PhysicalName}},
                """)}}
                            })
                            .HasName("PK_{{_aggregate.DbName}}");

                {{columns.SelectTextTemplate((col, ix) => $$"""
                            entity.Property(e => e.{{col.PhysicalName}})
                                .HasColumnName("{{col.DbName}}")
                {{If(col.Member.TotalDigit != null, () => $$"""
                                .HasPrecision({{col.Member.TotalDigit}}, {{col.Member.DecimalPlace ?? 0}})
                """)}}
                {{If(col.Member.MaxLength != null, () => $$"""
                                .HasMaxLength({{col.Member.MaxLength}})
                """)}}
                                .IsRequired({{(col.IsKey || col.Member.IsRequired ? "true" : "false")}})
                                .HasColumnOrder({{ix}});
                """)}}
                            entity.Property(e => e.{{CREATED_AT}})
                                .HasColumnName("{{ctx.Config.CreatedAtDbColumnName.Replace("\"", "\\\"")}}")
                                .IsRequired(false)
                                .HasColumnOrder({{columns.Length + 0}});
                            entity.Property(e => e.{{CREATE_USER}})
                                .HasColumnName("{{ctx.Config.CreateUserDbColumnName.Replace("\"", "\\\"")}}")
                                .IsRequired(false)
                                .HasColumnOrder({{columns.Length + 1}});
                            entity.Property(e => e.{{UPDATED_AT}})
                                .HasColumnName("{{ctx.Config.UpdatedAtDbColumnName.Replace("\"", "\\\"")}}")
                                .IsRequired(false)
                                .HasColumnOrder({{columns.Length + 2}});
                            entity.Property(e => e.{{UPDATE_USER}})
                                .HasColumnName("{{ctx.Config.UpdateUserDbColumnName.Replace("\"", "\\\"")}}")
                                .IsRequired(false)
                                .HasColumnOrder({{columns.Length + 3}});
                {{If(HasVersionColumn, () => $$"""
                            entity.Property(e => e.{{VERSION}})
                                .HasColumnName("{{ctx.Config.VersionDbColumnName.Replace("\"", "\\\"")}}")
                                .IsRequired(true)
                                .IsConcurrencyToken(true)
                                .HasColumnOrder({{columns.Length + 4}});
                """)}}
                {{navigationsForConfiguringChildren.SelectTextTemplate(nav => $$"""

                            entity.{{(nav.Principal.OtherSideIsMany ? "HasMany" : "HasOne")}}(e => e.{{nav.Principal.OtherSidePhysicalName}})
                                .{{(nav.Relevant.OtherSideIsMany ? "WithMany" : "WithOne")}}(e => e.{{nav.Relevant.OtherSidePhysicalName}})
                                .HasForeignKey{{(nav.IsOneToOne ? $"<{nav.Relevant.GetOtherSideCsTypeName()}>" : "")}}(e => new {
                {{nav.GetRelevantForeignKeys().SelectTextTemplate(fk => $$"""
                                    e.{{fk.PhysicalName}},
                """)}}
                                })
                                .OnDelete({{nameof(DeleteBehavior)}}.{{nav.PrincipalDeletedBehavior}})
                                .HasConstraintName("{{nav.GetConstraintName().Replace("\"", "\\\"")}}");
                """)}}
                {{navigationsForConfigureRefTo.SelectTextTemplate(nav => $$"""

                            entity.HasOne(e => e.{{nav.Relevant.OtherSidePhysicalName}})
                                .{{(nav.Principal.OtherSideIsMany ? "WithMany" : "WithOne")}}(e => e.{{nav.Principal.OtherSidePhysicalName}})
                                .HasForeignKey{{(nav.IsOneToOne ? $"<{nav.Relevant.GetOtherSideCsTypeName()}>" : "")}}(e => new {
                {{nav.GetRelevantForeignKeys().SelectTextTemplate(fk => $$"""
                                    e.{{fk.PhysicalName}},
                """)}}
                                })
                                .OnDelete({{nameof(DeleteBehavior)}}.{{nav.PrincipalDeletedBehavior}})
                                .HasConstraintName("{{nav.GetConstraintName().Replace("\"", "\\\"")}}");
                """)}}

                            // 自動生成されない設定の手動定義（インデックス、ユニーク制約、デフォルト値など）
                            {{ON_MODEL_CREATING_CUSTOMIZE}}(entity);
                        });
                    }

                    /// <summary>
                    /// 自動生成されない初期設定がある場合はこのメソッドをオーバーライドして設定してください。
                    /// （インデックス、ユニーク制約、デフォルト値など）
                    /// </summary>
                    public virtual void {{ON_MODEL_CREATING_CUSTOMIZE}}(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<{{CsClassName}}> entity) {
                    }
                }
                """;
        }


        #region メンバー
        internal abstract class EFCoreEntityColumn {
            internal abstract ValueMember Member { get; }
            internal abstract string CsType { get; }
            internal abstract string PhysicalName { get; }
            internal abstract string DisplayName { get; }
            internal abstract string DbName { get; }
            internal abstract bool IsKey { get; }

            public override string ToString() {
                // デバッグ用
                return $"{DisplayName}({CsType})";
            }
        }
        /// <summary>
        /// 集約自身に定義されている属性で、テーブルに直接属するカラム
        /// </summary>
        internal class OwnColumnMember : EFCoreEntityColumn {
            internal OwnColumnMember(ValueMember member) {
                Member = member;
            }
            internal override ValueMember Member { get; }
            internal override string CsType => Member.Type.CsPrimitiveTypeName;
            internal override string PhysicalName => Member.PhysicalName;
            internal override string DisplayName => Member.DisplayName;
            internal override string DbName => Member.DbName;
            internal override bool IsKey => Member.IsKey;
        }
        /// <summary>
        /// 子テーブルに定義される、親テーブルの主キーを継承したカラム
        /// </summary>
        internal class ParentKeyMember : EFCoreEntityColumn {
            internal ParentKeyMember(ValueMember member) {
                Member = member;
            }
            internal override ValueMember Member { get; }
            internal override string CsType => Member.Type.CsPrimitiveTypeName;
            internal override string PhysicalName => $"Parent_{Member.PhysicalName}";
            internal override string DisplayName => Member.DisplayName;
            internal override string DbName => $"Parent_{Member.DbName}";
            internal override bool IsKey => true;
        }
        /// <summary>
        /// 外部参照がある場合の、参照先のキーを継承したカラム
        /// </summary>
        internal class RefKeyMember : EFCoreEntityColumn {
            internal RefKeyMember(RefToMember refEntry, ValueMember member) {
                RefEntry = refEntry;
                Member = member;
            }
            internal RefToMember RefEntry { get; }
            internal override ValueMember Member { get; }
            internal override string CsType => Member.Type.CsPrimitiveTypeName;
            internal override string PhysicalName => $"{RefEntry.PhysicalName}_{Member.PhysicalName}";
            internal override string DisplayName => Member.DisplayName;
            internal override string DbName => $"{RefEntry.PhysicalName}_{Member.DbName}";
            internal override bool IsKey => RefEntry.IsKey;
        }
        #endregion メンバー


        #region ナビゲーションプロパティ
        /// <summary>
        /// EFCoreのナビゲーションプロパティ
        /// </summary>
        internal abstract class NavigationProperty {
            internal abstract PrincipalOrRelevant Principal { get; }
            internal abstract PrincipalOrRelevant Relevant { get; }

            /// <summary>HasOneWithOneのときだけ設定時に型引数が必要らしいので</summary>
            internal bool IsOneToOne => !Principal.OtherSideIsMany && !Relevant.OtherSideIsMany;
            /// <summary>RDBMS上で主たるエンティティが削除されたときの挙動</summary>
            internal abstract DeleteBehavior PrincipalDeletedBehavior { get; }
            /// <summary>RDBMS上の制約の物理名</summary>
            internal abstract string GetConstraintName();
            /// <summary>外部キー項目を列挙</summary>
            internal abstract IEnumerable<EFCoreEntityColumn> GetRelevantForeignKeys();

            public override string ToString() {
                // デバッグ用
                return $"Principal = {Principal.ThisSide}, Relevant = {Relevant.ThisSide}";
            }
        }
        internal class PrincipalOrRelevant {
            internal required AggregateBase ThisSide { get; init; }
            internal required AggregateBase OtherSide { get; init; }
            internal required string OtherSidePhysicalName { get; init; }
            internal required bool OtherSideIsMany { get; init; }

            /// <summary>C#型名</summary>
            /// <param name="withNullable">末尾にNull許容演算子をつけるかどうか</param>
            internal string GetOtherSideCsTypeName(bool withNullable = false) {
                if (OtherSideIsMany) {
                    return $"ICollection<{new EFCoreEntity(OtherSide).CsClassName}>";
                } else {
                    return withNullable
                        ? $"{new EFCoreEntity(OtherSide).CsClassName}?"
                        : $"{new EFCoreEntity(OtherSide).CsClassName}";
                }
            }
            /// <summary>プロパティ初期化式</summary>
            internal string GetInitializerStatement() {
                if (OtherSideIsMany) {
                    return $" = [];";
                } else {
                    return string.Empty;
                }
            }

            public override string ToString() {
                // デバッグ用
                return $"({ThisSide.DisplayName}).{OtherSidePhysicalName}";
            }
        }

        /// <summary>
        /// 親子間のナビゲーションプロパティ
        /// </summary>
        internal class NavigationOfParentChild : NavigationProperty {
            internal NavigationOfParentChild(AggregateBase parent, AggregateBase child) {
                Principal = new() {
                    ThisSide = parent,
                    OtherSide = child,
                    OtherSideIsMany = child is ChildrenAggreagte,
                    OtherSidePhysicalName = child.PhysicalName,
                };
                Relevant = new() {
                    ThisSide = child,
                    OtherSide = parent,
                    OtherSideIsMany = false,
                    OtherSidePhysicalName = "Parent",
                };
            }
            internal override PrincipalOrRelevant Principal { get; }
            internal override PrincipalOrRelevant Relevant { get; }

            internal override DeleteBehavior PrincipalDeletedBehavior => DeleteBehavior.Cascade;

            internal override string GetConstraintName() {
                return $"FK_{Principal.ThisSide.DbName}_{Relevant.ThisSide.DbName}";
            }
            internal override IEnumerable<EFCoreEntityColumn> GetRelevantForeignKeys() {
                var child = new EFCoreEntity(Relevant.ThisSide);
                return child
                    .GetColumns()
                    .OfType<ParentKeyMember>();
            }
        }

        /// <summary>
        /// 外部参照のナビゲーションプロパティ
        /// </summary>
        internal class NavigationOfRef : NavigationProperty {
            public NavigationOfRef(RefToMember relation) {
                this.Relation = relation;

                Principal = new() {
                    ThisSide = relation.RefTo,
                    OtherSide = relation.Owner,
                    OtherSideIsMany = !relation.Owner.IsSingleKeyOf(relation.RefTo),
                    OtherSidePhysicalName = $"RefFrom{relation.Owner.PhysicalName}_{relation.PhysicalName}",
                };
                Relevant = new() {
                    ThisSide = relation.Owner,
                    OtherSide = relation.RefTo,
                    OtherSideIsMany = false,
                    OtherSidePhysicalName = relation.PhysicalName,
                };
            }
            internal RefToMember Relation { get; }

            internal override PrincipalOrRelevant Principal { get; }
            internal override PrincipalOrRelevant Relevant { get; }

            internal override DeleteBehavior PrincipalDeletedBehavior => DeleteBehavior.NoAction;

            internal override string GetConstraintName() {
                // 同じテーブルから同じテーブルへ複数の参照経路があるときのための物理名衝突回避用ハッシュ
                var hash = Relation.PhysicalName.ToHashedString().ToUpper().Substring(0, 8);

                return $"FK_{Principal.ThisSide.DbName}_{Relevant.ThisSide.DbName}_{hash}";
            }
            internal override IEnumerable<EFCoreEntityColumn> GetRelevantForeignKeys() {
                var refFrom = new EFCoreEntity(Relevant.ThisSide);
                return refFrom
                    .GetColumns()
                    .Where(col => col is RefKeyMember rm
                               && rm.RefEntry == Relation);
            }
        }
        #endregion ナビゲーションプロパティ
    }
}

namespace Nijo.Ver1.CodeGenerating {
    using Nijo.Ver1.Models.DataModelModules;

    partial class SchemaPathNodeExtensions {

        /// <summary>
        /// <see cref="GetFullPath(ISchemaPathNode)"/> の結果を <see cref="EFCoreEntity"/> のルールに沿ったパスとして返す
        /// </summary>
        public static IEnumerable<string> AsDbEntity(this IEnumerable<ISchemaPathNode> path) {
            var entry = path.FirstOrDefault()?.GetEntry();
            var isOutOfEntryTree = false;
            var isAncestorsMember = false;

            foreach (var node in path) {
                if (node == entry) continue;

                // 外部参照のナビゲーションプロパティを辿るパス
                if (node is RefToMember refTo) {
                    var previous = (AggregateBase?)node.PreviousNode ?? throw new InvalidOperationException("reftoの前は必ず参照元集約か参照先集約になるのでありえない");
                    var nav = new EFCoreEntity.NavigationOfRef(refTo);

                    // 参照元から参照先へ辿るパス
                    if (previous == refTo.Owner) {
                        yield return nav.Relevant.OtherSidePhysicalName;
                        isOutOfEntryTree = true;
                        continue;
                    }
                    // 参照先から参照元へ辿るパス
                    if (previous == refTo.RefTo) {
                        yield return nav.Principal.OtherSidePhysicalName;
                        continue;
                    }
                    throw new InvalidOperationException("reftoの前は必ず参照元集約か参照先集約になるのでありえない");
                }

                // 親子間のナビゲーションプロパティを辿るパス
                if (node is AggregateBase curr && node.PreviousNode is AggregateBase prev) {

                    // 子から親へ辿るパス
                    if (curr.IsParentOf(prev)) {
                        var nav = new EFCoreEntity.NavigationOfParentChild(curr, prev);
                        yield return nav.Relevant.OtherSidePhysicalName;
                        isAncestorsMember = true;
                        continue;
                    }
                    // 親から子へ辿るパス
                    if (curr.IsChildOf(prev)) {
                        var nav = new EFCoreEntity.NavigationOfParentChild(prev, curr);
                        yield return nav.Principal.OtherSidePhysicalName;
                        continue;
                    }
                    throw new InvalidOperationException("必ず 親→子, 子→親 のどちらかになるのでありえない");
                }

                // 末端のメンバー
                if (node is not ValueMember vm) throw new InvalidOperationException("この分岐まで来るケースは値の場合しか無いのでありえない");
                if (isOutOfEntryTree) {
                    var member = new EFCoreEntity.ParentKeyMember(vm);
                    yield return member.PhysicalName;

                } else if (isAncestorsMember) {
                    var member = new EFCoreEntity.ParentKeyMember(vm);
                    yield return member.PhysicalName;

                } else {
                    var member = new EFCoreEntity.OwnColumnMember(vm);
                    yield return member.PhysicalName;
                }
            }
        }

    }
}
