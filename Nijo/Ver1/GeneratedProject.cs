using Microsoft.Extensions.Logging;
using Nijo.Ver1.CodeGenerating;
using Nijo.Ver1.ImmutableSchema;
using Nijo.Ver1.Parts.Common;
using Nijo.Ver1.Parts.CSharp;
using Nijo.Ver1.Parts.JavaScript;
using Nijo.Ver1.SchemaParsing;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Nijo.Ver1 {
    /// <summary>
    /// 自動生成されるプロジェクトに対する操作を提供します。
    /// </summary>
    public class GeneratedProject {

        private const string XML_FILENAME = "nijo.xml";

        internal GeneratedProject(string projectRoot, ILogger logger) {
            ProjectRoot = projectRoot;
            _logger = logger;
        }

        private readonly ILogger _logger;

        public string ProjectRoot { get; }

        public string CoreLibraryRoot => Path.Combine(ProjectRoot, "core.AutoGenerated");
        public string CoreLibraryOverrideRoot => Path.Combine(ProjectRoot, "core");
        public string WebapiProjectRoot => Path.Combine(ProjectRoot, "webapi");
        public string ReactProjectRoot => Path.Combine(ProjectRoot, "react");
        public string UnitTestProjectRoot => Path.Combine(ProjectRoot, "Test");

        /// <summary>
        /// このプロジェクトのソースコード自動生成設定を返します。
        /// </summary>
        public CodeRenderingConfig GetConfig() {
            var xDocument = XDocument.Load(Path.Combine(ProjectRoot, XML_FILENAME));
            return new CodeRenderingConfig(xDocument);
        }

        /// <summary>
        /// スキーマ定義の検証を行ないます。
        /// </summary>
        public bool ValidateSchema() {
            var xDocument = XDocument.Load(Path.Combine(ProjectRoot, XML_FILENAME));
            var parseContext = SchemaParseContext.Default(xDocument);

            // 検証
            if (parseContext.TryBuildSchema(xDocument, out var _, out var errors)) {
                return true;

            } else {
                foreach (var err in errors) _logger.LogError("- {error}", err);
                return false;
            }
        }

        /// <summary>
        /// コード自動生成を実行します。
        /// </summary>
        internal void GenerateCode() {
            var xDocument = XDocument.Load(Path.Combine(ProjectRoot, XML_FILENAME));
            var parseContext = SchemaParseContext.Default(xDocument);

            // スキーマ定義のコレクションを作成
            if (!parseContext.TryBuildSchema(xDocument, out var immutableSchema, out var errors)) {
                _logger.LogError("エラーがある状態でソースコードの自動生成を行なうことはできません。");
                foreach (var err in errors) _logger.LogError("- {error}", err);
                return;
            }

            var ctx = new CodeRenderingContext(this, GetConfig(), parseContext, immutableSchema);

            _logger.LogInformation("ソース自動生成開始");

            // ルート集約毎のコードを生成
            foreach (var rootAggregate in immutableSchema.GetRootAggregates()) {
                _logger.LogInformation("レンダリング開始: {name}", rootAggregate.DisplayName);
                rootAggregate.Model.GenerateCode(ctx, rootAggregate);
            }

            // ルート集約と対応しないコードを生成
            foreach (var model in parseContext.Models.Values) {
                _logger.LogInformation("レンダリング開始: {name}", model.GetType().Name);
                model.GenerateCode(ctx);
            }

            // IMultiAggregateSourceFile が別の IMultiAggregateSourceFile に依存することがあるので、
            // すべて漏らさず確実に依存関係を登録させる。
            // ソース自動生成中で一度でも登場した IMultiAggregateSourceFile それぞれ必ず1回ずつ依存関係登録メソッドを呼ぶ
            var handled = new HashSet<IMultiAggregateSourceFile>();
            while (true) {
                var appeared = ctx.GetMultiAggregateSourceFiles();
                var unhandled = appeared.Where(src => !handled.Contains(src)).ToArray();

                if (unhandled.Length == 0) {
                    break; // 全ての IMultiAggregateSourceFile の依存関係登録メソッドが呼ばれたら終了
                }
                foreach (var src in unhandled) {
                    src.RegisterDependencies(ctx);
                    handled.Add(src);
                }
            }

            // スキーマ定義にかかわらず必ず生成されるモジュールの登録
            ctx.Use<ApplicationService>();
            ctx.Use<JsonUtil>();
            AspNetController.RegisterWebapiConfiguration(ctx);

            // 以降は IMultiAggregateSourceFile の新規登録不可
            ctx.StopUseMultiAggregateSourceFiles();

            // IMultiAggregateSourceFile のレンダリング実行
            foreach (var src in ctx.GetMultiAggregateSourceFiles()) {
                _logger.LogInformation("レンダリング開始: {name}", src.GetType().Name);
                src.Render(ctx);
            }

            // スキーマ定義にかかわらず必ず生成されるモジュールを生成する
            ctx.CoreLibrary(autoGenerated => {
                autoGenerated.Directory("Util", dir => {
                    dir.Generate(PresentationContext.RenderStaticCore(ctx));
                    dir.Generate(CharacterType.Render(ctx));
                    dir.Generate(FromTo.Render(ctx));
                });
            });
            ctx.WebapiProject(autoGenerated => {
                autoGenerated.Directory("Util", dir => {
                    dir.Generate(AspNetController.RenderAutoGeneratedEndpointAttribute(ctx));
                    dir.Generate(E_AutoGeneratedActionType.RenderDeclaring(ctx));
                });
            });
            ctx.UnitTestProject(autoGenerated => {
                autoGenerated.Generate(Parts.UnitTest.AutoGeneratedTest.Render(ctx));
                autoGenerated.Directory("Util", dir => {
                    dir.Generate(Parts.UnitTest.TestUtil.Render(ctx));
                });
            });
            ctx.ReactProject(autoGenerated => {
                autoGenerated.Directory("util", dir => {
                    dir.Generate(Models.QueryModelModules.UiConstraint.RenderCommonConstraint(ctx));
                });
            });

            // index.tsの生成
            ctx.ReactProject(autoGenerated => {
                autoGenerated.Directory("util", dir => {
                    IndexTs.Render(dir, ctx);
                });
            });

            // 生成されていないファイルやディレクトリを削除
            ctx.CleanUnhandledFilesAndDirectories();

            _logger.LogInformation("ソース自動生成終了");
        }
    }
}
