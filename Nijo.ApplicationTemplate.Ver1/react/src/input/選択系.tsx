import * as ReactHookForm from "react-hook-form"
import { CustomInputComponentProps } from "./base"
import { FieldErrorView } from "./FieldErrorView"
import { EnumTypeMap } from "../__autoGenerated/enum-defs"

/**
 * チェックボックスの入力フォーム
 */
export const CheckBox = <
  TField extends ReactHookForm.FieldValues,
  TPath extends ReactHookForm.FieldPathByValue<TField, boolean | undefined>
>(props: CustomInputComponentProps<boolean | undefined, TField, TPath>) => {
  return (
    <ReactHookForm.Controller
      control={props.control}
      name={props.name}
      rules={props.rules}
      render={({ field }) => (
        <div className={`flex flex-col ${props.className ?? ''}`}>
          <input
            type="checkbox"
            {...field}
            checked={field.value}
            onChange={(e) => field.onChange(e.target.checked)}
            className="border border-gray-300 p-1"
          />
          <FieldErrorView name={props.name} />
        </div>
      )}
    />
  )
}

/**
 * 列挙型の入力フォーム
 */
export const EnumSelect = <
  TField extends ReactHookForm.FieldValues,
  TEnumType extends keyof EnumTypeMap,
  TPath extends ReactHookForm.FieldPathByValue<TField, TEnumType | undefined>
>(props: CustomInputComponentProps<TEnumType | undefined, TField, TPath> & {
  type: TEnumType
}) => {
  return (
    <ReactHookForm.Controller
      control={props.control}
      name={props.name}
      rules={props.rules}
      render={({ field }) => (
        <div className={`flex flex-col ${props.className ?? ''}`}>
          <select
            {...field}
            className="border border-gray-300 p-1"
          >
          </select>
          <FieldErrorView name={props.name} />
        </div>
      )}
    />
  )
}