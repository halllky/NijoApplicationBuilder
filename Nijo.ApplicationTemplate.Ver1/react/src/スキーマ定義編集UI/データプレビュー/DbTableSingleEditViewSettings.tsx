import React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Icon from "@heroicons/react/24/outline"
import * as Input from "../../input"
import * as Layout from "../../layout"
import { EditableDbRecord, DbTableSingleItemEditor, ReloadTrigger, TableMetadataHelper } from "./types"
import useQueryEditorServerApi from "./useQueryEditorServerApi"
import { DataModelMetadata } from "../../__autoGenerated/util"
import useEvent from "react-use-event-hook"
import { DbTableEditorViewRef } from "./DbTableMultiEditorView"
import { useDbRecordGridColumnDef } from "./useDbRecordGridColumnDef"
import { UUID } from "uuidjs"
import { RecordStatusText } from "./RecordStatusText"
import { useEditorDesign } from "./useEditorDesign"
import { EditorDesignByAgggregate } from "./types"

export type DbTableSingleEditViewSettingsProps = {
  aggregate: DataModelMetadata.Aggregate
  initialSettings: EditorDesignByAgggregate
  onApply: (updatedSettings: EditorDesignByAgggregate) => void
  onCancel: () => void
}

/**
 * 集約の表示設定を編集するダイアログ
 */
export const DbTableSingleEditViewSettings = ({
  aggregate,
  initialSettings,
  onApply,
  onCancel,
}: DbTableSingleEditViewSettingsProps) => {
  const formMethods = ReactHookForm.useForm<EditorDesignByAgggregate>({
    defaultValues: initialSettings,
  })
  const { register, handleSubmit } = formMethods

  // キャンセル
  const handleCancel = useEvent(() => {
    onCancel()
  })

  // 適用
  const handleApply = useEvent((formData: EditorDesignByAgggregate) => {
    onApply(formData)
  })

  return (
    <Layout.ModalDialog
      open
      className="relative w-[60vw] max-w-md h-auto bg-white flex flex-col gap-1 relative border border-gray-400"
      onOutsideClick={handleCancel}
    >
      <ReactHookForm.FormProvider {...formMethods}>
        <form onSubmit={handleSubmit(handleApply)} className="flex flex-col">

          <h1 className="font-bold select-none text-gray-700 px-4 py-2 border-b border-gray-200">
            表示設定 - {aggregate.displayName}
          </h1>

          <div className="px-4 py-4 space-y-4">
            <div className="flex items-center gap-2">
              <label className="w-48 text-sm text-gray-500">ラベルの横幅</label>
              <input
                type="text"
                {...register('singleViewLabelWidth')}
                className="flex-1 px-2 py-1 border border-gray-400 text-sm"
                placeholder="10em"
              />
            </div>
          </div>

          <div className="flex justify-end items-center gap-2 py-2 px-4 border-t border-gray-200">
            <Input.IconButton onClick={handleCancel}>キャンセル</Input.IconButton>
            <Input.IconButton submit fill>適用</Input.IconButton>
          </div>
        </form>
      </ReactHookForm.FormProvider>
    </Layout.ModalDialog>
  )
}

// ------------------------------------