import React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Icon from "@heroicons/react/24/outline"
import * as Input from "../../../input"
import * as Layout from "../../../layout"
import { EditableDbRecord } from "../types"
import { DataModelMetadata } from "../../../__autoGenerated/util"
import useEvent from "react-use-event-hook"
import { useDbRecordGridColumnDef } from "../parts/useDbRecordGridColumnDef"
import { DataPreviewGlobalContext } from "../DataPreviewGlobalContext"
import { SingleViewContext, SingleViewFormType } from "./SingleView"
import { createNewInstance } from "../parts/createNewInstance"

/**
 * TODO: childrenの中にchildやchildrenがあるケースは未対応
 */
export const AggregateGridView = (props: {
  itemIndexInForm: number
  owner: EditableDbRecord | null
  ownerMetadata: DataModelMetadata.Aggregate
  childrenMetadata: DataModelMetadata.Aggregate
  ownerName: string
  ownerIsReadOnly: boolean
}) => {

  const {
    itemIndexInForm,
    childrenMetadata,
    ownerMetadata,
    ownerName,
  } = props

  const { control } = ReactHookForm.useFormContext<SingleViewFormType>()
  const {
    tableMetadataHelper,
    setNewItemsParentMap,
  } = React.useContext(SingleViewContext)

  const { fields, append, remove, update } = ReactHookForm.useFieldArray({ name: childrenMetadata.path, control })
  const gridRef = React.useRef<Layout.EditableGridRef<ReactHookForm.FieldArrayWithId<SingleViewFormType, string, "id">>>(null)

  const handleChangeRow: Layout.RowChangeEvent<ReactHookForm.FieldArrayWithId<SingleViewFormType, string, "id">> = useEvent(e => {
    for (const r of e.changedRows) {
      update(r.rowIndex, { ...r.newRow, changed: true })
    }
  })

  const { getColumnDefs, ForeignKeyReferenceDialog } = useDbRecordGridColumnDef(
    'single-view-children',
    childrenMetadata,
    tableMetadataHelper,
    update,
    'singleView',
    props.ownerIsReadOnly,
  )

  // グリッドの列幅の自動保存
  const { formState: { defaultValues: dataPreviewDefaultValues }, setValue: setDataPreviewValues } = React.useContext(DataPreviewGlobalContext)
  const gridColumnStorage: Layout.EditableGridAutoSaveStorage = React.useMemo(() => ({
    loadState: () => {
      return dataPreviewDefaultValues?.design?.[childrenMetadata.path]?.singleViewGridLayout ?? null
    },
    saveState: (gridState) => {
      setDataPreviewValues(`design.${childrenMetadata.path}.singleViewGridLayout`, gridState)
    },
  }), [dataPreviewDefaultValues, setDataPreviewValues, childrenMetadata.path])

  const handleAddRow = useEvent(() => {
    const newInstance = createNewInstance(childrenMetadata.tableName)
    append(newInstance)
    if (props.owner) {
      setNewItemsParentMap(prev => {
        prev.set(newInstance.uniqueId, props.owner!.uniqueId)
        return prev
      })
    }
  })

  const handleRemoveRow = useEvent(() => {
    const selectedRows = gridRef.current?.getSelectedRows() ?? []
    const removedItems: { row: EditableDbRecord, rowIndex: number }[] = []
    for (const item of selectedRows) {
      if (item.row.existsInDb) {
        update(item.rowIndex, { ...item.row, deleted: true })
      } else {
        removedItems.push(item)
      }
    }
    remove(removedItems.map(r => r.rowIndex))
    setNewItemsParentMap(prev => {
      for (const r of removedItems) prev.delete(r.row.uniqueId)
      return prev
    })
  })

  return (
    <div className="h-56 w-full flex flex-col gap-1 overflow-y-auto resize-y">
      <div className="flex flex-wrap items-center gap-1 py-px h-6">
        <span className="text-sm select-none text-gray-500">
          {childrenMetadata.displayName}
        </span>
        <div className="basis-2"></div>
        {!props.ownerIsReadOnly && (<>
          <Input.IconButton icon={Icon.PlusIcon} mini outline onClick={handleAddRow}>
            追加
          </Input.IconButton>
          <Input.IconButton icon={Icon.TrashIcon} mini outline onClick={handleRemoveRow}>
            削除
          </Input.IconButton>
        </>)}
      </div>
      <Layout.EditableGrid
        ref={gridRef}
        rows={fields}
        getColumnDefs={getColumnDefs as unknown as Layout.GetColumnDefsFunction<ReactHookForm.FieldArrayWithId<SingleViewFormType, string, "id">>}
        onChangeRow={handleChangeRow}
        storage={gridColumnStorage}
        isReadOnly={props.ownerIsReadOnly}
        className="flex-1 border border-gray-400"
      />
      {ForeignKeyReferenceDialog}
    </div>
  )
}
