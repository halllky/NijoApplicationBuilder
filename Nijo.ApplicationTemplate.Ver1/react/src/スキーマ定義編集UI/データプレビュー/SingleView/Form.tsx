import React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Icon from "@heroicons/react/24/outline"
import * as Input from "../../../input"
import * as Layout from "../../../layout"
import { EditableDbRecord, DbTableSingleItemEditor } from "../types"
import { DataModelMetadata } from "../../../__autoGenerated/util"
import useEvent from "react-use-event-hook"
import { UUID } from "uuidjs"
import { RecordStatusText } from "../parts/RecordStatusText"
import { SingleViewContext, SingleViewFormType } from "./SingleView"
import { AggregateMemberFormView } from "./FormMember"

/**
 * ルート集約、Child集約、子孫をもつChildren集約の編集を行う。
 */
export const AggregateFormView = (props: {
  itemIndexInDbRecordArray: number
  aggregate: DataModelMetadata.Aggregate
  /** 表示対象のレコードではなくその親 */
  owner: EditableDbRecord | null
  /** 親が読み取り専用の場合、子孫も読み取り専用にする */
  ownerIsReadOnly: boolean
  onChangeDefinition: ((dispatch: (prev: DbTableSingleItemEditor) => DbTableSingleItemEditor) => void) | undefined
}) => {

  const {
    itemIndexInDbRecordArray,
    aggregate,
    owner,
    ownerIsReadOnly,
    onChangeDefinition,
  } = props

  // ルート集約と子孫集約でルールが違う箇所が多いのでその判別用
  const thisIsChild = owner !== null

  const { control } = ReactHookForm.useFormContext<SingleViewFormType>()
  const { setNewItemsParentMap } = React.useContext(SingleViewContext)
  const { fields, append, update, remove } = ReactHookForm.useFieldArray({ name: aggregate.path, control })
  const record = fields[itemIndexInDbRecordArray] as EditableDbRecord | undefined

  const handleCreateRecord = useEvent(() => {
    const uniqueId = UUID.generate()
    append({
      uniqueId,
      tableName: aggregate.tableName,
      values: {},
      existsInDb: false,
      changed: false,
      deleted: false,
    })
    // これが子集約の場合は親との対応関係を登録
    if (thisIsChild) {
      setNewItemsParentMap(prev => {
        prev.set(uniqueId, owner.uniqueId)
        return prev
      })
    }
  })

  const handleDeleteRecord = useEvent(() => {
    if (!record) return;
    if (record.existsInDb) {
      update(itemIndexInDbRecordArray, { ...record, deleted: true })
    } else {
      remove(itemIndexInDbRecordArray)
      setNewItemsParentMap(prev => {
        prev.delete(record.uniqueId)
        return prev
      })
    }
  })

  const handleRestoreRecord = useEvent(() => {
    if (!record) return;
    update(itemIndexInDbRecordArray, { ...record, deleted: false })
  })

  const handleChangeRecord = useEvent((record: EditableDbRecord) => {
    update(itemIndexInDbRecordArray, { ...record, changed: true })
  })

  return (
    <div className={`flex flex-col gap-px ${aggregate.type === "root" ? "p-1" : ""} ${aggregate.type === "child" ? "my-4" : ""}`}>
      {aggregate.type !== "root" && (
        <div className="flex gap-1 items-center h-6">
          <span className="text-sm select-none text-gray-500">
            {aggregate.displayName}
          </span>
          <div className="basis-1"></div>
          <RecordStatusText record={record} className="text-sm" />
          <div className="flex-1"></div>
          {!ownerIsReadOnly && !record && (
            <Input.IconButton icon={Icon.PlusIcon} mini outline onClick={handleCreateRecord}>
              作成
            </Input.IconButton>
          )}
          {!ownerIsReadOnly && record && !record.deleted && (
            <Input.IconButton icon={Icon.TrashIcon} mini outline onClick={handleDeleteRecord}>
              削除
            </Input.IconButton>
          )}
          {!ownerIsReadOnly && record && record.deleted && (
            <Input.IconButton icon={Icon.ArrowUturnLeftIcon} mini outline onClick={handleRestoreRecord}>
              復元
            </Input.IconButton>
          )}
        </div>
      )}
      {(!thisIsChild || record) && aggregate.members.map((member, index) => (
        <AggregateMemberFormView
          key={member.physicalName}
          record={record}
          onChangeRecord={handleChangeRecord}
          owner={aggregate}
          member={member}
          nextMember={aggregate.members[index + 1]}
          ownerName={`${aggregate.path}.${itemIndexInDbRecordArray}`}
          ownerIsReadOnly={ownerIsReadOnly || record?.deleted === true}
        />
      ))}
    </div>
  )
}
