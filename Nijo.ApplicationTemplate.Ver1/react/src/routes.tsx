import React from "react"
import * as ReactRouter from "react-router-dom"
import MainLayout from "./layout/MainLayout"
import { getReflectionPages } from "./pages-reflection"
import { NijoUi } from "./スキーマ定義編集UI/NijoUi"
import { NijoUiDebugMenu } from "./スキーマ定義編集UI/デバッグメニュー/DebugMenu"
import { ContextProviders } from "./App"
import { PerspectivePage } from "./スキーマ定義編集UI/型つきドキュメント/PerspectivePage"
import * as Util from "./util"
import { NijoUiAggregateDiagram } from "./スキーマ定義編集UI/スキーマ定義編集"
import { DataPreview } from "./スキーマ定義編集UI/データプレビュー"

/** RouteObject に sideMenuLabel を追加した型 */
export type RouteObjectWithSideMenuSetting = ReactRouter.RouteObject & {
  /** この値がundefinedでないものは、サイドメニューに表示される。 */
  sideMenuLabel?: string
  children?: RouteObjectWithSideMenuSetting[]
}

// --------------------------------------------------------
/** 自動生成されたアプリケーションのデバッグのためのルーティング */
export const getRouterForAutoGeneratedApplication = (): ReactRouter.RouteObject & { children: RouteObjectWithSideMenuSetting[] } => {
  const pages: RouteObjectWithSideMenuSetting[] = []

  // // QueryModelの各種画面
  // pages.push(...getQueryModelRoutes())

  // リフレクションを用いて自動生成された画面
  pages.push(...getReflectionPages())

  return {
    path: "/",
    element: (
      <ContextProviders>
        <MainLayout />
      </ContextProviders>
    ),
    children: pages,
  }
}

// --------------------------------------------------------
// ここから下は、WindowsForms埋め込みアプリまたはそのデバッグ用の設定

/** WindowsForms埋め込みアプリまたはそのデバッグ用のルーティング */
export const getRouterForNijoUi = (): RouteObjectWithSideMenuSetting[] => {
  return [{
    path: '/nijo-ui',
    element: (
      <ContextProviders>
        <NijoUi />
      </ContextProviders>
    ),
    children: [{
      path: '',
      index: true,
      element: <div></div>,
    }, {
      path: `schema`,
      element: <NijoUiAggregateDiagram />,
    }, {
      path: 'debug-menu',
      element: <NijoUiDebugMenu />,
    }, {
      path: `typed-doc/perspective/:${NIJOUI_CLIENT_ROUTE_PARAMS.PERSPECTIVE_ID}`,
      element: <PerspectivePage />,
    }, {
      path: 'data-preview/:dataPreviewId',
      element: <DataPreview />,
    }, {
      path: '*',
      element: <div>Not Found</div>,
    }]
  }]
}

/** WindowsForms埋め込みアプリまたはそのデバッグ用のルーティングパラメーター */
export const NIJOUI_CLIENT_ROUTE_PARAMS = {
  /** @deprecated */
  AGGREGATE_ID: 'aggregateId',
  OUTLINER_ID: 'outlinerId',
  /** 型つきドキュメントの画面の表示に使われるID */
  PERSPECTIVE_ID: 'perspectiveId',
  /** 型つきドキュメントの画面の初期表示にフォーカスが当たるエンティティのID（クエリパラメータ） */
  FOCUS_ENTITY_ID: 'f',
}

/** WindowsForms埋め込みアプリまたはそのデバッグ用のナビゲーション用URLを取得する。 */
export const getNavigationUrl = (arg?:
  { aggregateId?: string, page?: never } |
  { aggregateId?: never, page: 'top-page' } |
  { aggregateId?: never, page: 'debug-menu' } |
  { aggregateId?: never, page: 'outliner', outlinerId: string } |
  { aggregateId?: never, page: 'typed-document-entity', entityTypeId: string } |
  { aggregateId?: never, page: 'typed-document-perspective', perspectiveId: string, focusEntityId?: string } |
  { aggregateId?: never, page: 'schema' } |
  { aggregateId?: never, page: 'data-preview', dataPreviewId: string }
): string => {
  if (arg?.page === 'top-page') {
    return '/nijo-ui'
  } else if (arg?.page === 'debug-menu') {
    return '/nijo-ui/debug-menu'
  } else if (arg?.page === 'outliner') {
    return `/nijo-ui/outliner/${arg.outlinerId}`
  } else if (arg?.page === 'typed-document-entity') {
    return `/nijo-ui/typed-doc/entity-type/${arg.entityTypeId}`
  } else if (arg?.page === 'typed-document-perspective') {
    const searchParams = new URLSearchParams()
    if (arg.focusEntityId) searchParams.set(NIJOUI_CLIENT_ROUTE_PARAMS.FOCUS_ENTITY_ID, arg.focusEntityId)
    return `/nijo-ui/typed-doc/perspective/${arg.perspectiveId}?${searchParams.toString()}`
  } else if (arg?.page === 'schema') {
    return `/nijo-ui/schema/`
  } else if (arg?.page === 'data-preview') {
    return `/nijo-ui/data-preview/${arg.dataPreviewId}`
  } else {
    return `/nijo-ui/schema/${arg?.aggregateId ?? ''}`
  }
}

/** WindowsForms埋め込みアプリまたはそのデバッグ用のデバッグ用サーバーのURL */
export const SERVER_DOMAIN = import.meta.env.DEV
  ? 'https://localhost:8081'
  : '';
