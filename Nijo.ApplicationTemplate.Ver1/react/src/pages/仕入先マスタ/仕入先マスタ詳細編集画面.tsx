import * as React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Input from "../../input"
import * as Layout from "../../layout"
import * as AutoGenerated from "../../__autoGenerated/仕入先マスタ"
import { useParams, useNavigate } from "react-router-dom"
import useEvent from "react-use-event-hook"

/**
 * 仕入先マスタデータ1件の詳細を閲覧・編集する画面。
 */
export const 仕入先マスタ詳細編集画面 = () => {
    const { id } = useParams<{ id: string }>()
    const navigate = useNavigate()
    const isNew = id === "new"

    // 読み込み状態
    const [isLoading, setIsLoading] = React.useState<boolean>(true)
    // エラーメッセージ
    const [errorMessage, setErrorMessage] = React.useState<string | null>(null)

    const methods = ReactHookForm.useForm<AutoGenerated.仕入先マスタDisplayData>()
    const { control, handleSubmit, reset } = methods

    // 仕入先データの取得と初期値設定
    React.useEffect(() => {
        const fetchData = async () => {
            setErrorMessage(null)
            setIsLoading(true);
            let initialData = AutoGenerated.createNew仕入先マスタDisplayData();

            if (!isNew && id) {
                try {
                    const response = await fetch(`/api/仕入先マスタ/${id}`)
                    if (!response.ok) {
                        if (response.status === 404) setErrorMessage("指定された仕入先が見つかりません。")
                        else setErrorMessage(`データの取得に失敗しました。(ステータス: ${response.status})`)
                    } else {
                        initialData = await response.json();
                    }
                } catch (error) {
                    console.error("データ取得エラー:", error)
                    setErrorMessage("データの取得中に予期せぬエラーが発生しました。")
                }
            }
            reset(initialData);
            setIsLoading(false);
        }
        fetchData()
    }, [id, isNew, reset])

    // データ保存処理
    const onSubmit = useEvent(async (data: AutoGenerated.仕入先マスタDisplayData) => {
        setErrorMessage(null)
        setIsLoading(true);
        try {
            const method = isNew ? "POST" : "PUT"
            const url = isNew ? "/api/仕入先マスタ" : `/api/仕入先マスタ/${id}`
            const body = JSON.stringify(data);
            const response = await fetch(url, {
                method,
                headers: { "Content-Type": "application/json" },
                body: body,
            })
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}))
                const message = errorData.message || `保存に失敗しました。(ステータス: ${response.status})`
                setErrorMessage(message)
                console.error("保存エラー:", errorData)
                throw new Error(message)
            }
            navigate("/仕入先マスタ") // 仮に一覧画面のパスを /仕入先マスタ とする
        } catch (error) {
            console.error("保存処理エラー:", error)
            if (!errorMessage) setErrorMessage("保存中に予期せぬエラーが発生しました。")
        } finally {
            setIsLoading(false);
        }
    })

    return (
        <Layout.PageFrame
            headerContent={(
                <>
                    <Input.IconButton fill onClick={(e) => { if (!isLoading) handleSubmit(onSubmit)(e); }}>
                        保存
                    </Input.IconButton>
                    <Input.IconButton fill onClick={() => { if (!isLoading) navigate(-1); }}>
                        キャンセル
                    </Input.IconButton>
                </>
            )}
        >
            {isLoading ? (
                <div className="flex justify-center items-center h-64">読み込み中...</div>
            ) : errorMessage ? (
                <div className="m-4 p-4 border border-red-400 bg-red-100 text-red-700 rounded">
                    <p>エラー: {errorMessage}</p>
                    <button onClick={() => navigate(-1)} className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700">戻る</button>
                </div>
            ) : (
                <ReactHookForm.FormProvider {...methods}>
                    <Layout.VForm3.Root>
                        <Layout.VForm3.BreakPoint>
                            <Layout.VForm3.Item label="仕入先ID" required={AutoGenerated.仕入先マスタConstraints.values.仕入先ID.required}>
                                <Input.Word name="values.仕入先ID" control={control} readOnly={!isNew}
                                    rules={{
                                        required: "仕入先IDは必須です。",
                                        maxLength: { value: AutoGenerated.仕入先マスタConstraints.values.仕入先ID.maxLength!, message: `仕入先IDは${AutoGenerated.仕入先マスタConstraints.values.仕入先ID.maxLength}文字以内` }
                                    }} />
                            </Layout.VForm3.Item>

                            <Layout.VForm3.Item label="仕入先名" required={AutoGenerated.仕入先マスタConstraints.values.仕入先名.required}>
                                <Input.Word name="values.仕入先名" control={control}
                                    rules={{
                                        required: AutoGenerated.仕入先マスタConstraints.values.仕入先名.required ? "仕入先名は必須です。" : undefined,
                                        maxLength: { value: AutoGenerated.仕入先マスタConstraints.values.仕入先名.maxLength!, message: `仕入先名は${AutoGenerated.仕入先マスタConstraints.values.仕入先名.maxLength}文字以内` }
                                    }} />
                            </Layout.VForm3.Item>

                            <Layout.VForm3.Item label="担当者名" required={AutoGenerated.仕入先マスタConstraints.values.担当者名.required}>
                                <Input.Word name="values.担当者名" control={control}
                                    rules={{
                                        required: AutoGenerated.仕入先マスタConstraints.values.担当者名.required ? "担当者名は必須です。" : undefined,
                                        maxLength: { value: AutoGenerated.仕入先マスタConstraints.values.担当者名.maxLength!, message: `担当者名は${AutoGenerated.仕入先マスタConstraints.values.担当者名.maxLength}文字以内` }
                                    }} />
                            </Layout.VForm3.Item>

                            <Layout.VForm3.Item label="電話番号" required={AutoGenerated.仕入先マスタConstraints.values.電話番号.required}>
                                <Input.Word name="values.電話番号" control={control}
                                    rules={{
                                        required: AutoGenerated.仕入先マスタConstraints.values.電話番号.required ? "電話番号は必須です。" : undefined,
                                        maxLength: { value: AutoGenerated.仕入先マスタConstraints.values.電話番号.maxLength!, message: `電話番号は${AutoGenerated.仕入先マスタConstraints.values.電話番号.maxLength}文字以内` },
                                        // pattern: { value: /^[0-9-]+$/, message: "電話番号の形式が正しくありません。" } // 必要に応じてパターン追加
                                    }} />
                            </Layout.VForm3.Item>

                            <Layout.VForm3.Item label="メールアドレス" required={AutoGenerated.仕入先マスタConstraints.values.メールアドレス.required}>
                                <Input.Word name="values.メールアドレス" control={control}
                                    rules={{
                                        required: AutoGenerated.仕入先マスタConstraints.values.メールアドレス.required ? "メールアドレスは必須です。" : undefined,
                                        maxLength: { value: AutoGenerated.仕入先マスタConstraints.values.メールアドレス.maxLength!, message: `メールアドレスは${AutoGenerated.仕入先マスタConstraints.values.メールアドレス.maxLength}文字以内` },
                                        pattern: { value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i, message: "メールアドレスの形式が正しくありません。" }
                                    }} />
                            </Layout.VForm3.Item>

                        </Layout.VForm3.BreakPoint>
                    </Layout.VForm3.Root>
                </ReactHookForm.FormProvider>
            )}
        </Layout.PageFrame>
    )
}
