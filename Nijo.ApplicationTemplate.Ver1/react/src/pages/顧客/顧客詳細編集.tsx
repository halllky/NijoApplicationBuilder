import * as React from "react"
import { useParams, useNavigate } from "react-router-dom"
import * as Input from "../../input"
import { PageFrame, PageFrameTitle } from "../../layout/PageFrame"
import { VForm3 } from "../../layout"
import { useForm, FormProvider } from "react-hook-form"
import { LoadFeature, BatchUpdateFeature } from "../../__autoGenerated"
import { 顧客DisplayData, createNew顧客DisplayData } from "../../__autoGenerated/顧客"
import * as Util from "../../util"

// useState のインポート
const { useState } = React

export const 顧客詳細編集 = () => {
  // URLパラメータから顧客IDを取得
  const { 顧客ID } = useParams<{ 顧客ID?: string }>()
  const navigate = useNavigate()

  // ローディング状態
  const [isLoading, setIsLoading] = useState(true)
  // 顧客データ
  const [顧客データ, set顧客データ] = useState<顧客DisplayData | null>(null)
  // 保存中状態
  const [isSaving, setIsSaving] = useState(false)
  // 削除中状態
  const [isDeleting, setIsDeleting] = useState(false)

  // フォーム定義
  const formMethods = useForm<顧客DisplayData>({
    defaultValues: React.useMemo(() => createNew顧客DisplayData(), [])
  })

  const { reset, handleSubmit, control, formState: { isDirty } } = formMethods
  const { complexPost } = Util.useHttpRequest()

  // 初期データ読み込み
  React.useEffect(() => {
    const loadData = async () => {
      if (!顧客ID) {
        // 新規作成モードの場合は読み込み完了
        setIsLoading(false)
        return
      }

      try {
        setIsLoading(true)
        // キー項目で検索
        const result = await complexPost<LoadFeature.ReturnType["顧客"]>(
          LoadFeature.Endpoint["顧客"],
          {
            filter: { 顧客ID },
            skip: 0,
            take: 1
          }
        )

        if (result?.currentPageItems && result.currentPageItems.length > 0) {
          const data = result.currentPageItems[0]
          set顧客データ(data)
          reset(data) // フォームに値をセット
        }
      } catch (error) {
        console.error("データ読み込みエラー:", error)
        alert("データの読み込みに失敗しました")
      } finally {
        setIsLoading(false)
      }
    }

    loadData()
  }, [顧客ID, reset, complexPost])

  // 保存処理
  const handleSave = handleSubmit(async (data) => {
    try {
      setIsSaving(true)
      // 新規作成か更新かを判断
      const isNew = !顧客ID

      // BatchUpdateFeatureを使用したデータ更新
      const requestData = {
        // 挿入または更新するデータの配列
        upserts: [data],
        // 削除するデータの配列（更新の場合は空配列）
        deletes: []
      }

      // バッチ更新APIを呼び出す
      await complexPost(
        BatchUpdateFeature.Endpoint["顧客"],
        requestData
      )

      alert(isNew ? "登録しました" : "更新しました")

      // 一覧画面に戻る
      navigate("/顧客")
    } catch (error) {
      console.error("保存エラー:", error)
      alert("保存に失敗しました")
    } finally {
      setIsSaving(false)
    }
  })

  // 削除処理
  const handleDelete = async () => {
    if (!顧客ID || !顧客データ) return

    if (!confirm("このデータを削除してもよろしいですか？")) return

    try {
      setIsDeleting(true)

      // BatchUpdateFeatureを使用して削除
      const requestData = {
        upserts: [],
        deletes: [{ 顧客ID: 顧客データ.values.顧客ID }]
      }

      await complexPost(
        BatchUpdateFeature.Endpoint["顧客"],
        requestData
      )

      alert("削除しました")

      // 一覧画面に戻る
      navigate("/顧客")
    } catch (error) {
      console.error("削除エラー:", error)
      alert("削除に失敗しました")
    } finally {
      setIsDeleting(false)
    }
  }

  // キャンセル処理
  const handleCancel = () => {
    if (isDirty && !confirm("変更内容が保存されていません。キャンセルしますか？")) {
      return
    }

    navigate("/顧客")
  }

  return (
    <PageFrame headerContent={(
      <>
        <PageFrameTitle>
          {顧客ID ? "顧客詳細編集" : "顧客新規登録"}
        </PageFrameTitle>
        <div className="flex-1"></div>
        <button
          onClick={handleCancel}
          className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 mr-2"
        >
          キャンセル
        </button>
        {顧客ID && (
          <button
            onClick={handleDelete}
            disabled={isDeleting || isLoading}
            className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 mr-2"
          >
            {isDeleting ? "削除中..." : "削除"}
          </button>
        )}
        <button
          onClick={handleSave}
          disabled={isSaving || isLoading}
          className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          {isSaving ? "保存中..." : "保存"}
        </button>
      </>
    )}>
      <div className="p-4">
        {isLoading ? (
          <div className="text-center p-4">読み込み中...</div>
        ) : (
          <FormProvider {...formMethods}>
            <VForm3.Root labelWidth="8rem">
              <VForm3.BreakPoint>
                <VForm3.Item label="顧客ID">
                  <Input.Word
                    name="values.顧客ID"
                    control={control as any}
                  />
                </VForm3.Item>
                <VForm3.Item label="顧客名">
                  <Input.Word
                    name="values.顧客名"
                    control={control as any}
                  />
                </VForm3.Item>
                <VForm3.Item label="生年月日">
                  <Input.DateInput
                    name="values.生年月日"
                    control={control as any}
                  />
                </VForm3.Item>
                <VForm3.Item label="年齢">
                  <Input.NumberInput
                    name="values.年齢"
                    control={control as any}
                  />
                </VForm3.Item>
              </VForm3.BreakPoint>
              <VForm3.BreakPoint label="住所">
                <VForm3.Item label="都道府県">
                  <Input.Word
                    name="住所.values.都道府県"
                    control={control as any}
                  />
                </VForm3.Item>
                <VForm3.Item label="市町村">
                  <Input.Word
                    name="住所.values.市町村"
                    control={control as any}
                  />
                </VForm3.Item>
                <VForm3.Item label="番地以降">
                  <Input.Word
                    name="住所.values.番地以降"
                    control={control as any}
                  />
                </VForm3.Item>
              </VForm3.BreakPoint>
              <VForm3.BreakPoint>
                <VForm3.Item label="備考">
                  <Input.Word
                    name="values.備考"
                    control={control as any}
                  />
                </VForm3.Item>
              </VForm3.BreakPoint>
            </VForm3.Root>
          </FormProvider>
        )}
      </div>
    </PageFrame>
  )
}
