import * as React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Input from "../../input"
import * as Layout from "../../layout"
import * as AutoGenerated from "../../__autoGenerated/従業員マスタ"
import * as EnumDefs from "../../__autoGenerated/enum-defs"
import * as 部署AutoGenerated from "../../__autoGenerated/部署"
import { useParams, useNavigate } from "react-router-dom"
import useEvent from "react-use-event-hook"
// import { useDataSelectorDialog } from "../../parts/DataSelectorDialog" // 未実装

/**
 * 従業員マスタデータ1件の詳細を閲覧・編集する画面。
 */
export const 従業員マスタ詳細編集画面 = () => {
    const { id } = useParams<{ id: string }>()
    const navigate = useNavigate()
    const isNew = id === "new"

    const [isLoading, setIsLoading] = React.useState<boolean>(true)
    const [errorMessage, setErrorMessage] = React.useState<string | null>(null)

    const methods = ReactHookForm.useForm<AutoGenerated.従業員マスタDisplayData>()
    const {
        control, handleSubmit, reset, setValue, watch, register,
        formState: { errors }
    } = methods

    // --- Row Selection States for Grids ---
    const [所属部署RowSelection, set所属部署RowSelection] = React.useState<Record<string, boolean>>({});
    const [権限RowSelection, set権限RowSelection] = React.useState<Record<string, boolean>>({});

    // --- Field Arrays ---
    const { fields: 所属部署Fields, append: append所属部署, remove: remove所属部署 } =
        ReactHookForm.useFieldArray({ control, name: "所属部署" });
    const { fields: 権限Fields, append: append権限, remove: remove権限 } =
        ReactHookForm.useFieldArray({ control, name: "権限" });

    // --- Data Selector Dialogs (未実装のためコメントアウト) ---
    // const { showDialog: show部署Dialog, dialogElement: 部署Dialog } = useDataSelectorDialog<部署AutoGenerated.部署RefTarget>(...);

    // --- 権限レベル選択肢 --- (enum-defs.tsにはOptions生成関数がないため直接定義)
    const 権限レベルOptions: { value: EnumDefs.権限レベル, label: string }[] = [
        { value: '管理者', label: '管理者' },
        { value: '一般', label: '一般' },
    ];

    // --- Data Fetching ---
    React.useEffect(() => {
        const fetchData = async () => {
            setErrorMessage(null)
            setIsLoading(true);
            let initialData = AutoGenerated.createNew従業員マスタDisplayData(); // 空データで初期化

            if (!isNew && id) {
                try {
                    const response = await fetch(`/api/従業員マスタ/${id}`)
                    if (!response.ok) {
                        if (response.status === 404) setErrorMessage("指定された従業員が見つかりません。")
                        else setErrorMessage(`データの取得に失敗しました。(ステータス: ${response.status})`)
                    } else {
                        initialData = await response.json();
                    }
                } catch (error) {
                    console.error("データ取得エラー:", error)
                    setErrorMessage("データの取得中に予期せぬエラーが発生しました。")
                }
            }
            // ネストされた配列の初期値保証
            if (!initialData.所属部署) initialData.所属部署 = [];
            if (!initialData.権限) initialData.権限 = [];

            reset(initialData);
            setIsLoading(false);
        }
        fetchData()
    }, [id, isNew, reset])

    // --- Submit Handler ---
    const onSubmit = useEvent(async (data: AutoGenerated.従業員マスタDisplayData) => {
        setErrorMessage(null)
        setIsLoading(true);
        try {
            const method = isNew ? "POST" : "PUT"
            const url = isNew ? "/api/従業員マスタ" : `/api/従業員マスタ/${id}`

            // TODO: API仕様に合わせて送信データを整形 (RefのID化など)
            const submitData = {
                ...data,
                所属部署: data.所属部署.map(shozoku => ({
                    ...shozoku,
                    values: {
                        ...shozoku.values,
                        部署: shozoku.values.部署?.部署コード ? { 部署コード: shozoku.values.部署.部署コード } : undefined
                    }
                }))
            };
            const body = JSON.stringify(submitData);

            const response = await fetch(url, {
                method,
                headers: { "Content-Type": "application/json" },
                body: body,
            })
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}))
                const message = errorData.message || `保存に失敗しました。(ステータス: ${response.status})`
                setErrorMessage(message)
                console.error("保存エラー:", errorData)
                throw new Error(message)
            }
            navigate("/従業員マスタ") // 仮に一覧画面のパスを /従業員マスタ とする
        } catch (error) {
            console.error("保存処理エラー:", error)
            if (!errorMessage) setErrorMessage("保存中に予期せぬエラーが発生しました。")
        } finally {
            setIsLoading(false);
        }
    })

    // --- Editable Grid Refs ---
    const 所属部署GridRef = React.useRef<Layout.EditableGridRef<ReactHookForm.FieldArrayWithId<AutoGenerated.従業員マスタDisplayData, "所属部署", "id">>>(null);
    const 権限GridRef = React.useRef<Layout.EditableGridRef<ReactHookForm.FieldArrayWithId<AutoGenerated.従業員マスタDisplayData, "権限", "id">>>(null);

    // --- Column Defs ---
    const get所属部署ColumnDefs: Layout.GetColumnDefsFunction<ReactHookForm.FieldArrayWithId<AutoGenerated.従業員マスタDisplayData, "所属部署", "id">> = React.useCallback(cellType => [
        cellType.number("values.年度", "年度", { editable: true, required: true }),
        // cellType.reference("values.部署", "部署", { fetchPath: "/api/部署", getDisplayValue: item => item.部署名, editable: true, required: true }), // Dialog未実装
        cellType.text("values.部署.部署コード", "部署コード", { editable: true, required: true }), // 代替
    ], []);

    // 権限レベルの選択肢
    // const 権限レベルOptions = EnumDefs.get権限レベルOptionList(); // 関数が存在しないため削除

    const get権限ColumnDefs: Layout.GetColumnDefsFunction<ReactHookForm.FieldArrayWithId<AutoGenerated.従業員マスタDisplayData, "権限", "id">> = React.useCallback(cellType => [
        // cellType.select("values.権限レベル", "権限レベル", { options: 権限レベルOptions, editable: true, required: true }), // Select未実装
        // 代替: 標準selectを使用 (EditableGrid内で使うのは難しいので一旦テキスト表示のみ)
        cellType.text("values.権限レベル", "権限レベル", { editable: false, required: true }), // ← 編集不可テキストとして表示
        // TODO: EditableGrid内でSelectを使う方法を検討する
        //       (カスタムセルレンダラー/エディターをEditableGridに実装する必要あり)
    ], []);

    return (
        <Layout.PageFrame
            headerContent={(
                <>
                    <Input.IconButton fill onClick={(e) => { if (!isLoading) handleSubmit(onSubmit)(e); }}>保存</Input.IconButton>
                    <Input.IconButton fill onClick={() => { if (!isLoading) navigate(-1); }}>キャンセル</Input.IconButton>
                </>
            )}
        >
            {isLoading ? (
                <div className="flex justify-center items-center h-64">読み込み中...</div>
            ) : errorMessage ? (
                <div className="m-4 p-4 border border-red-400 bg-red-100 text-red-700 rounded">
                    <p>エラー: {errorMessage}</p>
                    <button onClick={() => navigate(-1)} className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700">戻る</button>
                </div>
            ) : (
                <ReactHookForm.FormProvider {...methods}>
                    <Layout.VForm3.Root>
                        {/* --- 基本情報 --- */}
                        <Layout.VForm3.BreakPoint>
                            <Layout.VForm3.Item label="従業員ID" required={AutoGenerated.従業員マスタConstraints.values.従業員ID.required}>
                                <Input.Word name="values.従業員ID" control={control} readOnly={!isNew}
                                    rules={{ required: "必須" }} />
                            </Layout.VForm3.Item>
                            <Layout.VForm3.Item label="氏名" required={AutoGenerated.従業員マスタConstraints.values.氏名.required}>
                                <Input.Word name="values.氏名" control={control}
                                    rules={{ required: "必須", maxLength: { value: 40, message: "40文字以内" } }} />
                            </Layout.VForm3.Item>
                            <Layout.VForm3.Item label="氏名カナ" required={AutoGenerated.従業員マスタConstraints.values.氏名カナ.required}>
                                <Input.Word name="values.氏名カナ" control={control}
                                    rules={{ maxLength: { value: 40, message: "40文字以内" } }} />
                            </Layout.VForm3.Item>
                            <Layout.VForm3.Item label="退職日" required={AutoGenerated.従業員マスタConstraints.values.退職日.required}>
                                <Input.DateInput name="values.退職日" control={control} />
                            </Layout.VForm3.Item>
                        </Layout.VForm3.BreakPoint>

                        {/* --- 所属部署 (Editable Grid) --- */}
                        <Layout.VForm3.FullWidthItem label={(
                            <div className="flex flex-row items-center">
                                <div>所属部署</div>
                                <div className="basis-4"></div>
                                <Input.IconButton fill onClick={() => append所属部署(AutoGenerated.createNew所属部署DisplayData())}>追加</Input.IconButton>
                                <Input.IconButton fill onClick={() => {
                                    const selected = 所属部署GridRef.current?.getSelectedRows();
                                    if (selected) remove所属部署(selected.map(r => r.rowIndex));
                                }}>削除</Input.IconButton>
                            </div>
                        )}>
                            <Layout.EditableGrid
                                ref={所属部署GridRef}
                                rows={所属部署Fields}
                                getColumnDefs={get所属部署ColumnDefs}
                                rowSelection={所属部署RowSelection}
                                onRowSelectionChange={set所属部署RowSelection}
                                onChangeCell={(rowIndex, fieldName, value) => {
                                    // @ts-ignore setValueの型エラー抑制
                                    setValue(`所属部署.${rowIndex}.${fieldName}`, value);
                                }}
                            />
                        </Layout.VForm3.FullWidthItem>

                        {/* --- 権限 (Editable Grid) --- */}
                        <Layout.VForm3.FullWidthItem label={(
                            <div className="flex flex-row items-center">
                                <div>権限</div>
                                <div className="basis-4"></div>
                                <Input.IconButton fill onClick={() => append権限(AutoGenerated.createNew権限DisplayData())}>追加</Input.IconButton>
                                <Input.IconButton fill onClick={() => {
                                    const selected = 権限GridRef.current?.getSelectedRows();
                                    if (selected) remove権限(selected.map(r => r.rowIndex));
                                }}>削除</Input.IconButton>
                            </div>
                        )}>
                            <Layout.EditableGrid
                                ref={権限GridRef}
                                rows={権限Fields}
                                getColumnDefs={get権限ColumnDefs}
                                rowSelection={権限RowSelection}
                                onRowSelectionChange={set権限RowSelection}
                                onChangeCell={(rowIndex, fieldName, value) => {
                                    // 権限レベルは現状編集不可のため、onChangeCellは呼ばれないはずだが念のため
                                    // @ts-ignore setValueの型エラー抑制
                                    setValue(`権限.${rowIndex}.${fieldName}`, value);
                                }}
                            />
                        </Layout.VForm3.FullWidthItem>

                    </Layout.VForm3.Root>
                </ReactHookForm.FormProvider>
            )}
            {/* ダイアログ要素 (未実装) */}
        </Layout.PageFrame>
    )
}
