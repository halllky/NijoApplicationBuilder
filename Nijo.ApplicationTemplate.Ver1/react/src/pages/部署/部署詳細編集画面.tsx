import * as React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Input from "../../input"
import * as Layout from "../../layout"
import * as AutoGenerated from "../../__autoGenerated/部署"
import { useParams, useNavigate } from "react-router-dom"
import useEvent from "react-use-event-hook"

/**
 * 部署データ1件の詳細を閲覧・編集する画面。
 */
export const 部署詳細編集画面 = () => {
    const { id } = useParams<{ id: string }>() // id は部署コード
    const navigate = useNavigate()
    const isNew = id === "new"

    // 読み込み状態
    const [isLoading, setIsLoading] = React.useState<boolean>(true)
    // エラーメッセージ
    const [errorMessage, setErrorMessage] = React.useState<string | null>(null)

    const methods = ReactHookForm.useForm<AutoGenerated.部署DisplayData>()
    const { control, handleSubmit, reset } = methods

    // 部署データの取得と初期値設定
    React.useEffect(() => {
        const fetchData = async () => {
            setErrorMessage(null)
            setIsLoading(true);
            let initialData = AutoGenerated.createNew部署DisplayData();

            if (!isNew && id) {
                try {
                    const response = await fetch(`/api/部署/${id}`)
                    if (!response.ok) {
                        if (response.status === 404) setErrorMessage("指定された部署が見つかりません。")
                        else setErrorMessage(`データの取得に失敗しました。(ステータス: ${response.status})`)
                    } else {
                        initialData = await response.json();
                    }
                } catch (error) {
                    console.error("データ取得エラー:", error)
                    setErrorMessage("データの取得中に予期せぬエラーが発生しました。")
                }
            }
            reset(initialData);
            setIsLoading(false);
        }
        fetchData()
    }, [id, isNew, reset])

    // データ保存処理
    const onSubmit = useEvent(async (data: AutoGenerated.部署DisplayData) => {
        setErrorMessage(null)
        setIsLoading(true);
        try {
            const method = isNew ? "POST" : "PUT"
            const url = isNew ? "/api/部署" : `/api/部署/${id}`
            const body = JSON.stringify(data);
            const response = await fetch(url, {
                method,
                headers: { "Content-Type": "application/json" },
                body: body,
            })
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}))
                const message = errorData.message || `保存に失敗しました。(ステータス: ${response.status})`
                setErrorMessage(message)
                console.error("保存エラー:", errorData)
                throw new Error(message)
            }
            navigate("/部署") // 仮に一覧画面のパスを /部署 とする
        } catch (error) {
            console.error("保存処理エラー:", error)
            if (!errorMessage) setErrorMessage("保存中に予期せぬエラーが発生しました。")
        } finally {
            setIsLoading(false);
        }
    })

    return (
        <Layout.PageFrame
            headerContent={(
                <>
                    <Input.IconButton fill onClick={(e) => { if (!isLoading) handleSubmit(onSubmit)(e); }}>
                        保存
                    </Input.IconButton>
                    <Input.IconButton fill onClick={() => { if (!isLoading) navigate(-1); }}>
                        キャンセル
                    </Input.IconButton>
                </>
            )}
        >
            {isLoading ? (
                <div className="flex justify-center items-center h-64">読み込み中...</div>
            ) : errorMessage ? (
                <div className="m-4 p-4 border border-red-400 bg-red-100 text-red-700 rounded">
                    <p>エラー: {errorMessage}</p>
                    <button onClick={() => navigate(-1)} className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700">戻る</button>
                </div>
            ) : (
                <ReactHookForm.FormProvider {...methods}>
                    <Layout.VForm3.Root>
                        <Layout.VForm3.BreakPoint>
                            <Layout.VForm3.Item label="部署コード" required={AutoGenerated.部署Constraints.values.部署コード.required}>
                                <Input.Word name="values.部署コード" control={control} readOnly={!isNew}
                                    rules={{
                                        required: "部署コードは必須です。",
                                        maxLength: { value: AutoGenerated.部署Constraints.values.部署コード.maxLength!, message: `部署コードは${AutoGenerated.部署Constraints.values.部署コード.maxLength}文字以内` }
                                    }} />
                            </Layout.VForm3.Item>

                            <Layout.VForm3.Item label="部署名" required={AutoGenerated.部署Constraints.values.部署名.required}>
                                <Input.Word name="values.部署名" control={control}
                                    rules={{
                                        required: AutoGenerated.部署Constraints.values.部署名.required ? "部署名は必須です。" : undefined,
                                        maxLength: { value: AutoGenerated.部署Constraints.values.部署名.maxLength!, message: `部署名は${AutoGenerated.部署Constraints.values.部署名.maxLength}文字以内` }
                                    }} />
                            </Layout.VForm3.Item>
                        </Layout.VForm3.BreakPoint>
                    </Layout.VForm3.Root>
                </ReactHookForm.FormProvider>
            )}
        </Layout.PageFrame>
    )
}
