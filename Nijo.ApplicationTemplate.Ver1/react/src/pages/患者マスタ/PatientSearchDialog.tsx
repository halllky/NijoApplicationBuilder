import React from "react"
import useEvent from "react-use-event-hook"
import * as ReactRouter from "react-router-dom"
import * as ReactHookForm from "react-hook-form"
import * as Icon from "@heroicons/react/24/solid"
import * as AutoGenerated from "../../__autoGenerated"
import * as Input from "../../input"
import * as Layout from "../../layout"
import * as Util from "../../util"
import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels"
import { LoadReturnType } from "../../__autoGenerated/util"
import { 患者マスタSearchCondition, createNew患者マスタSearchCondition, 患者マスタRefTarget } from "../../__autoGenerated/患者マスタ"

/**
 * 患者検索ダイアログ
 */
export const PatientSearchDialog = (props: {
  onSelect: (selectedItem: 患者マスタRefTarget) => void
  onCancel: () => void
}) => {

  // 検索結果（現在表示されているページの分のみ）
  // および最後に検索実行したときの検索条件
  const { getValues, control } = ReactHookForm.useForm<患者マスタSearchCondition>({
    defaultValues: createNew患者マスタSearchCondition(),
  })
  const [latestSearchCondition, setLatestSearchCondition] = React.useState<患者マスタSearchCondition>(createNew患者マスタSearchCondition())
  const [searchResults, setSearchResults] = React.useState<患者マスタRefTarget[]>([])
  const [totalCount, setTotalCount] = React.useState(0)

  // 検索処理実行
  const { complexPost } = Util.useHttpRequest()
  React.useEffect(() => {
    (async () => {
      const results = await complexPost<LoadReturnType<患者マスタRefTarget>>(
        AutoGenerated.LoadRefFeature.Endpoint['ref-to:患者マスタ'],
        latestSearchCondition,
      )
      if (results) {
        setSearchResults(results.currentPageItems)
        setTotalCount(results.totalCount)
      } else {
        setSearchResults([])
        setTotalCount(0)
      }
    })();
  }, [latestSearchCondition])

  // 検索ボタン押下時の処理
  const handleSearch = useEvent(() => {
    setLatestSearchCondition(getValues())
  })

  // 検索結果のカラム定義
  const getColumnDefs: Layout.GetColumnDefsFunction<患者マスタRefTarget> = React.useCallback(cellType => {
    const columnDefs: Layout.EditableGridColumnDef<患者マスタRefTarget>[] = []

    // 選択リンク
    columnDefs.push(cellType.other('', {
      renderCell: cell => (
        <div className="flex items-center justify-center">
          <button
            className="text-blue-500 hover:text-blue-700"
            onClick={() => props.onSelect(cell.row.original)}
          >
            選択
          </button>
        </div>
      ),
    }))

    // 患者ID
    columnDefs.push(cellType.text('患者ID', '患者ID'))

    // 氏名
    columnDefs.push(cellType.text('氏名', '氏名'))

    // 氏名カナ
    columnDefs.push(cellType.text('氏名カナ', '氏名カナ'))

    return columnDefs
  }, [])

  return (
    <Layout.ModalDialog open>
      <PanelGroup direction="vertical">

        {/* 検索条件欄 */}
        <Panel className="flex flex-col gap-1">
          <div className="flex justify-end gap-1">
            <Input.IconButton onClick={props.onCancel}>
              キャンセル
            </Input.IconButton>
            <Input.IconButton onClick={handleSearch}>
              検索
            </Input.IconButton>
          </div>
          <div className="flex-1">
            <Layout.VForm2.Root estimatedLabelWidth="10rem">
              <Layout.VForm2.Item label="患者ID">
                <Input.Word
                  control={control}
                  name="filter.患者ID"
                />
              </Layout.VForm2.Item>
              <Layout.VForm2.Item label="氏名">
                <Input.Word
                  control={control}
                  name="filter.氏名"
                />
              </Layout.VForm2.Item>
              <Layout.VForm2.Item label="氏名カナ">
                <Input.Word
                  control={control}
                  name="filter.氏名カナ"
                />
              </Layout.VForm2.Item>
            </Layout.VForm2.Root>
          </div>
        </Panel>

        <PanelResizeHandle className="h-1" />

        {/* 検索結果欄 */}
        <Panel className="flex flex-col gap-1">
          <div className="flex justify-end gap-1">
            全{totalCount}件
          </div>
          <Layout.EditableGrid
            getColumnDefs={getColumnDefs}
            rows={searchResults}
            isReadOnly={true}
          />
        </Panel>
      </PanelGroup>
    </Layout.ModalDialog>
  )
}
