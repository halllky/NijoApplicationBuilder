import React from "react"
import useEvent from "react-use-event-hook"
import * as ReactRouter from "react-router-dom"
import * as ReactHookForm from "react-hook-form"
import * as Icon from "@heroicons/react/24/solid"
import * as AutoGenerated from "../../__autoGenerated"
import * as Input from "../../input"
import * as Layout from "../../layout"
import * as Util from "../../util"
import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels"
import { LoadReturnType } from "../../__autoGenerated/util"

/**
 * これは検索条件のオブジェクトの型です。
 * おそらく実際に実装する際は __autoGenerated フォルダ内に自動生成されている型定義を使用するはずなので
 * この型定義は参考程度に使用してください。
 * TODO: 不要になったら削除してください。
 */
type SearchConditionExample = {
  sample: string
}

/**
 * 検索条件オブジェクトの新規作成関数。
 * 実際は自動生成される関数を使用すること。
 * TODO: 不要になったら削除してください。
 */
const createNewSearchCondition = (): SearchConditionExample => ({
  sample: "",
})

/**
 * これは検索結果のオブジェクトの型です。
 * おそらく実際に実装する際は __autoGenerated フォルダ内に自動生成されている型定義を使用するはずなので
 * この型定義は参考程度に使用してください。
 * TODO: 不要になったら削除してください。
 */
type SearchResultExample = {
  sample: string
}

/**
 * これは検索ダイアログのテンプレートです。
 * 新しい検索ダイアログを作成する場合は、
 * このテンプレートをコピーして、必要な箇所を適宜変更して使用してください。
 * TODO: 関数名を適宜変更して。
 */
export const SearchDialogTemplate = (props: {
  onSelect: (selectedItem: SearchResultExample) => void
  onCancel: () => void
}) => {

  // 検索結果（現在表示されているページの分のみ）
  // および最後に検索実行したときの検索条件
  const { getValues } = ReactHookForm.useForm<SearchConditionExample>({
    defaultValues: createNewSearchCondition(),
  })
  const [latestSearchCondition, setLatestSearchCondition] = React.useState<SearchConditionExample>(createNewSearchCondition())
  const [searchResults, setSearchResults] = React.useState<SearchResultExample[]>([])
  const [totalCount, setTotalCount] = React.useState(0)

  // 検索処理実行
  const { complexPost } = Util.useHttpRequest()
  React.useEffect(() => {
    (async () => {
      const results = await complexPost<LoadReturnType<SearchResultExample>>(
        'TODO: 検索処理のエンドポイントをここに記載。実際は AutoGenerated.LoadRefFeature で自動生成されているエンドポイントを使用すること。',
        latestSearchCondition,
      )
      if (results) {
        setSearchResults(results.currentPageItems)
        setTotalCount(results.totalCount)
      } else {
        setSearchResults([])
        setTotalCount(0)
      }
    })();
  }, [latestSearchCondition])

  // 検索ボタン押下時の処理
  const handleSearch = useEvent(() => {
    setLatestSearchCondition(getValues())
  })

  // 検索結果のカラム定義
  const getColumnDefs: Layout.GetColumnDefsFunction<SearchResultExample> = React.useCallback(cellType => {
    const columnDefs: Layout.EditableGridColumnDef<SearchResultExample>[] = []

    // 選択リンク
    columnDefs.push(cellType.other('', {
      renderCell: cell => (
        <div className="flex items-center justify-center">
          <button
            className="text-blue-500 hover:text-blue-700"
            onClick={() => props.onSelect(cell.row.original)}
          >
            選択
          </button>
        </div>
      ),
    }))

    // *** TODO: ここで実際の検索ダイアログの検索結果のカラム定義を追加してください ***

    return columnDefs
  }, [])

  return (
    <Layout.ModalDialog open>
      <PanelGroup direction="vertical">

        {/* 検索条件欄 */}
        <Panel className="flex flex-col gap-1">
          <div className="flex justify-end gap-1">
            <Input.IconButton onClick={props.onCancel}>
              キャンセル
            </Input.IconButton>
            <Input.IconButton onClick={handleSearch}>
              検索
            </Input.IconButton>
          </div>
          <div className="flex-1">
            {/* TODO: 検索条件欄をここに配置してください。 */}
          </div>
        </Panel>

        <PanelResizeHandle className="h-1" />

        {/* 検索結果欄 */}
        <Panel className="flex flex-col gap-1">
          <div className="flex justify-end gap-1">
            全{totalCount}件
          </div>
          <Layout.EditableGrid
            getColumnDefs={getColumnDefs}
            rows={searchResults}
          />
        </Panel>
      </PanelGroup>
    </Layout.ModalDialog>
  )
}
