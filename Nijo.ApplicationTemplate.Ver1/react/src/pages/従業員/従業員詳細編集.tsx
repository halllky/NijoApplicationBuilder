import * as React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Input from "../../input"
import * as Layout from "../../layout"
import * as AutoGenerated from "../../__autoGenerated/従業員"
import { useParams, useNavigate } from "react-router-dom"
import { FormProvider } from "react-hook-form"

/**
 * 従業員データ1件の詳細を閲覧・編集する画面。
 * URLから従業員IDを取得し、その従業員のデータを取得して表示する。
 */
export const 従業員詳細編集 = () => {
  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const isNew = id === "new"

  // 読み込み状態
  const [isLoading, setIsLoading] = React.useState<boolean>(true)

  // フォームの初期値
  const formMethods = ReactHookForm.useForm<AutoGenerated.従業員DisplayData>({
    defaultValues: AutoGenerated.createNew従業員DisplayData()
  })

  const { control, handleSubmit, setValue, reset, watch } = formMethods

  // 従業員データの取得
  React.useEffect(() => {
    const fetchData = async () => {
      if (isNew) {
        // 新規作成の場合は初期値をセット
        setIsLoading(false)
        return
      }

      try {
        // 既存データの場合はAPIから取得
        // 実際のAPIに合わせて修正してください
        setIsLoading(true)
        const response = await fetch(`/api/従業員/${id}`)
        if (!response.ok) {
          throw new Error("データの取得に失敗しました")
        }

        const data: AutoGenerated.従業員DisplayData = await response.json()
        reset(data)
        setIsLoading(false)
      } catch (error) {
        console.error("データ取得エラー:", error)
        setIsLoading(false)
      }
    }

    fetchData()
  }, [id, isNew, reset])

  // データ保存処理
  const onSubmit = async (data: AutoGenerated.従業員DisplayData) => {
    try {
      // APIに送信
      const method = isNew ? "POST" : "PUT"
      const url = isNew ? "/api/従業員" : `/api/従業員/${id}`

      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      })

      if (!response.ok) {
        throw new Error("保存に失敗しました")
      }

      // 保存成功後、一覧画面に戻る
      navigate("/従業員")
    } catch (error) {
      console.error("保存エラー:", error)
      // エラー処理をここに追加
    }
  }

  // 所属部署のフィールド配列
  const { fields: 所属部署Fields, append: append所属部署, remove: remove所属部署 } =
    ReactHookForm.useFieldArray({
      control,
      name: "所属部署"
    })

  // 所属部署を追加
  const add所属部署 = () => {
    append所属部署(AutoGenerated.createNew所属部署DisplayData())
  }

  return (
    <Layout.PageFrame
      headerContent={(
        <>
          <Input.IconButton fill onClick={handleSubmit(onSubmit)}>
            保存
          </Input.IconButton>
        </>
      )}
    >
      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <div className="text-xl">読み込み中...</div>
        </div>
      ) : (
        <FormProvider {...formMethods}>
          <Layout.VForm3.Root>
            <Layout.VForm3.BreakPoint>
              <Layout.VForm3.Item
                label="従業員ID"
                required={AutoGenerated.従業員Constraints.values.従業員ID.required}
              >
                <Input.Word
                  name="values.従業員ID"
                  control={control}
                />
              </Layout.VForm3.Item>

              <Layout.VForm3.Item
                label="氏名"
                required={AutoGenerated.従業員Constraints.values.氏名.required}
              >
                <Input.Word
                  name="values.氏名"
                  control={control}
                />
              </Layout.VForm3.Item>

              <Layout.VForm3.Item
                label="氏名カナ"
                required={AutoGenerated.従業員Constraints.values.氏名カナ.required}
              >
                <Input.Word
                  name="values.氏名カナ"
                  control={control}
                />
              </Layout.VForm3.Item>

              <Layout.VForm3.Item
                label="退職日"
                required={AutoGenerated.従業員Constraints.values.退職日.required}
              >
                <Input.DateInput
                  name="values.退職日"
                  control={control}
                />
              </Layout.VForm3.Item>
            </Layout.VForm3.BreakPoint>

            <Layout.VForm3.BreakPoint label="所属部署">
              <div className="mb-2">
                <button
                  type="button"
                  onClick={add所属部署}
                  className="px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                >
                  所属部署を追加
                </button>
              </div>

              {所属部署Fields.length > 0 ? (
                <div className="border border-gray-300 p-2 mb-2">
                  {所属部署Fields.map((field, index) => (
                    <div key={field.id} className="mb-4 p-2 border-b border-gray-200">
                      <div className="flex justify-between mb-2">
                        <div className="font-bold">所属部署 #{index + 1}</div>
                        <button
                          type="button"
                          onClick={() => remove所属部署(index)}
                          className="px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600"
                        >
                          削除
                        </button>
                      </div>

                      <Layout.VForm3.Item
                        label="年度"
                        required={AutoGenerated.従業員Constraints.所属部署.values.年度.required}
                      >
                        <Input.NumberInput
                          name={`所属部署.${index}.values.年度`}
                          control={control}
                        />
                      </Layout.VForm3.Item>

                      <Layout.VForm3.Item
                        label="部署"
                        required={AutoGenerated.従業員Constraints.所属部署.values.部署.required}
                      >
                        <div>
                          {/*
                            部署選択は本来コンボボックスなどを使用して実装すべきですが、
                            ここでは仮実装として簡略化しています。
                            実際のアプリでは適切な部署選択UIを実装してください。
                           */}
                          <div className="text-sm text-gray-500 mb-1">
                            部署を選択してください（このUIは仮実装です）
                          </div>
                          <select
                            className="border border-gray-300 p-1 w-64"
                            onChange={(e) => {
                              // 選択した部署コードを設定
                              const 部署コード = e.target.value;
                              // 実際のアプリでは部署コードから部署名を取得するロジックが必要
                              const 部署名 = 部署コード === 'A001' ? '総務部' :
                                部署コード === 'B001' ? '営業部' :
                                  部署コード === 'C001' ? '開発部' : '';

                              // refTargetへの設定方法はAPIの実装に合わせて修正してください
                              setValue(`所属部署.${index}.values.部署` as any, {
                                部署コード,
                                部署名
                              });
                            }}
                            defaultValue=""
                          >
                            <option value="" disabled>選択してください</option>
                            <option value="A001">A001: 総務部</option>
                            <option value="B001">B001: 営業部</option>
                            <option value="C001">C001: 開発部</option>
                          </select>
                        </div>
                      </Layout.VForm3.Item>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-gray-500 italic">所属部署がありません</div>
              )}
            </Layout.VForm3.BreakPoint>
          </Layout.VForm3.Root>
        </FormProvider>
      )}
    </Layout.PageFrame>
  )
}
