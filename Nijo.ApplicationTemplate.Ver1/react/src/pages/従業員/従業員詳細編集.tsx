import * as React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Input from "../../input"
import * as Layout from "../../layout"
import * as AutoGenerated from "../../__autoGenerated/従業員"
import { useParams, useNavigate } from "react-router-dom"
import { FormProvider } from "react-hook-form"

/**
 * 従業員データ1件の詳細を閲覧・編集する画面。
 * URLから従業員IDを取得し、その従業員のデータを取得して表示する。
 */
export const 従業員詳細編集 = () => {
  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const isNew = id === "new"

  // 読み込み状態
  const [isLoading, setIsLoading] = React.useState<boolean>(true)

  // フォームの初期値
  const formMethods = ReactHookForm.useForm<AutoGenerated.従業員DisplayData>({
    defaultValues: {
      ...AutoGenerated.createNew従業員DisplayData(),
      所属部署: [AutoGenerated.createNew所属部署DisplayData()], // 初期状態で1行表示
    }
  })

  const { control, handleSubmit, setValue, reset, watch } = formMethods

  // 従業員データの取得
  React.useEffect(() => {
    const fetchData = async () => {
      if (isNew) {
        // 新規作成の場合は初期値をセット
        setIsLoading(false)
        return
      }

      try {
        // 既存データの場合はAPIから取得
        // 実際のAPIに合わせて修正してください
        setIsLoading(true)
        const response = await fetch(`/api/従業員/${id}`)
        if (!response.ok) {
          throw new Error("データの取得に失敗しました")
        }

        const data: AutoGenerated.従業員DisplayData = await response.json()
        reset(data)
        setIsLoading(false)
      } catch (error) {
        console.error("データ取得エラー:", error)
        setIsLoading(false)
      }
    }

    fetchData()
  }, [id, isNew, reset])

  // データ保存処理
  const onSubmit = async (data: AutoGenerated.従業員DisplayData) => {
    try {
      // APIに送信
      const method = isNew ? "POST" : "PUT"
      const url = isNew ? "/api/従業員" : `/api/従業員/${id}`

      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      })

      if (!response.ok) {
        throw new Error("保存に失敗しました")
      }

      // 保存成功後、一覧画面に戻る
      navigate("/従業員")
    } catch (error) {
      console.error("保存エラー:", error)
      // エラー処理をここに追加
    }
  }

  // 所属部署のフィールド配列
  const { fields: 所属部署Fields, append: append所属部署, remove: remove所属部署, update: update所属部署 } =
    ReactHookForm.useFieldArray({
      control,
      name: "所属部署"
    })

  // 所属部署Fieldsの変化を監視
  React.useEffect(() => {
    console.log('所属部署Fields変更:', 所属部署Fields);
    console.log('所属部署Fields詳細構造:', JSON.stringify(所属部署Fields, null, 2));
  }, [所属部署Fields]);

  // 所属部署を追加
  const add所属部署 = () => {
    const newData = AutoGenerated.createNew所属部署DisplayData();
    // 初期値を設定してデバッグ
    newData.values.年度 = 2024;
    newData.values.部署.部署名 = "テスト部署";
    newData.values.部署.部署コード = "TEST001";
    console.log('追加する所属部署データ:', newData);
    append所属部署(newData);
    console.log('現在の所属部署Fields:', 所属部署Fields);
  }

  const 所属部署GridRef = React.useRef<Layout.EditableGridRef<ReactHookForm.FieldArrayWithId<AutoGenerated.従業員DisplayData, "所属部署", "id">>>(null)

  const getColumnDefs: Layout.GetColumnDefsFunction<ReactHookForm.FieldArrayWithId<AutoGenerated.従業員DisplayData, "所属部署", "id">> = React.useCallback(cellType => [
    cellType.number("values.年度", "年度"),
    cellType.text("values.部署.部署名", "部署名"),
    cellType.text("values.部署.部署コード", "部署コード"),
  ], [])

  return (
    <Layout.PageFrame
      headerContent={(
        <>
          <Input.IconButton fill onClick={handleSubmit(onSubmit)}>
            保存
          </Input.IconButton>
        </>
      )}
    >
      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <div className="text-xl">読み込み中...</div>
        </div>
      ) : (
        <FormProvider {...formMethods}>
          <Layout.VForm3.Root>
            <Layout.VForm3.BreakPoint>
              <Layout.VForm3.Item label="従業員ID" required>
                <Input.Word name="values.従業員ID" control={control} />
              </Layout.VForm3.Item>

              <Layout.VForm3.Item label="氏名" required>
                <Input.Word name="values.氏名" control={control} />
              </Layout.VForm3.Item>

              <Layout.VForm3.Item label="氏名カナ">
                <Input.Word name="values.氏名カナ" control={control} />
              </Layout.VForm3.Item>

              <Layout.VForm3.Item label="退職日">
                <Input.DateInput name="values.退職日" control={control} />
              </Layout.VForm3.Item>
            </Layout.VForm3.BreakPoint>

            <Layout.VForm3.FullWidthItem className="h-48" label={(
              <div className="flex flex-row items-center">
                <div>所属部署</div>
                <div className="basis-4"></div>
                <Input.IconButton fill onClick={add所属部署}>追加</Input.IconButton>
              </div>
            )}>
              <div className="h-36">
                <Layout.EditableGrid
                  ref={所属部署GridRef}
                  rows={所属部署Fields}
                  getColumnDefs={getColumnDefs}
                  onChangeRow={(newRow, index) => {
                    console.log('行が変更されました:', newRow, index);
                    update所属部署(index, newRow);
                  }}
                  showCheckBox={true}
                />
              </div>
            </Layout.VForm3.FullWidthItem>
          </Layout.VForm3.Root>
        </FormProvider>
      )}
    </Layout.PageFrame>
  )
}
