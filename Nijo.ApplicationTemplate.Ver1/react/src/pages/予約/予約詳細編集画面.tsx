import * as React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Input from "../../input"
import * as Layout from "../../layout"
import * as AutoGenerated from "../../__autoGenerated/予約"
import * as EnumDefs from "../../__autoGenerated/enum-defs"
// import * as 顧客マスタAutoGenerated from "../../__autoGenerated/顧客マスタ"
// import * as 従業員マスタAutoGenerated from "../../__autoGenerated/従業員マスタ"
import { useParams, useNavigate } from "react-router-dom"
import useEvent from "react-use-event-hook"
// import { useDataSelectorDialog } from "../../parts/DataSelectorDialog" // 未実装のためコメントアウト

// reservation_typeの選択肢 (enum-defs.tsにはOptions生成関数がないため直接定義)
const reservationTypeOptions: { value: EnumDefs.reservation_type, label: string }[] = [
    { value: '初診（しょしん）', label: '初診（しょしん）' },
    { value: '再診（さいしん）', label: '再診（さいしん）' },
    { value: '検査（けんさ）', label: '検査（けんさ）' },
];

/**
 * 予約データ1件の詳細を閲覧・編集する画面。
 */
export const 予約詳細編集画面 = () => {
    const { id } = useParams<{ id: string }>()
    const navigate = useNavigate()
    const isNew = id === "new"

    // 読み込み状態
    const [isLoading, setIsLoading] = React.useState<boolean>(true)
    // エラーメッセージ
    const [errorMessage, setErrorMessage] = React.useState<string | null>(null)

    const methods = ReactHookForm.useForm<AutoGenerated.予約DisplayData>({
        // defaultValues: AutoGenerated.createNew予約DisplayData(), // 初期値設定はuseEffectに移動
    })
    const { control, handleSubmit, reset, setValue, watch, register } = methods // register を追加

    // 顧客選択ダイアログ (未実装のためコメントアウト)
    /*
    const { showDialog: show顧客Dialog, dialogElement: 顧客Dialog } = useDataSelectorDialog<顧客マスタAutoGenerated.顧客マスタRefTarget>({
        title: "顧客選択",
        getQueryParameter: 顧客マスタAutoGenerated.toQueryParameterOf顧客マスタSearchCondition,
        getDisplayValue: (item) => item.氏名 ?? '(名称未設定)', // 表示する値（例: 氏名）
        getColumns: (cell) => [ // ダイアログの列定義
            cell.text('顧客ID', '顧客ID', { search: true }),
            cell.text('氏名', '氏名', { search: true }),
            cell.text('氏名カナ', '氏名カナ', { search: true }),
        ],
        fetchPath: '/api/顧客マスタ',
        onSelect: (selected) => {
            if (selected) {
                setValue('values.患者', selected); // 選択された顧客データをフォームにセット
            }
        }
    });
    */

    // 従業員選択ダイアログ (未実装のためコメントアウト)
    /*
    const { showDialog: show従業員Dialog, dialogElement: 従業員Dialog } = useDataSelectorDialog<従業員マスタAutoGenerated.従業員マスタRefTarget>({
        title: "従業員選択",
        getQueryParameter: 従業員マスタAutoGenerated.toQueryParameterOf従業員マスタSearchCondition,
        getDisplayValue: (item) => item.氏名 ?? '(名称未設定)', // 表示する値（例: 氏名）
        getColumns: (cell) => [ // ダイアログの列定義
            cell.text('従業員ID', '従業員ID', { search: true }),
            cell.text('氏名', '氏名', { search: true }),
            cell.text('氏名カナ', '氏名カナ', { search: true }),
        ],
        fetchPath: '/api/従業員マスタ',
        onSelect: (selected) => {
            if (selected) {
                setValue('values.担当従業員', selected); // 選択された従業員データをフォームにセット
            }
        }
    });
    */

    // 予約データの取得と初期値設定
    React.useEffect(() => {
        const fetchData = async () => {
            setErrorMessage(null)
            setIsLoading(true); // 開始時にローディング開始
            let initialData = AutoGenerated.createNew予約DisplayData(); // まず空データ作成

            if (!isNew && id) {
                try {
                    const response = await fetch(`/api/予約/${id}`)
                    if (!response.ok) {
                        if (response.status === 404) setErrorMessage("指定された予約が見つかりません。")
                        else setErrorMessage(`データの取得に失敗しました。(ステータス: ${response.status})`)
                        // データ取得失敗時は空データのまま
                    } else {
                        initialData = await response.json(); // 取得成功したら上書き
                    }
                } catch (error) {
                    console.error("データ取得エラー:", error)
                    setErrorMessage("データの取得中に予期せぬエラーが発生しました。")
                    // エラー時も空データのまま
                }
            }
            reset(initialData); // 取得したデータまたは空データでフォームをリセット
            setIsLoading(false); // 最後にローディング終了
        }
        fetchData()
    }, [id, isNew, reset])

    // データ保存処理
    const onSubmit = useEvent(async (data: AutoGenerated.予約DisplayData) => {
        setErrorMessage(null)
        setIsLoading(true); // 保存処理開始
        try {
            const method = isNew ? "POST" : "PUT"
            const url = isNew ? "/api/予約" : `/api/予約/${id}`

            // 送信前に患者・担当従業員のIDのみに整形する（オブジェクト全体ではなくIDを期待する場合）
            // ※APIの仕様に合わせて調整が必要
            const submitData = {
                ...data,
                values: {
                    ...data.values,
                    // 患者: data.values.患者?.顧客ID, // IDのみ送信する場合
                    // 担当従業員: data.values.担当従業員?.従業員ID, // IDのみ送信する場合
                }
            }
            const body = JSON.stringify(submitData);

            const response = await fetch(url, {
                method,
                headers: { "Content-Type": "application/json" },
                body: body,
            })
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}))
                const message = errorData.message || `保存に失敗しました。(ステータス: ${response.status})`
                setErrorMessage(message)
                console.error("保存エラー:", errorData)
                throw new Error(message)
            }
            navigate("/予約") // 仮に一覧画面のパスを /予約 とする
        } catch (error) {
            console.error("保存処理エラー:", error)
            if (!errorMessage) setErrorMessage("保存中に予期せぬエラーが発生しました。")
        } finally {
            setIsLoading(false); // 保存処理終了
        }
    })

    // watchで参照フィールドの値を取得 (ダイアログ未実装のため表示用)
    // const watched顧客 = watch('values.患者');
    // const watched従業員 = watch('values.担当従業員');

    return (
        <Layout.PageFrame
            headerContent={(
                <>
                    <Input.IconButton fill onClick={(e) => { if (!isLoading) handleSubmit(onSubmit)(e); }}>
                        保存
                    </Input.IconButton>
                    <Input.IconButton fill onClick={() => { if (!isLoading) navigate(-1); }}>
                        キャンセル
                    </Input.IconButton>
                </>
            )}
        >
            {isLoading ? (
                <div className="flex justify-center items-center h-64">読み込み中...</div>
            ) : errorMessage ? (
                <div className="m-4 p-4 border border-red-400 bg-red-100 text-red-700 rounded">
                    <p>エラー: {errorMessage}</p>
                    <button onClick={() => navigate(-1)} className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700">戻る</button>
                </div>
            ) : (
                <ReactHookForm.FormProvider {...methods}>
                    <Layout.VForm3.Root>
                        <Layout.VForm3.BreakPoint>
                            <Layout.VForm3.Item label="予約ID" required={AutoGenerated.予約Constraints.values.予約ID.required}>
                                <Input.Word name="values.予約ID" control={control} readOnly={!isNew}
                                    rules={{
                                        required: "予約IDは必須です。",
                                        maxLength: { value: AutoGenerated.予約Constraints.values.予約ID.maxLength!, message: `予約IDは${AutoGenerated.予約Constraints.values.予約ID.maxLength}文字以内` }
                                    }} />
                            </Layout.VForm3.Item>

                            <Layout.VForm3.Item label="予約日時" required={AutoGenerated.予約Constraints.values.予約日時.required}>
                                {/* DateTimeInputの代わりにDateInputを使用 */}
                                <Input.DateInput name="values.予約日時" control={control}
                                    rules={{ required: "予約日時は必須です。" }} />
                            </Layout.VForm3.Item>

                            <Layout.VForm3.Item label="患者" required={AutoGenerated.予約Constraints.values.患者.required}>
                                {/* DataSelectorDialog未実装のため、WordでID直接入力 */}
                                <Input.Word name="values.患者.顧客ID" control={control}
                                    rules={{ required: "患者は必須です。" }}
                                />
                                {/* <Input.IconButton onClick={show顧客Dialog} disabled>検索</Input.IconButton> */}
                            </Layout.VForm3.Item>

                            <Layout.VForm3.Item label="予約区分">
                                {/* Select未実装のため、標準selectを使用 */}
                                <select {...register("values.予約区分")} className="border border-gray-300 p-1">
                                    <option value="">選択してください</option>
                                    {reservationTypeOptions.map(opt => (
                                        <option key={opt.value} value={opt.value}>{opt.label}</option>
                                    ))}
                                </select>
                                <Input.FieldErrorView name="values.予約区分" /> {/* エラー表示用 */}
                            </Layout.VForm3.Item>

                            <Layout.VForm3.Item label="担当従業員" required={AutoGenerated.予約Constraints.values.担当従業員.required}>
                                {/* DataSelectorDialog未実装のため、WordでID直接入力 */}
                                <Input.Word name="values.担当従業員.従業員ID" control={control}
                                    rules={{ required: "担当従業員は必須です。" }}
                                />
                                {/* <Input.IconButton onClick={show従業員Dialog} disabled>検索</Input.IconButton> */}
                            </Layout.VForm3.Item>

                        </Layout.VForm3.BreakPoint>

                        <Layout.VForm3.FullWidthItem label="予約メモ">
                            <textarea {...register("values.予約メモ", {
                                maxLength: { value: AutoGenerated.予約Constraints.values.予約メモ.maxLength!, message: `予約メモは${AutoGenerated.予約Constraints.values.予約メモ.maxLength}文字以内` }
                            })} className="border border-gray-300 p-1 w-full" rows={4} />
                            <Input.FieldErrorView name="values.予約メモ" />
                        </Layout.VForm3.FullWidthItem>

                    </Layout.VForm3.Root>
                </ReactHookForm.FormProvider>
            )}
            {/* ダイアログ要素をレンダリング (未実装のためコメントアウト) */}
            {/* {顧客Dialog} */}
            {/* {従業員Dialog} */}
        </Layout.PageFrame>
    )
}
