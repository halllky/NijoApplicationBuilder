import * as React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Input from "../../input"
import * as Layout from "../../layout"
import * as AutoGenerated from "../../__autoGenerated/カテゴリマスタ"
import { useParams, useNavigate } from "react-router-dom"
import useEvent from "react-use-event-hook"

/**
 * カテゴリマスタデータ1件の詳細を閲覧・編集する画面。
 * URLからカテゴリIDを取得し、そのカテゴリのデータを取得して表示する。
 */
export const カテゴリマスタ詳細編集画面 = () => {
    const { id } = useParams<{ id: string }>()
    const navigate = useNavigate()
    const isNew = id === "new"

    // 読み込み状態
    const [isLoading, setIsLoading] = React.useState<boolean>(true)
    // エラーメッセージ
    const [errorMessage, setErrorMessage] = React.useState<string | null>(null)

    const methods = ReactHookForm.useForm<AutoGenerated.カテゴリマスタDisplayData>({
        defaultValues: AutoGenerated.createNewカテゴリマスタDisplayData(),
    })
    const { control, handleSubmit, reset } = methods

    // カテゴリデータの取得
    React.useEffect(() => {
        const fetchData = async () => {
            setErrorMessage(null) // エラーメッセージをクリア
            if (isNew) {
                // 新規作成の場合は初期値をセットして終了
                reset(AutoGenerated.createNewカテゴリマスタDisplayData())
                setIsLoading(false)
                return
            }

            if (!id) {
                setErrorMessage("IDが指定されていません。")
                setIsLoading(false)
                return
            }

            try {
                // 既存データの場合はAPIから取得
                setIsLoading(true)
                const response = await fetch(`/api/カテゴリマスタ/${id}`)
                if (!response.ok) {
                    if (response.status === 404) {
                        setErrorMessage("指定されたカテゴリが見つかりません。")
                    } else {
                        setErrorMessage(`データの取得に失敗しました。(ステータス: ${response.status})`)
                    }
                    setIsLoading(false)
                    return // エラーが発生したらここで処理を中断
                }

                const data: AutoGenerated.カテゴリマスタDisplayData = await response.json()
                reset(data) // 取得したデータでフォームをリセット
                setIsLoading(false)
            } catch (error) {
                console.error("データ取得エラー:", error)
                setErrorMessage("データの取得中に予期せぬエラーが発生しました。")
                setIsLoading(false)
            }
        }

        fetchData()
    }, [id, isNew, reset]) // reset を依存配列に追加

    // データ保存処理
    const onSubmit = useEvent(async (data: AutoGenerated.カテゴリマスタDisplayData) => {
        setErrorMessage(null) // エラーメッセージをクリア
        try {
            // APIに送信
            const method = isNew ? "POST" : "PUT"
            const url = isNew ? "/api/カテゴリマスタ" : `/api/カテゴリマスタ/${id}`

            // 送信するデータから不要なプロパティを除外する場合など、
            // 必要に応じて data を加工する処理を追加
            const body = JSON.stringify(data);

            const response = await fetch(url, {
                method,
                headers: {
                    "Content-Type": "application/json",
                    // 必要に応じて認証トークンなどをヘッダーに追加
                },
                body: body,
            })

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({})) // エラーレスポンスのパースを試みる
                const message = errorData.message || `保存に失敗しました。(ステータス: ${response.status})`
                setErrorMessage(message)
                // 詳細なエラー情報をコンソールに出力
                console.error("保存エラー:", errorData)
                throw new Error(message) // エラーを再スローして処理を中断
            }

            // 保存成功後、一覧画面に戻るなどの処理
            navigate("/カテゴリマスタ") // 仮に一覧画面のパスを /カテゴリマスタ とする

        } catch (error) {
            console.error("保存処理エラー:", error)
            if (!errorMessage) { // fetch内でセットされていない場合のみ
                setErrorMessage("保存中に予期せぬエラーが発生しました。")
            }
            // ここでユーザーにエラーを通知するUI処理を追加することも検討
        }
    })

    return (
        <Layout.PageFrame
            headerContent={(
                <>
                    <Input.IconButton fill onClick={(e) => { if (!isLoading) handleSubmit(onSubmit)(e); }}>
                        保存
                    </Input.IconButton>
                    {/* 他のヘッダー要素（例：キャンセルボタン）を追加可能 */}
                    <Input.IconButton fill onClick={() => { if (!isLoading) navigate(-1); }}> {/* 戻るボタン */}
                        キャンセル
                    </Input.IconButton>
                </>
            )}
        >
            {isLoading ? (
                <div className="flex justify-center items-center h-64">
                    <div className="text-xl">読み込み中...</div>
                </div>
            ) : errorMessage ? (
                <div className="m-4 p-4 border border-red-400 bg-red-100 text-red-700 rounded">
                    <p>エラーが発生しました:</p>
                    <p>{errorMessage}</p>
                    <button onClick={() => navigate(-1)} className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700">
                        戻る
                    </button>
                </div>
            ) : (
                <ReactHookForm.FormProvider {...methods}>
                    <Layout.VForm3.Root>
                        <Layout.VForm3.BreakPoint>
                            <Layout.VForm3.Item
                                label="カテゴリID"
                                required={AutoGenerated.カテゴリマスタConstraints.values.カテゴリID.required}
                            >
                                <Input.Word
                                    name="values.カテゴリID"
                                    control={control}
                                    rules={{
                                        required: "カテゴリIDは必須です。",
                                        maxLength: {
                                            value: AutoGenerated.カテゴリマスタConstraints.values.カテゴリID.maxLength!,
                                            message: `カテゴリIDは${AutoGenerated.カテゴリマスタConstraints.values.カテゴリID.maxLength}文字以内で入力してください。`,
                                        },
                                    }}
                                    readOnly={!isNew} // 新規作成時のみ編集可能
                                />
                            </Layout.VForm3.Item>

                            <Layout.VForm3.Item
                                label="カテゴリ名"
                                required={AutoGenerated.カテゴリマスタConstraints.values.カテゴリ名.required}
                            >
                                <Input.Word
                                    name="values.カテゴリ名"
                                    control={control}
                                    rules={{
                                        maxLength: {
                                            value: AutoGenerated.カテゴリマスタConstraints.values.カテゴリ名.maxLength!,
                                            message: `カテゴリ名は${AutoGenerated.カテゴリマスタConstraints.values.カテゴリ名.maxLength}文字以内で入力してください。`,
                                        },
                                        // required: AutoGenerated.カテゴリマスタConstraints.values.カテゴリ名.required ? "カテゴリ名は必須です。" : undefined,
                                    }}
                                />
                            </Layout.VForm3.Item>

                        </Layout.VForm3.BreakPoint>
                        {/* 隠しフィールドなど、他のフォーム要素をここに追加可能 */}

                    </Layout.VForm3.Root>
                </ReactHookForm.FormProvider>
            )}
        </Layout.PageFrame>
    )
}
