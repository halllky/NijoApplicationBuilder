import * as React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Layout from "../layout"
import * as Input from "../input"
import { MetadataForPage } from "../__autoGenerated/util/metadata-for-page"

/**
 * 構造体のメタデータを受け取って VForm のルートを構築して返すコンポーネント
 */
export const ReflectionForm = ({ metadata }: {
  metadata: MetadataForPage.StructureMetadata
}) => {
  return (
    <Layout.VForm3.Root>
      {Object.entries(metadata.members).map(([key, member]) => (
        <MemberComponent key={key} physicalName={key} member={member} />
      ))}
    </Layout.VForm3.Root>
  )
}

/** VForm3のラベルと値の組 */
const MemberComponent = ({ physicalName, member, ancestorsPath }: {
  /** メンバーの物理名 */
  physicalName: string
  /** メンバー */
  member: MetadataForPage.StructureMetadataMember
  /** 祖先のパス */
  ancestorsPath?: string
}): React.ReactNode => {

  const formMethods = ReactHookForm.useFormContext()

  // Root
  if (member.type === "RootAggregate") {
    return undefined // Rootはトップで処理済み。この分岐には来ない
  }

  // Child, Children
  if (member.type === "ChildAggregate" || member.type === "ChildrenAggregate") {
    return (
      <Layout.VForm3.FullWidthItem label={member.displayName}>
        {Object.entries(member.members).map(([key, member]) => (
          <MemberComponent
            key={key}
            physicalName={key}
            member={member}
            ancestorsPath={`${ancestorsPath}.${physicalName}`}
          />
        ))}
      </Layout.VForm3.FullWidthItem>
    )
  }

  // 外部参照
  if (member.type === "ref-to") {
    return (
      <Layout.VForm3.Item label={member.displayName} required={member.required}>
        TODO
      </Layout.VForm3.Item>
    )
  }

  // 一般ValueMember
  if (member.type !== undefined) {

    // 単語
    if (member.type === "word") {
      return (
        <Layout.VForm3.Item label={member.displayName} required>
          <Input.Word
            control={formMethods.control}
            name={`${ancestorsPath}.${physicalName}`}
          />
        </Layout.VForm3.Item>
      )
    }

    // 文章
    if (member.type === "description") {
      return (
        <Layout.VForm3.Item label={member.displayName} required>
          <Input.Description
            control={formMethods.control}
            name={`${ancestorsPath}.${physicalName}`}
          />
        </Layout.VForm3.Item>
      )
    }

    // 数値
    if (member.type === "int" || member.type === "decimal") {
      return (
        <Layout.VForm3.Item label={member.displayName} required>
          <Input.NumberInput
            control={formMethods.control}
            name={`${ancestorsPath}.${physicalName}`}
          />
        </Layout.VForm3.Item>
      )
    }

    // 日付、日付時刻
    if (member.type === "date" || member.type === "datetime") {
      return (
        <Layout.VForm3.Item label={member.displayName} required>
          <Input.DateInput
            control={formMethods.control}
            name={`${ancestorsPath}.${physicalName}`}
          />
        </Layout.VForm3.Item>
      )
    }

    // チェックボックス
    if (member.type === "bool") {
      return (
        <Layout.VForm3.Item label={member.displayName} required>
          <Input.CheckBox
            control={formMethods.control}
            name={`${ancestorsPath}.${physicalName}`}
          />
        </Layout.VForm3.Item>
      )
    }

    return (
      <Layout.VForm3.Item label={member.displayName} required>
        TODO
      </Layout.VForm3.Item>
    )
  }

  // 列挙型
  if (member.enumType !== undefined) {
    return (
      <Layout.VForm3.Item label={member.displayName} required>
        <Input.EnumSelect
          type={member.enumType}
          control={formMethods.control}
          name={`${ancestorsPath}.${physicalName}`}
        />
      </Layout.VForm3.Item>
    )
  }

  // 値オブジェクト（UIは単語型のそれに倣う）
  if (member.valueObjectType !== undefined) {
    return (
      <Layout.VForm3.Item label={member.displayName} required>
        <Input.Word
          control={formMethods.control}
          name={`${ancestorsPath}.${physicalName}`}
        />
      </Layout.VForm3.Item>
    )
  }
}