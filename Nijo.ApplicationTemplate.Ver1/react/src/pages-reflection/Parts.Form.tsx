import * as React from "react"
import * as ReactHookForm from "react-hook-form"
import * as Layout from "../layout"
import * as Input from "../input"
import { MetadataForPage } from "../__autoGenerated/util/metadata-for-page"
import { MetadataSchema } from "./getSchema"

/**
 * 構造体のメタデータを受け取って VForm のルートを構築して返すコンポーネント
 */
export const ReflectionForm = ({ metadata, schema, formMethods }: {
  metadata: MetadataForPage.StructureMetadata
  schema: MetadataSchema
  formMethods: ReactHookForm.UseFormReturn<ReactHookForm.FieldValues>
}) => {
  const members = React.useMemo(() => {
    return Object.entries(metadata.members).map(([physicalName, member]) => ({ physicalName, member }))
  }, [metadata])

  return (
    <Layout.VForm2.Root estimatedLabelWidth="10rem">
      <MemberComponentByAutoColumn formMethods={formMethods} members={members} />
    </Layout.VForm2.Root>
  )
}

/** VForm2のラベルと値の組を折り返しの単位でグルーピングしたもの */
const MemberComponentByAutoColumn = ({ formMethods, members }: {
  formMethods: ReactHookForm.UseFormReturn<ReactHookForm.FieldValues>
  members: { physicalName: string, member: MetadataForPage.StructureMetadataMember }[]
}) => {

  // メンバーを折り返しの単位でグルーピングする
  const groups = React.useMemo(() => {
    return members.reduce((acc, member) => {
      // Child, Children は横幅いっぱいとる
      if (member.member.type === "ChildAggregate" || member.member.type === "ChildrenAggregate") {
        acc.push({ members: [{ physicalName: member.physicalName, member: member.member }], fullWidth: true })
        return acc
      }

      // それ以外はグルーピングする
      const lastGroup = acc[acc.length - 1]
      if (lastGroup === undefined) {
        acc.push({ members: [{ physicalName: member.physicalName, member: member.member }], fullWidth: false })
      } else {
        lastGroup.members.push({ physicalName: member.physicalName, member: member.member })
      }
      return acc
    }, [] as { members: { physicalName: string, member: MetadataForPage.StructureMetadataMember }[], fullWidth: boolean }[])
  }, [members])

  return (
    <>
      {groups.map(({ members, fullWidth }, index) => fullWidth ? (
        <MemberComponent key={index} physicalName={members[0].physicalName} member={members[0].member} formMethods={formMethods} />
      ) : (
        <Layout.VForm2.AutoColumn key={index} childrenCount={members.length}>
          {members.map((member) => (
            <MemberComponent key={member.physicalName} physicalName={member.physicalName} member={member.member} formMethods={formMethods} />
          ))}
        </Layout.VForm2.AutoColumn>
      ))}
    </>
  )
}

/** VForm2のラベルと値の組 */
const MemberComponent = ({ physicalName, member, ancestorsPath, formMethods }: {
  /** メンバーの物理名 */
  physicalName: string
  /** メンバー */
  member: MetadataForPage.StructureMetadataMember
  /** 祖先のパス */
  ancestorsPath?: string
  /** フォームのメソッド */
  formMethods: ReactHookForm.UseFormReturn<ReactHookForm.FieldValues>
}): React.ReactNode => {

  // Root
  if (member.type === "RootAggregate") {
    return undefined // Rootはトップで処理済み。この分岐には来ない
  }

  // Child, Children
  if (member.type === "ChildAggregate" || member.type === "ChildrenAggregate") {
    const members = Object.entries(member.members).map(([key, member]) => ({ physicalName: key, member }))
    return (
      <Layout.VForm2.Indent label={member.displayName}>
        <MemberComponentByAutoColumn formMethods={formMethods} members={members} />
      </Layout.VForm2.Indent>
    )
  }

  // 外部参照
  if (member.type === "ref-to") {
    return (
      <Layout.VForm2.Item label={member.displayName} required={member.required}>
        TODO
      </Layout.VForm2.Item>
    )
  }

  // 一般ValueMember
  if (member.type !== undefined) {

    // 単語
    if (member.type === "word") {
      return (
        <Layout.VForm2.Item label={member.displayName} required>
          <Input.Word
            control={formMethods.control}
            name={`${ancestorsPath}.${physicalName}`}
          />
        </Layout.VForm2.Item>
      )
    }

    // 文章
    if (member.type === "description") {
      return (
        <Layout.VForm2.Item label={member.displayName} required>
          <Input.Description
            control={formMethods.control}
            name={`${ancestorsPath}.${physicalName}`}
          />
        </Layout.VForm2.Item>
      )
    }

    // 数値
    if (member.type === "int" || member.type === "decimal") {
      return (
        <Layout.VForm2.Item label={member.displayName} required>
          <Input.NumberInput
            control={formMethods.control}
            name={`${ancestorsPath}.${physicalName}`}
          />
        </Layout.VForm2.Item>
      )
    }

    // 日付、日付時刻
    if (member.type === "date" || member.type === "datetime") {
      return (
        <Layout.VForm2.Item label={member.displayName} required>
          <Input.DateInput
            control={formMethods.control}
            name={`${ancestorsPath}.${physicalName}`}
          />
        </Layout.VForm2.Item>
      )
    }

    // チェックボックス
    if (member.type === "bool") {
      return (
        <Layout.VForm2.Item label={member.displayName} required>
          <Input.CheckBox
            control={formMethods.control}
            name={`${ancestorsPath}.${physicalName}`}
          />
        </Layout.VForm2.Item>
      )
    }

    return (
      <Layout.VForm2.Item label={member.displayName} required>
        TODO
      </Layout.VForm2.Item>
    )
  }

  // 列挙型
  if (member.enumType !== undefined) {
    return (
      <Layout.VForm2.Item label={member.displayName} required>
        <Input.EnumSelect
          type={member.enumType}
          control={formMethods.control}
          name={`${ancestorsPath}.${physicalName}`}
        />
      </Layout.VForm2.Item>
    )
  }

  // 値オブジェクト（UIは単語型のそれに倣う）
  if (member.valueObjectType !== undefined) {
    return (
      <Layout.VForm2.Item label={member.displayName} required>
        <Input.Word
          control={formMethods.control}
          name={`${ancestorsPath}.${physicalName}`}
        />
      </Layout.VForm2.Item>
    )
  }
}
