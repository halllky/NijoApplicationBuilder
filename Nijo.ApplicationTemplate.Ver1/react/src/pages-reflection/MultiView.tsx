import * as React from "react"
import * as ReactRouter from "react-router-dom"
import * as ReactHookForm from "react-hook-form"
import * as Layout from "../layout"
import * as Input from "../input"
import { MetadataForPage } from "../__autoGenerated/util"
import useEvent from "react-use-event-hook"
import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels"

/** QueryModelの一覧検索画面 */
export const MultiView = ({ rootAggregatePhysicalName, metadata }: {
  rootAggregatePhysicalName: string
  metadata: MetadataForPage.StructureMetadata
}) => {

  // 検索条件
  const form = ReactHookForm.useForm()

  // 新規登録画面へ遷移する
  const navigate = ReactRouter.useNavigate()
  const handleNavigateNew = useEvent(() => {
    navigate(`/${rootAggregatePhysicalName}/new`)
  })

  return (
    <Layout.PageFrame
      headerContent={(
        <>
          <Layout.PageFrameTitle>
            {metadata.displayName}
          </Layout.PageFrameTitle>
          <div className="flex-1"></div>
          {!metadata.isReadOnly && (
            <Input.IconButton onClick={handleNavigateNew}>新規</Input.IconButton>
          )}
        </>
      )}
    >
      <PanelGroup direction="vertical">
        <Panel collapsible minSize={8}>
          <div className="h-full overflow-y-auto">
            <Layout.VForm3.Root>
              <SearchConditionFormItemBreakPointGroups members={metadata.members} />
            </Layout.VForm3.Root>
          </div>
        </Panel>

        <PanelResizeHandle className="h-1 bg-gray-300" />

        <Panel>
          ここに検索結果
        </Panel>
      </PanelGroup>
    </Layout.PageFrame>
  )
}

/** 検索条件欄のブレークポイントごとのグループ */
const SearchConditionFormItemBreakPointGroups = ({ members }: {
  members: { [key: string]: MetadataForPage.StructureMetadataMember }
}): React.ReactNode => {

  // BreakPointの塊に分ける
  const breakPoints = Object.entries(members).reduce((acc, [key, member]) => {
    // 画面横幅いっぱい占有するもの
    if (member.type === "RootAggregate" || member.type === "ChildAggregate" || member.type === "ChildrenAggregate") {
      acc.push({ members: [member], fullWidth: true })
    }

    // 縦並びで表示するもの
    if (acc.length === 0 || acc[acc.length - 1].fullWidth) {
      acc.push({ members: [member], fullWidth: false })
    } else {
      acc[acc.length - 1].members.push(member)
    }
    return acc
  }, [] as { members: MetadataForPage.StructureMetadataMember[], fullWidth: boolean }[])

  return (
    <React.Fragment>
      {breakPoints.map((breakPoint, i) => breakPoint.fullWidth ? (
        <SearchConditionFormItem key={i} member={breakPoint.members[0]} />
      ) : (
        <Layout.VForm3.BreakPoint key={i}>
          {breakPoint.members.map((member) => (
            <SearchConditionFormItem key={member.displayName} member={member} />
          ))}
        </Layout.VForm3.BreakPoint>
      ))}
    </React.Fragment>
  )
}

/** VForm3のラベルと値の組 */
const SearchConditionFormItem = ({ member }: {
  member: MetadataForPage.StructureMetadataMember
}): React.ReactNode => {
  // Root
  if (member.type === "RootAggregate") {
    return undefined // Rootは検索条件欄トップで処理済み。この分岐には来ない
  }

  // Child, Children
  if (member.type === "ChildAggregate" || member.type === "ChildrenAggregate") {
    return (
      <Layout.VForm3.FullWidthItem label={member.displayName}>
        {Object.entries(member.members).map(([key, member]) => (
          <SearchConditionFormItem key={key} member={member} />
        ))}
      </Layout.VForm3.FullWidthItem>
    )
  }

  // 外部参照
  if (member.type === "ref-to") {
    return (
      <Layout.VForm3.Item label={member.displayName} required={member.required}>
        TODO
      </Layout.VForm3.Item>
    )
  }

  // 一般ValueMember
  if (member.type !== undefined) {
    return (
      <Layout.VForm3.Item label={member.displayName} required>
        TODO
      </Layout.VForm3.Item>
    )
  }

  // 列挙型
  if (member.enumType !== undefined) {
    return (
      <Layout.VForm3.Item label={member.displayName} required>
        TODO
      </Layout.VForm3.Item>
    )
  }

  // 値オブジェクト
  if (member.valueObjectType !== undefined) {
    return (
      <Layout.VForm3.Item label={member.displayName} required>
        TODO
      </Layout.VForm3.Item>
    )
  }
}