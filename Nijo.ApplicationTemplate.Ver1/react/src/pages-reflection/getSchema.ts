import * as ReactHookForm from "react-hook-form"
import { MetadataForPage } from "../__autoGenerated/util"

/** 画面リフレクション用のメタデータと各種ユーティリティ関数 */
export const getSchema = () => {
  const metadata = MetadataForPage.getAll()

  // 参照先集約の定義を探す
  const findRefTo = (path: string): MetadataForPage.StructureMetadata => {
    // 参照先パスをreact-hook-formのget関数でヒットする形に変換
    const members = 'members' satisfies keyof MetadataForPage.StructureMetadata
    const objectPath = path.split('/').map((p, i) => i === 0 ? p : `${members}.${p}`).join('.')

    // get関数を流用して参照先集約の定義を探す
    const structureMetadata: MetadataForPage.StructureMetadata | undefined = ReactHookForm.get(metadata, objectPath)
    if (structureMetadata === undefined) throw new Error(`参照先集約の定義が見つかりません: ${path}`)
    return structureMetadata
  }

  // 主キーを列挙する。主キーがref-toの場合は参照先のキーを列挙する
  const enumerateKeyVMs = (structureMetadata: MetadataForPage.StructureMetadata): MetadataForPage.ValueMetadata[] => {
    const keys: MetadataForPage.ValueMetadata[] = []
    for (const member of Object.values(structureMetadata.members)) {
      if (!member.isKey) continue
      if (member.type === 'ref-to') {
        keys.push(...enumerateKeyVMs(findRefTo(member.refTo)))
      } else {
        keys.push(member)
      }
    }
    return keys
  }

  return {
    /** 画面リフレクション用のメタデータ */
    metadata,
    /** 参照先集約の定義を探す */
    findRefTo,
    /** 主キーを列挙する。主キーがref-toの場合は参照先のキーを列挙する */
    enumerateKeyVMs,
  }
}