import * as ReactHookForm from "react-hook-form"
import { MetadataForPage } from "../__autoGenerated/util"
import { ReferedQueryModelType } from "../__autoGenerated"

/** 画面リフレクション用のメタデータと各種ユーティリティ関数 */
export type MetadataSchema = ReturnType<typeof getSchema>

/** 画面リフレクション用のメタデータと各種ユーティリティ関数 */
export const getSchema = () => {
  const metadata = MetadataForPage.getAll()

  // 参照先集約の定義を探す
  const findRefTo = (path: ReferedQueryModelType): MetadataForPage.StructureMetadata => {
    // 参照先パスをreact-hook-formのget関数でヒットする形に変換
    const members = 'members' satisfies keyof MetadataForPage.StructureMetadata
    const objectPath = path.replace(/^ref-to:/, '').split('/').map((p, i) => i === 0 ? p : `${members}.${p}`).join('.')

    // get関数を流用して参照先集約の定義を探す
    const structureMetadata: MetadataForPage.StructureMetadata | undefined = ReactHookForm.get(metadata, objectPath)
    if (structureMetadata === undefined) throw new Error(`参照先集約の定義が見つかりません: ${path}`)
    return structureMetadata
  }

  // 主キーを列挙する。主キーがref-toの場合は参照先のキーを列挙する
  const enumerateKeyVMs = (structureMetadata: MetadataForPage.StructureMetadata): MetadataForPage.ValueMetadata[] => {
    const keys: MetadataForPage.ValueMetadata[] = []
    for (const member of Object.values(structureMetadata.members)) {
      if (!member.isKey) continue
      if (member.type === 'ref-to') {
        keys.push(...enumerateKeyVMs(findRefTo(member.refTo)))
      } else {
        keys.push(member)
      }
    }
    return keys
  }

  // SingleViewのURLの主キーの名前を列挙する
  const getSingleViewUrlKeys = (structureMetadata: MetadataForPage.StructureMetadata): `key${number}`[] => {
    if (structureMetadata.type !== 'RootAggregate') throw new Error(`SingleViewのURLの主キーの名前を列挙するにはRootAggregateである必要があります。: ${structureMetadata.type}`)
    const keys: `key${number}`[] = []
    for (let i = 0; i < enumerateKeyVMs(structureMetadata).length; i++) {
      keys.push(`key${i}`)
    }
    return keys
  }

  return {
    /** 画面リフレクション用のメタデータ */
    metadata,
    /** 参照先集約の定義を探す */
    findRefTo,
    /** 主キーを列挙する。主キーがref-toの場合は参照先のキーを列挙する */
    enumerateKeyVMs,
    /** SingleViewのURLの主キーの名前を列挙する */
    getSingleViewUrlKeyNames: getSingleViewUrlKeys,
  }
}

/**
 * 検索条件として使用されるメンバーのエントリ（パスとメタデータ）のリストを取得します。
 * ネストされたメンバーもフラットなリストとして返します。
 */
export const getSearchConditionEntries = (
  metadata: MetadataForPage.StructureMetadata,
  _schema: MetadataSchema, // schema パラメータは現時点では直接使用しないが、将来的な拡張性のために残す
  currentPath: string[] = [],
): Array<{ path: string[], member: MetadataForPage.StructureMetadataMember }> => {
  const entries: Array<{ path: string[], member: MetadataForPage.StructureMetadataMember }> = [];

  for (const memberName in metadata.members) {
    const member = metadata.members[memberName];
    const newPath = [...currentPath, memberName];

    // getEntry の代替: 直接 member を使用する

    if (member.type === 'ChildAggregate') {
      // ChildAggregate のメンバーを再帰的に探索
      entries.push(...getSearchConditionEntries(member as MetadataForPage.StructureMetadata, _schema, newPath));
    } else if (member.type !== 'RootAggregate' && member.type !== 'ChildrenAggregate') {
      // ValueMetadata, RefMetadata, Enum, ValueObject の場合
      // RootAggregate と ChildrenAggregate は検索条件の末端にはならないため除外
      entries.push({ path: newPath, member });
    }
    // RootAggregate と ChildrenAggregate 自体は entries に追加しない (そのメンバーは再帰で処理される)
  }
  return entries;
};
