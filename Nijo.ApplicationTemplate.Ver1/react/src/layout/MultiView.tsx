import { UseFormReturn } from "react-hook-form"
import { DisplayDataTypeMap, QueryModelType, SearchConditionTypeMap } from "../__autoGenerated"
import { ColumnDef, ColumnDefFactories } from "./cellType"
import React from "react"

/**
 * QueryModelのルート集約の一覧検索画面。
 *
 * ## 画面構成
 * - 画面ヘッダ部
 *   - 画面タイトル（呼び出し側で指定する）
 *   - クリアボタン
 *     - 検索条件欄の内容を画面初期表示時のものにリセットする。
 *   - 検索ボタン
 *     - 現在入力されている内容で検索を実行する。検索処理のReactフックは自動生成されたものを使用する。
 *     - 検索ボタンの「▽」をクリックすると、画面上部の検索条件欄を折り畳みまたは展開できる。
 * - 画面上部
 *   - 検索条件欄。呼び出し側で指定する。
 * - 画面上部と下部の境界部分
 *   - 検索結果件数の総数
 *   - 1ページあたりの表示件数（ドロップダウンで指定可能）
 *   - 並び順（MultiSelectで指定可能）
 *   - 境界部分をドラッグして、画面上部のサイズを変更できる。（react-resizable-panelsを使用）
 * - 画面下部
 *   - 検索結果一覧。列定義を呼び出し側で指定する。
 *   - ページネーションは自動的に表示される。
 */
export const MultiView = <TQueryModel extends QueryModelType>(
  props: MultiViewProps<TQueryModel>,
) => {

  return (
    <div>
      TODO: 未実装
    </div>
  )
}

export type MultiViewProps<TQueryModelType extends QueryModelType> = {
  /** QueryModelの種類 */
  queryModel: TQueryModelType
  /**
   * この値がtrueになると初期表示処理等が開始される。
   * 例えば、検索条件欄の初期値にログインユーザーの情報が必要で、
   * ログインユーザー情報はサーバー側から非同期で取得してくるといった場合、
   * ログインユーザー情報取得完了まではこの値をfalseにしておく。
   */
  isReady: boolean
  /** 画面タイトル */
  title?: string
  /** 画面上部の検索条件欄 */
  children?: (props: {
    /** 画面の検索条件を管理するReact Hook Formのメソッド。 */
    reactHookFormMethods: UseFormReturn<SearchConditionTypeMap[TQueryModelType]>
  }) => React.ReactNode
  /**
   * 画面初期表示時の検索条件。
   * 挙動を安定させるために `useMemo` でラップした値を使用すること。
   */
  initialSearchCondition?: SearchConditionTypeMap[TQueryModelType]
  /**
   * 列を定義する関数。
   * この関数の参照が変わる度に検索結果グリッドが再レンダリングされるため、
   * 原則として `useCallback` を使用すること。
   * @param cellType セル型定義ヘルパー関数の一覧。
   */
  getColumnDefs: (cellType: ColumnDefFactories<DisplayDataTypeMap[TQueryModelType]>) => ColumnDef<DisplayDataTypeMap[TQueryModelType]>[]
}
