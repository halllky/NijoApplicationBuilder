import * as React from "react"
import { AnyMemberConstraints } from "../__autoGenerated/util"

/**
 * 入力フォームのどの項目にどのような制約があるかの情報を提供するコンテキスト。
 * 必須入力、最大桁数、など。
 * nijo.xmlの定義から自動生成された値を入力フォームに渡すのに使用する。
 */
export type ClientSideValidationContextType = {
  /**
   * 特定の項目にどのような制約があるかを取得する。
   *
   * @param name 画面全体からこのフィールドへの画面
   * @returns 制約
   */
  getConstraint: (name: string) => AnyMemberConstraints
  /**
   * 特定の項目にどのようなエラーがあるかを取得する。
   *
   * @param name 画面全体からこのフィールドへの画面
   * @returns エラー
   */
  getClientSideErrors: (name: string) => string[]
}

/**
 * クライアントサイドでのバリデーションを行うためのコンテキスト。
 * 必須入力、最大桁数、などを提供し、クライアント側での各項目のエラー情報を保持する。
 * 主に、nijo.xmlの定義から自動生成された値を入力フォームに渡すのに使用する。
 *
 * データの登録更新を伴う画面のルートでプロバイダーが定義される。
 * その画面中の各コンポーネントは、各関数のプロパティで渡す `name` を使って、その項目に対する制約を取得したり、エラー情報を取得したりする。
 */
export const ClientSideValidationContext = React.createContext<ClientSideValidationContextType>({
  getConstraint: () => ({}),
  getClientSideErrors: () => [],
})

/**
 * ノーマライズとバリデーションを行なう関数。
 * バリデーションが成功した場合は、ノーマライズされた値を返す。
 * バリデーションが失敗した場合は、undefinedを返す。
 */
export type NormalizeAndValidationFunction<T> = (name: string, value: unknown) => T | undefined

/**
 * クライアントサイドでのバリデーションを行うフック。
 * バリデーションルールは `FormItemConstraintContext` で提供される。
 * 文字と数値に関しては、ノーマライズ（全角数字を半角数字に変換するなど）が可能であればノーマライズを行ない、
 * その後バリデーションを行なう。
 */
export const useClientSideValidator = () => {
  const { getConstraint } = React.useContext(ClientSideValidationContext)

  /** 文字列のノーマライズとバリデーションを行なう。 */
  const normalizeAndValidateStringValue: NormalizeAndValidationFunction<string | undefined> = React.useCallback((name, value) => {
    const constraint = getConstraint(name)
    // TODO: ノーマライズを行なう。
    // TODO: バリデーションを行なう。
    return value as string | undefined
  }, [getConstraint])

  /** 数値のノーマライズとバリデーションを行なう。 */
  const normalizeAndValidateNumberValue: NormalizeAndValidationFunction<number | undefined> = React.useCallback((name, value) => {
    const constraint = getConstraint(name)
    // TODO: ノーマライズを行なう。
    // TODO: バリデーションを行なう。
    return value as number | undefined
  }, [getConstraint])

  return {
    /** 文字列のノーマライズとバリデーションを行なう。 */
    normalizeAndValidateStringValue,
    /** 数値のノーマライズとバリデーションを行なう。 */
    normalizeAndValidateNumberValue,
  }
}