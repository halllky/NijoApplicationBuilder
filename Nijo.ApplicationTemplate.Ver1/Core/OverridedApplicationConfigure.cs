using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using NLog;
using NLog.Config;
using NLog.Targets;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyApp.Core;

public class OverridedApplicationConfigure : DefaultConfiguration {

    public override void ConfigureServices(IServiceCollection services) {
        // 自動生成される設定処理はすべて行なう
        base.ConfigureServices(services);

        // このクラスの解決
        services.AddTransient<DefaultConfiguration, OverridedApplicationConfigure>();

        // アプリケーションサービス（具象クラス）
        services.AddScoped(provider => {
            return new OverridedApplicationService(provider);
        });

        // 実行時設定（appsettings.json）
        services.AddTransient(provider => {
            var settings = new RuntimeSetting();
            new ConfigurationBuilder()
                .AddJsonFile("appsettings.json", true)
                .AddJsonFile("appsettings.Development.json", false)
                .Build()
                .GetSection("Nijo")
                .Bind(settings);
            return settings;
        });
    }


    protected override AutoGeneratedApplicationService ConfigureApplicationService(IServiceProvider services) {
        return new OverridedApplicationService(services);
    }


    #region DB
    /// <summary>
    /// DBコンテキスト接続設定
    /// </summary>
    protected override void ConfigureDbContext(IServiceProvider services, DbContextOptionsBuilder options) {
        // SQLiteを使用する
        var settings = services.GetRequiredService<RuntimeSetting>();
        var connStr = settings.GetCurrentProfile().ConnStr;
        options.UseSqlite(connStr);

        // 自動生成される登録更新処理は変更追跡オフが前提
        options.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
    }

    /// <summary>
    /// <see cref="DbContext.OnConfiguring(DbContextOptionsBuilder)"/>
    /// </summary>
    public override void OnConfiguringDbContext(DbContextOptionsBuilder optionsBuilder, Logger logger) {
        // SQL発行時にログ出力するようにする
        optionsBuilder.LogTo(
            sql => logger.Debug(sql),
            Microsoft.Extensions.Logging.LogLevel.Information,
            Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions.SingleLine);
    }
    #endregion DB


    #region ログ
    /// <summary>
    /// ログファイル名規則。表記はNLogのルールに従う。
    /// </summary>
    protected virtual string LogFileNameRule => "${date:format=yyyy-MM-dd}.log";
    /// <summary>
    /// ログ出力設定
    /// </summary>
    protected override Logger ConfigureLogger(IServiceProvider services) {
        var settings = services.GetRequiredService<RuntimeSetting>();
        var config = new LoggingConfiguration();

        // ファイル出力
        var fileTarget = new FileTarget("logfile") {
            FileName = Path.Combine(Directory.GetCurrentDirectory(), settings.LogDirectory, LogFileNameRule),
            Layout = "${longdate}\t${level:uppercase=true}\t${logger}\t${message}${onexception:inner=${newline}${exception:format=tostring}}",
            ArchiveFileName = Path.Combine(settings.LogDirectory, "archive", "${date:format=yyyy-MM-dd}.{#}.log"),
            ArchiveNumbering = ArchiveNumberingMode.Sequence,
            ArchiveAboveSize = 5 * 1024 * 1024, // 5MBを越えたらアーカイブ
            MaxArchiveFiles = 100
        };
        config.AddTarget(fileTarget);
        config.AddRuleForAllLevels(fileTarget);

        // 設定を適用して新しいロガーを作成
        LogManager.Configuration = config;
        return LogManager.GetCurrentClassLogger();
    }
    #endregion ログ
}
