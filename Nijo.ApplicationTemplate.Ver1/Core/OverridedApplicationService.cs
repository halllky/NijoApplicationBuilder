using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyApp.Core;

public partial class OverridedApplicationService : AutoGeneratedApplicationService
{
    public OverridedApplicationService(IServiceProvider serviceProvider) : base(serviceProvider)
    {
    }

    /// <summary>
    /// ユーザー1人が特定のCommand/Queryモデルに対して持っている権限レベルを返す
    /// </summary>
    public E_AuthLevel GetAuthLevel(E_CommandQueryType modelType)
    {
        return E_AuthLevel.Writable; // 特にロジックなし
    }

    public override Task<CommandModelテストReturnType> Execute(CommandModelテストParameter param, IPresentationContext<CommandModelテストParameterMessages> context)
    {
        throw new NotImplementedException();
    }

    protected override IQueryable<顧客SearchResult> CreateQuerySource(顧客SearchCondition searchCondition, IPresentationContext<顧客Messages> context)
    {
        return DbContext.顧客DbSet.Select(e => new 顧客SearchResult
        {
            顧客ID = e.顧客ID,
            顧客名 = e.顧客名,
            住所_市町村 = e.住所!.市町村,
            住所_都道府県 = e.住所!.都道府県,
            Version = (int)e.Version!,
        });
    }
}

/// <summary>
/// ユーザー1人が特定のCommand/Queryモデルに対して持っている権限レベル
/// </summary>
public enum E_AuthLevel
{
    /// <summary>権限なし</summary>
    None = 0,
    /// <summary>参照権限あり、更新権限なし</summary>
    Readable = 1,
    /// <summary>参照権限・更新権限ともにあり</summary>
    Writable = 2,
}
