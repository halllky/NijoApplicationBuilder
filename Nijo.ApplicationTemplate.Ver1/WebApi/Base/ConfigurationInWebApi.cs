using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using MyApp.Core;
using System.Net;
using System.Text.Json;
using System.Text.Json.Nodes;

namespace MyApp.WebApi.Base;

/// <summary>
/// <see cref="DefaultConfigurationInWebApi"/> の実装。
/// </summary>
internal class ConfigurationInWebApi : DefaultConfigurationInWebApi {

    /// <summary>
    /// 自動生成されたActionに対する機能単位の認証
    /// </summary>
    public override void OnAutoGeneratedActionAuthorization(AuthorizationFilterContext filterContext, AutoGeneratedActionMetadata metadata) {
        var app = filterContext.HttpContext.RequestServices.GetRequiredService<OverridedApplicationService>();
        var authLevel = app.GetAuthLevel(metadata.ModelType);

        // 参照系処理の閲覧権限
        if (metadata.ReadWrite == E_AutoGeneratedActionType.Read && authLevel < E_AuthLevel.Readable) {
            filterContext.Result = new UnauthorizedResult();
        }
        // 更新系処理の更新権限
        if (metadata.ReadWrite == E_AutoGeneratedActionType.Write && authLevel < E_AuthLevel.Writable) {
            filterContext.Result = new UnauthorizedResult();
        }
    }

    public override Task<IPresentationContext<TMessageRoot>> InitializePresentationContextAsync<TMessageRoot>(ModelBindingContext bindingContext, AutoGeneratedActionMetadata metadata) {

        // `useHttpRequest` フック内でこの名前のクエリパラメータが付される
        const string PARAM_IGNORE_CONFIRM = "ignore-confirm";
        bool blnIgnoreConfirm;
        if (!bindingContext.HttpContext.Request.Query.TryGetValue(PARAM_IGNORE_CONFIRM, out var strIgnoreConfirm)) {
            blnIgnoreConfirm = false;
        } else if (!bool.TryParse(strIgnoreConfirm, out var b)) {
            blnIgnoreConfirm = false;
        } else {
            blnIgnoreConfirm = b;
        }

        // オプションを作成
        var presentationContextOptions = new PresentationContextOptions {
            IgnoreConfirm = blnIgnoreConfirm,
        };

        // コンテキスト引数を作成
        IPresentationContext<TMessageRoot> presentationContext = new PresentationContextInWebApi<TMessageRoot>(
            MessageContainer.GetDefaultClass<TMessageRoot>([]),
            presentationContextOptions);

        return Task.FromResult(presentationContext);
    }

    public override Task<TParameter> ParseComplexRequestBodyAsync<TParameter>(ModelBindingContext bindingContext, AutoGeneratedActionMetadata metadata) {
        // クライアント側から送られてきたパラメータは
        // Content-Type: multipart/form-data
        // のリクエストボディのこの名前のセクションにJSONで入っているのでそこから取得する
        const string PARAM_DATA = "complex-post-request-body";

        var jsonOption = JsonUtil.GetDefaultJsonSerializerOptions();
        var dataSection = bindingContext.HttpContext.Request.Form[PARAM_DATA];
        var data = JsonSerializer.Deserialize<TParameter>(dataSection.ToString(), jsonOption)
            ?? throw new InvalidOperationException("リクエストの型が不正です。");

        return Task.FromResult(data);
    }

    public override IActionResult ToActionResult<TMessageRoot>(object? returnValue, IPresentationContext<TMessageRoot> presentationContext) {
        var ctx = (PresentationContextInWebApi<TMessageRoot>)presentationContext;
        var jsonOptions = JsonUtil.GetDefaultJsonSerializerOptions();

        // レスポンスボディ。
        // 各項目の名前は `useHttpRequest.tsx` で定義されているものと合わせる必要がある
        var responseBody = new JsonObject();
        if (returnValue != null) {
            responseBody["returnValue"] = JsonSerializer.SerializeToNode(returnValue, jsonOptions);
        }
        var confirms = new JsonArray();
        foreach (var text in ctx.Confirms) {
            confirms.Add(text);
        }
        responseBody["confirms"] = confirms;
        responseBody["detail"] = ctx.Messages.ToJsonObject();
        responseBody["toastMessage"] = ctx.ToastMessage; // ソースコード自動生成と関係ない独自処理

        // ステータスコード。
        // `useHttpRequest.tsx` でレスポンスを受け取ったあとの処理と整合性がとれている必要がある
        var objectResult = new ObjectResult(JsonSerializer.Serialize(responseBody, jsonOptions));
        if (ctx.Messages.HasError() || !ctx.Options.IgnoreConfirm && ctx.HasConfirm()) {
            objectResult.StatusCode = (int)HttpStatusCode.Accepted;

        } else {
            objectResult.StatusCode = (int)HttpStatusCode.OK;
        }

        return objectResult;
    }
}
