using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using MyApp.Core; // PresentationContextInWebApi と JsonUtil のため

namespace MyApp.WebApi.Base;

public class AutoGeneratedModelBinderProvider : IModelBinderProvider {
    public IModelBinder? GetBinder(ModelBinderProviderContext context) {
        ArgumentNullException.ThrowIfNull(context);

        var modelType = context.Metadata.ModelType;

        // IPresentationContext<TMessageRoot> 型の引数か判定
        if (modelType.IsGenericType && modelType.GetGenericTypeDefinition() == typeof(IPresentationContext<>)) {
            var messageRootType = modelType.GetGenericArguments()[0];
            var binderType = typeof(ContextModelBinder<>).MakeGenericType(messageRootType);
            return (IModelBinder?)Activator.CreateInstance(binderType);
        }

        // 上記以外（= data パラメータ）の場合
        // ここで特定の基底クラスやインターフェースをチェックすることも可能
        // 例: if (typeof(ICommandParameter).IsAssignableFrom(modelType))
        // 現状では IPresentationContext<> 以外をすべて data パラメータとみなす
        var dataBinderType = typeof(DataModelBinder<>).MakeGenericType(modelType);
        return (IModelBinder?)Activator.CreateInstance(dataBinderType);
    }
}

// data パラメータ用モデルバインダ
public class DataModelBinder<TParameter> : IModelBinder {
    public Task BindModelAsync(ModelBindingContext bindingContext) {
        ArgumentNullException.ThrowIfNull(bindingContext);

        var request = bindingContext.HttpContext.Request;

        // multipart/form-data の場合、特定のフォームフィールドからJSONを取得
        if (request.HasFormContentType && request.Form.TryGetValue("complex-post-request-body", out var dataSection)) {
            if (!string.IsNullOrEmpty(dataSection)) {
                try {
                    var jsonOptions = JsonUtil.GetDefaultJsonSerializerOptions();
                    var data = JsonSerializer.Deserialize<TParameter>(dataSection.ToString(), jsonOptions);
                    if (data != null) {
                        bindingContext.Result = ModelBindingResult.Success(data);
                        return Task.CompletedTask;
                    }
                } catch (JsonException ex) {
                    bindingContext.ModelState.AddModelError(bindingContext.ModelName, $"JSON deserialization error: {ex.Message}");
                    bindingContext.Result = ModelBindingResult.Failed();
                    return Task.CompletedTask;
                }
            }
        }

        // 上記以外（例: application/json）の場合、リクエストボディ全体をデシリアライズ
        // 注: デフォルトの BodyModelBinder と競合する可能性があるため、
        //     Controller 側で [FromBody] 属性を明示しない等の注意が必要になる場合があります。
        //     ここでは一旦、上記 multipart/form-data のケースのみを優先的に処理します。
        //     もし application/json 等もこのバインダーで処理したい場合は、以下のようなロジックを追加します。
        /*
        else if (request.ContentType?.StartsWith("application/json", StringComparison.OrdinalIgnoreCase) == true) {
            try {
                using var reader = new StreamReader(request.Body);
                var body = await reader.ReadToEndAsync();
                if (!string.IsNullOrEmpty(body)) {
                    var jsonOptions = JsonUtil.GetDefaultJsonSerializerOptions();
                    var data = JsonSerializer.Deserialize<TParameter>(body, jsonOptions);
                    if (data != null) {
                        bindingContext.Result = ModelBindingResult.Success(data);
                        return;
                    }
                }
            } catch (JsonException ex) {
                bindingContext.ModelState.AddModelError(bindingContext.ModelName, $"JSON deserialization error: {ex.Message}");
                bindingContext.Result = ModelBindingResult.Failed();
                return;
            }
        }
        */

        // バインドできなかった場合
        bindingContext.Result = ModelBindingResult.Failed();

        return Task.CompletedTask;
    }
}

// context パラメータ用モデルバインダ
public class ContextModelBinder<TMessageRoot> : IModelBinder where TMessageRoot : class, IMessageContainer, new() {
    public Task BindModelAsync(ModelBindingContext bindingContext) {
        ArgumentNullException.ThrowIfNull(bindingContext);

        var httpContext = bindingContext.HttpContext;

        // `useHttpRequest` フック内でこの名前のクエリパラメータが付される
        const string PARAM_IGNORE_CONFIRM = "ignore-confirm";
        bool blnIgnoreConfirm;
        if (!httpContext.Request.Query.TryGetValue(PARAM_IGNORE_CONFIRM, out var strIgnoreConfirm)) {
            blnIgnoreConfirm = false;
        } else if (!bool.TryParse(strIgnoreConfirm, out var b)) {
            blnIgnoreConfirm = false;
        } else {
            blnIgnoreConfirm = b;
        }

        // PresentationContext のインスタンス作成
        var presentationContextOptions = new PresentationContextOptions {
            IgnoreConfirm = blnIgnoreConfirm,
        };
        // TMessageRoot のデフォルトインスタンスを取得する処理は GetDefaultClass を使う想定
        var messages = MessageContainer.GetDefaultClass<TMessageRoot>([]);
        var presentationContext = new PresentationContextInWebApi<TMessageRoot>(messages, presentationContextOptions);

        bindingContext.Result = ModelBindingResult.Success(presentationContext);
        return Task.CompletedTask;
    }
}
