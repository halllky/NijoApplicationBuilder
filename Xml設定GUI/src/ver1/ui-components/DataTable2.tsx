import React from "react"
import useEvent from "react-use-event-hook"
import * as ReactHookForm from "react-hook-form"
import * as Input from "../../__autoGenerated/input"
import * as Layout from "../../__autoGenerated/collection"
import { SectionTitle } from "./SectionTitle"

/** DataTableのラッパー */
export const DataTable2 = <
  TField extends ReactHookForm.FieldValues,
  TArrayName extends ReactHookForm.ArrayPath<TField>
>(props: {
  title?: string
  name: TArrayName
  control: ReactHookForm.Control<TField>
  columns: Layout.DataTableColumn<ReactHookForm.FieldArrayWithId<TField, TArrayName>>[]
  createNewItem: () => ReactHookForm.FieldArrayWithId<TField, TArrayName>
  className?: string
}) => {

  const gridRef = React.useRef<Layout.DataTableRef<ReactHookForm.FieldArrayWithId<TField, TArrayName>>>(null)
  const fieldArray = ReactHookForm.useFieldArray({ name: props.name, control: props.control })

  const handleAdd = useEvent(() => {
    fieldArray.append(props.createNewItem())
  })

  const handleRemove = useEvent(() => {
    fieldArray.remove(gridRef.current?.getSelectedRows().map(r => r.rowIndex))
  })

  return (
    <div className={`flex flex-col ${props.className ?? ''}`}>
      <div className="flex flex-wrap gap-2 items-center">
        <SectionTitle>
          {props.title}
        </SectionTitle>
        <div className="basis-2"></div>
        <Input.IconButton outline mini onClick={handleAdd}>行追加</Input.IconButton>
        <Input.IconButton outline mini onClick={handleRemove}>行削除</Input.IconButton>
      </div>
      <Layout.DataTable
        ref={gridRef}
        data={fieldArray.fields}
        columns={props.columns}
        onChangeRow={fieldArray.update}
        className="border border-color-3 min-h-32"
      />
    </div>
  )
}
