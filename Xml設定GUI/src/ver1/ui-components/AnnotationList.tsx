import React from "react"
import useEvent from "react-use-event-hook"
import * as ReactHookForm from "react-hook-form"
import * as Input from "../../__autoGenerated/input"
import { UUID } from "uuidjs"
import { Annotation } from "../types"
import { Accordion } from "./Accordion"
import { MarkdownTextarea } from "./MarkdownTextarea"

type AnnotationListPath<TField extends ReactHookForm.FieldValues> = {
  [K in ReactHookForm.ArrayPath<TField>]: ReactHookForm.FieldArrayPathValue<TField, K> extends Annotation[] ? K : never
}[ReactHookForm.ArrayPath<TField>]

/** 注釈 */
export const AnnotationList = <
  TField extends ReactHookForm.FieldValues,
  TPath extends AnnotationListPath<TField>
>(props: {
  name: TPath
  control: ReactHookForm.Control<TField>
  className?: string
}) => {
  type ArrayOwner = { 'any': Annotation[] }
  const fieldArray = ReactHookForm.useFieldArray<ArrayOwner, 'any'>({
    name: props.name as 'any',
    control: props.control as unknown as ReactHookForm.Control<ArrayOwner>,
  })

  const handleAdd: React.MouseEventHandler<HTMLButtonElement> = useEvent(e => {
    fieldArray.append({
      uniqueId: UUID.generate(),
      text: '',
    })
    e.stopPropagation()
  })

  const handleRemove = useEvent((index: number) => {
    const text = fieldArray.fields[index]?.text
    if (text && !window.confirm(`※${index + 1}を削除してよいですか？`)) return;
    fieldArray.remove(index)
  })

  const handleChangeText = useEvent((index: number, text: string) => {
    console.log(777, text)
    fieldArray.update(index, { ...fieldArray.fields[index], text })
  })

  return (
    <ul className="text-sm">
      {fieldArray.fields?.map((annotation, index) => (
        <li key={annotation.uniqueId} className="flex items-start gap-1">
          <span className="my-1">
            ※{index + 1}
          </span>
          <MarkdownTextarea
            value={annotation.text}
            onChange={val => handleChangeText(index, val)}
            placeholder="注釈を書いてください"
            className="flex-1"
          />
          <Input.IconButton outline mini onClick={() => handleRemove(index)} className="my-1">削除</Input.IconButton>
        </li>
      ))}
      <li>
        <Input.IconButton outline mini onClick={handleAdd}>注釈を追加</Input.IconButton>
      </li>
    </ul>
  )
}
