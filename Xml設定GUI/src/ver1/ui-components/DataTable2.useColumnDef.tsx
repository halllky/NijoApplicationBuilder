import React from "react"
import * as Layout from "../../__autoGenerated/collection"
import { 属性種類定義 } from "../types"

/** 列定義 */
export const useColumnDef = <TRow,>(createColumnDefs: (helpers: UseColumnDefArgs<TRow>) => Layout.DataTableColumn<TRow>[]) => {
  const columnDefs: Layout.DataTableColumn<TRow>[] = React.useMemo(() => createColumnDefs({
    text,
    specification,
  }), [createColumnDefs])

  return columnDefs
}

type UseColumnDefArgs<TRow> = {
  text: typeof text<TRow>
  specification: typeof specification<TRow>
}



/** 文字の列 */
const text = <TRow,>(props: {
  id: string
  getValue: (row: TRow) => string | undefined
  setValue: (row: TRow, value: string | undefined, rowIndex: number) => void
  header?: string
  headerGroupName?: string
  defaultWidthPx?: number
}): Layout.DataTableColumn<TRow> => ({
  id: props.id,
  header: props.header,
  headerGroupName: props.headerGroupName,
  defaultWidthPx: props.defaultWidthPx,
  onClipboardCopy: (row, rowIndex) => props.getValue(row) ?? '',
  render: (row, rowIndex) => {
    const value = props.getValue(row)
    return (
      <span>
        {value}&nbsp;
      </span>
    )
  },
  editSetting: {
    type: 'text',
    onStartEditing: row => props.getValue(row),
    onEndEditing: (row, value, rowIndex) => props.setValue(row, value, rowIndex),
    onClipboardPaste: (row, value, rowIndex) => props.setValue(row, value, rowIndex),
  },
})

/** 仕様の列 */
const specification = <TRow,>(props: {
  id: string
  getValue: (row: TRow) => 属性種類定義.Specification | undefined
  setValue: (row: TRow, value: string | undefined, rowIndex: number) => void
  header?: string
  headerGroupName?: string
  defaultWidthPx?: number
}): Layout.DataTableColumn<TRow> => ({
  id: props.id,
  header: props.header,
  headerGroupName: props.headerGroupName,
  onClipboardCopy: (row, rowIndex) => props.getValue(row) ?? '',
  render: (row, rowIndex) => {
    const value = props.getValue(row)
    return (
      <span className={value === 属性種類定義.BY_MODEL ? 'text-amber-700' : undefined}>
        {value}&nbsp;
      </span>
    )
  },
  editSetting: {
    type: 'text',
    onStartEditing: row => props.getValue(row),
    onEndEditing: (row, value, rowIndex) => props.setValue(row, value, rowIndex),
    onClipboardPaste: (row, value, rowIndex) => props.setValue(row, value, rowIndex),
  },
})
