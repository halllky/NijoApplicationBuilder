import React from "react"
import useEvent from "react-use-event-hook"
import * as ReactHookForm from "react-hook-form"
import * as Icon from "@heroicons/react/24/solid"
import * as Input from "../../__autoGenerated/input"
import { MarkdownTextarea } from "./MarkdownTextarea"
import { UUID } from "uuidjs"

/** アウトライナーの1行分 */
export type OutlinerItem = {
  uniqueId: string
  /** 傍点 */
  bullet?: string
  /** インデント何段目か */
  indent: number
  /** テキスト。複数列あり */
  text: string[]
}

/** useFieldArrayの戻り値の型がうまく推論されないので騙す */
type OutlinerOwnerInternal = {
  arr: OutlinerItem[] | undefined
}

/** アウトライナーの親子コンポーネント間で受け渡す値 */
type ContextValueInternal = {
  /** react hook form のOutlinerの配列までのフィールド名 */
  fieldArrayName: string
  /** 列数 */
  columnCount: number
  /** 傍点の横幅(px) */
  bulletSize: number
}

// ***************************************************

/** アウトライナー */
export const Outliner = <
  TField extends ReactHookForm.FieldValues,
  TPath extends ReactHookForm.FieldArrayPath<TField> & ReactHookForm.FieldPathByValue<TField, OutlinerItem[] | undefined>
>(props: {
  name: TPath
  control: ReactHookForm.Control<TField>
  /** 傍点の横幅(px) */
  bulletSize?: number
  /** 列ヘッダ名 */
  columnHeaders?: string[]
  /** ヘッダ非表示 */
  hideHeader?: boolean
  className?: string
}) => {

  const { fields, update, append, remove } = ReactHookForm.useFieldArray<OutlinerOwnerInternal, 'arr'>({
    name: props.name as 'arr',
    control: props.control as unknown as ReactHookForm.Control<OutlinerOwnerInternal>,
  })

  const activeElementRef = React.useRef<Element>()
  const [el, setEl] = React.useState<Element>()
  const changeActiveElement = useEvent((el: Element) => {
    activeElementRef.current = el
    setEl(el)
  })

  const contextValue = React.useMemo((): ContextValueInternal => ({
    fieldArrayName: props.name,
    bulletSize: props.bulletSize ?? 40,
    columnCount: props.columnHeaders?.length ?? 1,
  }), [props.name, props.bulletSize, props.columnHeaders, activeElementRef, changeActiveElement])

  const handleAppend = useEvent(() => {
    append({
      uniqueId: UUID.generate(),
      indent: 0,
      text: [''],
    })
  })

  const gridStyle = React.useMemo((): React.CSSProperties => {
    const firstColumnWidth = `minmax(${contextValue.bulletSize}px, 1.2fr)`
    const restColumnWidth = `1fr`
    const deleteButtonWidth = `minmax(6rem, auto)`
    const columns = props.columnHeaders ?? Array.from({ length: 1 })
    const gridTemplateColumns = [
      ...columns.map((_, i) => i === 0 ? firstColumnWidth : restColumnWidth),
      deleteButtonWidth,
    ].join(' ')

    return {
      gridTemplateColumns
    }
  }, [props.columnHeaders, contextValue.bulletSize])

  return (
    <div className={`grid ${props.className ?? ''}`} style={gridStyle}>

      {/* ヘッダ（propsで指定された列） */}
      {!props.hideHeader && (
        <>
          {(props.columnHeaders ?? Array.from({ length: 1 })).map((header, index) => (
            <div key={index} className="px-px text-color-6 bg-color-2 border-l border-t border-color-4">
              {header}
            </div>
          ))}

          {/* ヘッダ（削除ボタン等の列） */}
          <div className="px-px text-color-6 bg-color-2 border-x border-t border-color-4">
          </div>
        </>
      )}


      {fields.map((item, index) => (
        <OutlinerItemComponent
          key={item.uniqueId}
          index={index}
          value={item}
          onChange={update}
          onRemove={remove}
          ctx={contextValue}
        />
      ))}

      <div className={`col-span-full py-px ${fields.length > 0 || !props.hideHeader ? 'border-t border-color-4' : ''}`}>
        <Input.IconButton onClick={handleAppend} outline mini className="">
          追加
        </Input.IconButton>
      </div>
    </div>
  )
}

/** アウトライナー1行分 */
const OutlinerItemComponent = (props: {
  index: number
  value: OutlinerItem
  onChange: (index: number, v: OutlinerItem) => void
  onRemove: (index: number) => void
  ctx: ContextValueInternal
}) => {

  // テキスト変更時
  const handleBulletChanged = useEvent((bullet: string) => {
    props.onChange(props.index, { ...props.value, bullet })
  })
  const handleTextChanged = useEvent((columnIndex: number, value: string) => {
    const text: string[] = [...props.value.text]
    text[columnIndex] = value
    props.onChange(props.index, { ...props.value, text })
  })

  // インデント上げ下げ
  const handleDownIndent = useEvent(() => {
    const indent = Math.max(0, props.value.indent - 1)
    if (indent !== props.value.indent) {
      props.onChange(props.index, { ...props.value, indent })
    }
  })
  const handleUpIndent = useEvent(() => {
    const indent = props.value.indent + 1
    if (indent !== props.value.indent) {
      props.onChange(props.index, { ...props.value, indent })
    }
  })

  // 削除
  const handleRemove = useEvent(() => {
    props.onRemove(props.index)
  })

  return (
    <>
      {/* 左端の列 */}
      <div className="flex">
        {/* インデント */}
        {Array.from({ length: props.value.indent }).map((_, i) => (
          <div
            key={i}
            className="border-l border-color-4"
            style={{
              flexBasis: `${props.ctx.bulletSize}px`,
            }}></div>
        ))}

        <div className="flex-1 flex gap-1 border-l border-t border-color-4">
          {/* 傍点 */}
          <MarkdownTextarea
            value={props.value.bullet}
            onChange={handleBulletChanged}
            className="font-bold"
            style={{ minWidth: `${props.ctx.bulletSize}px` }}
            placeholder="・"
          />

          {/* テキスト */}
          <MarkdownTextarea
            value={props.value.text[0]}
            onChange={e => handleTextChanged(0, e)}
            className="flex-1 text-sm"
          />
        </div>
      </div>

      {/* 左端以外の列 */}
      {Array.from({ length: props.ctx.columnCount }).slice(1).map((_, i) => (
        <MarkdownTextarea
          key={i}
          value={props.value.text[i + 1]}
          onChange={e => handleTextChanged(i + 1, e)}
          className="flex-1 text-sm border-l border-t border-color-4"
        />
      ))}

      {/* コントロール */}
      <div className="flex justify-start items-start gap-px p-px border-x border-t border-color-4">
        <Input.IconButton icon={Icon.ChevronDoubleLeftIcon} onClick={handleDownIndent} outline hideText>
          インデントを下げる
        </Input.IconButton>
        <Input.IconButton icon={Icon.ChevronDoubleRightIcon} onClick={handleUpIndent} outline hideText>
          インデントを上げる
        </Input.IconButton>
        <Input.IconButton icon={Icon.TrashIcon} onClick={handleRemove} outline hideText>
          削除
        </Input.IconButton>
      </div>
    </>
  )
}
