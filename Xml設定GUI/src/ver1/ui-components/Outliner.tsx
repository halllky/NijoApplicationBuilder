import React from "react"
import * as ReactHookForm from "react-hook-form"
import useEvent from "react-use-event-hook"
import * as Input from "../../__autoGenerated/input"
import { MarkdownTextarea } from "./MarkdownTextarea"
import { UUID } from "uuidjs"

/** アウトライナーの1行分 */
export type OutlinerItem = {
  uniqueId: string
  /** 傍点 */
  bullet?: string
  /** インデント何段目か */
  indent: number
  /** テキスト */
  text: string | undefined
}

/** useFieldArrayの戻り値の型がうまく推論されないので騙す */
type OutlinerOwnerInternal = {
  arr: OutlinerItem[] | undefined
}

/** アウトライナーの親子コンポーネント間で受け渡す値 */
type ContextValueInternal = {
  fieldArrayName: string
  /** 傍点の横幅(px) */
  bulletSize: number
}

// ***************************************************

/** アウトライナー */
export const Outliner = <
  TField extends ReactHookForm.FieldValues,
  TPath extends ReactHookForm.FieldArrayPath<TField> & ReactHookForm.FieldPathByValue<TField, OutlinerItem[] | undefined>
>(props: {
  name: TPath
  control: ReactHookForm.Control<TField>
  /** 傍点の横幅(px) */
  bulletSize?: number
  className?: string
}) => {

  const { fields, update, append, remove } = ReactHookForm.useFieldArray<OutlinerOwnerInternal, 'arr'>({
    name: props.name as 'arr',
    control: props.control as unknown as ReactHookForm.Control<OutlinerOwnerInternal>,
  })

  const activeElementRef = React.useRef<Element>()
  const [el, setEl] = React.useState<Element>()
  const changeActiveElement = useEvent((el: Element) => {
    activeElementRef.current = el
    setEl(el)
  })

  const contextValue = React.useMemo((): ContextValueInternal => ({
    fieldArrayName: props.name,
    bulletSize: props.bulletSize ?? 40,
  }), [props.name, props.bulletSize, activeElementRef, changeActiveElement])

  const handleAppend = useEvent(() => {
    append({
      uniqueId: UUID.generate(),
      indent: 0,
      text: '',
    })
  })

  return (
    <div className={`flex flex-col ${props.className ?? ''}`}>
      {fields.map((item, index) => (
        <OutlinerItemComponent
          key={item.uniqueId}
          index={index}
          value={item}
          onChange={update}
          onRemove={remove}
          ctx={contextValue}
        />
      ))}
      <Input.IconButton onClick={handleAppend} outline mini className="self-start">
        追加
      </Input.IconButton>
    </div>
  )
}

/** アウトライナー1行分 */
const OutlinerItemComponent = (props: {
  index: number
  value: OutlinerItem
  onChange: (index: number, v: OutlinerItem) => void
  onRemove: (index: number) => void
  ctx: ContextValueInternal
}) => {

  const handleBulletChanged = useEvent((bullet: string) => {
    props.onChange(props.index, { ...props.value, bullet })
  })
  const handleTextChanged = useEvent((text: string) => {
    props.onChange(props.index, { ...props.value, text })
  })
  const handleRemove = useEvent(() => {
    props.onRemove(props.index)
  })

  return (
    <div className="flex" style={{ paddingLeft: `${props.ctx.bulletSize * props.value.indent}px` }}>

      {/* 傍点 */}
      <MarkdownTextarea
        value={props.value.bullet}
        onChange={handleBulletChanged}
        className="font-bold"
        style={{ minWidth: `${props.ctx.bulletSize}px`, flexBasis: `${props.ctx.bulletSize}px` }}
        placeholder="・"
      />

      {/* テキスト */}
      <MarkdownTextarea
        value={props.value.text}
        onChange={handleTextChanged}
        className="flex-1 text-sm"
      />

      {/* コントロール */}
      <Input.IconButton onClick={handleRemove} outline mini className="self-start">
        削除
      </Input.IconButton>

    </div>
  )
}
