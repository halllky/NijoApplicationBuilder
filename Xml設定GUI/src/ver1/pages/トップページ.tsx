import * as ReactHookForm from "react-hook-form"
import * as Input from "../../__autoGenerated/input"
import { ApplicationData } from "../types"
import { PageFrame, SectionTitle } from "../ui-components"
import { SingleLineTextBox } from "../ui-components/SingleLineTextBox"
import useEvent from "react-use-event-hook"
import React from "react"

export default function () {

  const { getValues, reset, control } = ReactHookForm.useFormContext<ApplicationData>()
  const systemName = ReactHookForm.useController({ name: 'システム名', control })

  // 保存
  const fileInputRef = React.useRef<HTMLInputElement>(null)
  const handleImport = useEvent(() => {
    if (!window.confirm('保存されていない内容は破棄されます。よろしいですか？')) {
      return
    }
    fileInputRef.current?.click()
  })
  const handleFileInputChange: React.ChangeEventHandler<HTMLInputElement> = useEvent(e => {
    const file = e.target.files?.[0]
    if (!file) return;
    const reader = new FileReader()
    reader.onload = () => {
      try {
        const data = JSON.parse(reader.result as string)
        reset(data)
      } catch (err) {
        window.alert(`JSONファイルの読み取りに失敗しました: ${err}`)
      }
    }
    try {
      reader.readAsText(file) // ファイルをテキストとして読み込む
    } catch (err) {
      window.alert(`JSONファイルの読み取りに失敗しました: ${err}`)
    }
  })

  // 復元
  const handleExport = useEvent(() => {
    const json = JSON.stringify(getValues(), null, 2)
    const blob = new Blob([json], { type: "application/json" })
    const url = URL.createObjectURL(blob)

    const a = document.createElement("a")
    a.href = url
    a.download = "exported_data.json"
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)

    URL.revokeObjectURL(url) // メモリ解放
  })

  return (
    <PageFrame title={systemName.field.value}>
      <div className="grid grid-cols-[8rem,1fr] p-8 gap-y-4">

        <SectionTitle>システム名</SectionTitle>
        <SingleLineTextBox {...systemName.field} />

        <hr className="col-span-full border-t border-color-4" />

        <SectionTitle>保存/復元</SectionTitle>
        <div className="flex flex-col items-start gap-1">
          <Input.IconButton onClick={handleImport} fill>JSONファイルからインポートする</Input.IconButton>
          <Input.IconButton onClick={handleExport} fill>JSONファイルにエクスポートする</Input.IconButton>

          <input
            ref={fileInputRef}
            type="file"
            accept="*.json"
            className="hidden"
            onChange={handleFileInputChange}
          />
        </div>

      </div>
    </PageFrame>
  )
}
